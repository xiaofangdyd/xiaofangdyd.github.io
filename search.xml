<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hello, Hexo]]></title>
    <url>%2Fhello-Hexo%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[简单工厂模式（Simple Factory）]]></title>
    <url>%2F%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88Simple-Factory%EF%BC%89%2F</url>
    <content type="text"><![CDATA[一、 前言工厂模式主要是为创建对象提供过度接口，以便将创建对象的具体过程隔离屏蔽起来，达到提高灵活性的目的。 工厂模式可以分为三类：简单工厂模式（Simple Factory）、工厂方法模式（Factory Method）、抽象工厂模式（Abstract Factory）。这三种模式从前到后逐步抽象，并且更具一般性。 本文会简单概述开发中最常用的设计模式 - 简单工厂模式。 在阅读下文前强烈建议先阅读{ % post_link 设计模式简介 设计模式简介 } 二、含义简单工厂模式又称静态工厂方法模式（因为工厂类定义了一个静态方法）。在现实生活中，工厂是负责生产产品的；同样在设计模式中，简单工厂模式我们可以理解为负责生产对象的一个类，称为“工厂类”。 它存在的目的很简单：定义一个用于创建对象的接口。 三、解决的问题将“类实例化的操作”与“使用对象的操作”分开，让使用者不用知道具体参数就可以实例化出所需要的“产品”类，从而避免了在客户端代码中显式指定，实现了解耦。即使用者可直接消费产品而不需要知道其生产的细节 四、 模式原理1. 模式组成 组成（角色） 关系 作用 抽象产品（Product） 具体产品的父类 描述产品的公共接口 具体产品（Concrete Product） 抽象产品的子类；工厂类创建的目标类 描述生产的具体产品 工厂（Creator） 被外界调用 根据传入不同参数从而创建不同具体产品类的实例 2. UML类图 3. 使用步骤 创建抽象产品类&amp;定义具体产品的公共接口。 创建具体产品类（继承抽象产品类） &amp; 定义生产的具体产品。 创建工厂类，通过创建静态方法根据传入不同参数从而创建不同具体产品类的实例。 外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例。五、 实例&amp;代码1. 基本情况 背景：小X有一个塑料生产厂，用来做塑料加工生意。 目的：小X希望通过简单工厂模式实现3款产品的生产。2. 使用步骤(1) 创建抽象产品类，定义具体产品的公共接口123abstract class Product&#123; public abstract void Show();&#125; (2) 创建具体产品类（继承抽象产品类），定义生产的具体产品1234567891011121314151617181920//具体产品类Aclass ProductA extends Product&#123; public void Show() &#123; System.out.println("生产出了产品A"); &#125;&#125;//具体产品类Bclass ProductB extends Product&#123; public void Show() &#123; System.out.println("生产出了产品C"); &#125;&#125;//具体产品类Cclass ProductC extends Product&#123; public void Show() &#123; System.out.println("生产出了产品C"); &#125;&#125; (3) 创建工厂类，通过创建静态方法从而根据传入不同参数创建不同具体产品类的实例1234567891011121314151617181920class Factory &#123; public static Product Manufacture(String ProductName)&#123;//工厂类里用switch语句控制生产哪种商品；//使用者只需要调用工厂类的静态方法就可以实现产品类的实例化。 switch (ProductName)&#123; case "A": return new ProductA(); case "B": return new ProductB(); case "C": return new ProductC(); default: return null; &#125; &#125;&#125; (4) 外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例1234567891011121314151617181920212223242526272829303132333435//工厂产品生产流程public class SimpleFactoryPattern &#123; public static void main(String[] args)&#123; Factory mFactory = new Factory(); //客户要产品A try &#123; //调用工厂类的静态方法 &amp; 传入不同参数从而创建产品实例 mFactory.Manufacture("A").Show(); &#125;catch (NullPointerException e)&#123; System.out.println("没有这一类产品"); &#125; //客户要产品B try &#123; mFactory.Manufacture("B").Show(); &#125;catch (NullPointerException e)&#123; System.out.println("没有这一类产品"); &#125; //客户要产品C try &#123; mFactory.Manufacture("C").Show(); &#125;catch (NullPointerException e)&#123; System.out.println("没有这一类产品"); &#125; //客户要产品D try &#123; mFactory.Manufacture("D").Show(); &#125;catch (NullPointerException e)&#123; System.out.println("没有这一类产品"); &#125; &#125;&#125; (5) 输出结果1234生产出了产品A生产出了产品B生产出了产品C没有这一类产品 六、优缺点1. 优点 将创建实例的工作与使用实例的工作分开，使用者不必关心类对象如何创建，实现了解耦。 把初始化实例时的工作放到工厂里进行，使代码更容易维护。 更符合面向对象的原则。 面向接口编程，而不是面向实现编程。2. 缺点 工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响。 违背开放封闭原则，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。 简单工厂模式由于使用了静态工厂方法，静态方法不能被继承和重写，会造成工厂角色无法形成基于继承的等级结构。七、应用场景 当客户程序不需要知道要使用对象的创建过程。 客户程序使用的对象存在变动的可能，或者根本就不知道使用哪一个具体的对象。]]></content>
      <categories>
        <category>tools</category>
        <category>OOAD</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式简介]]></title>
    <url>%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[一、 定义及作用1. 定义设计模式（Design pattern）是软件开发人员在软件开发过程中面临特定问题设计的解决方案，这些解决方案是众多开发人员经过相当长一段时间的试验和错误总结出来的。 2. 作用 提高代码复用率，降低开发成本和周期 提高代码的可靠性 让代码更容易被他人理解二、 设计原则在设计模式中，强调如下六大原则：1. 开放封闭原则（Open Close Principle） 一个实体（类、函数、模块等）应该对扩展开放，对修改关闭 每次发生变化时，要通过添加新的代码来增强现有类型的行为，而不是修改原有的代码。 符合开放封闭原则的最好方式是提供一个固有的接口，然后让所有可能发生变化的类实现该接口，让固定的接口与相关对象进行交互。 可以使程序的扩展性更好，易于维护和升级。 需要使用接口和抽象类。2. 里氏替换原则（Liskov Substitution Principle） 任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石。 在软件开发过程中，子类替换父类后，程序的行为是一样的。 只有当子类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而子类也能够在基类的基础上增加新的行为。 LSP是对开放封闭原则的补充，是对实现开放封闭原则的具体步骤的规范。3. 依赖倒置原则（Dependence Inversion Principle） 针对接口编程，依赖于抽象而不依赖于具体。 细节应该依赖于抽象，而抽象不应该依赖于细节。 所谓的 面向接口编程，而不是面向实现编程 。这样可以降低客户与具体实现的耦合。4. 接口隔离原则（Interface Segregation Principle） 使用多个隔离的接口，比使用单个接口要好。 不要让一个单一的接口承担过多的职责，而应把每个职责分离到多个专门的接口中，进行接口分离。 要降低类之间的耦合。 强调降低依赖，降低耦合。5. 迪米特法则（Demeter Principle） 一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。 又称：最少知道原则。 遵守迪米特法则的模块修改时影响的更少，扩展更加容易。 外观模式（Facade Pattern)和中介者模式（Mediator Pattern）就使用了迪米特法则。6. 合成复用原则（Composite Reuse Principle） 尽量使用合成/聚合的方式，而不是使用继承。 三、 设计模式分类设计模式总共分为三大类，共23种设计模式。]]></content>
      <categories>
        <category>tools</category>
        <category>OOAD</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云搭建typecho博客平台]]></title>
    <url>%2F%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAtypecho%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0%2F</url>
    <content type="text"><![CDATA[经过半年多的折腾，我的博客最终在阿里云的服务器成功落户，中间经历了更换域名，导入ssl证书，更换博客平台，网站迁移，网站备案等一系列事件。在弄这些东西的时候，免不了查询资料，我发现国内的资料要么比较老，要么就不全。这篇博客是我安装的一个记录，也可以算是备份。如果有和我一样情况的，本文也可以是一个参考。 使用本文教程有几个前提要求： 租用的有服务器，系统为ubuntu16.04（其他系统大同小异） 购买的有域名且通过工信部icp备案。（未备案的服务器需在中国大陆境外） 本文分为以下几个部分：lnmp环境安装、网站部署、部署typecho、备份及迁移后的恢复 一、lnmp环境安装lnmp在网上有很多安装方法，需要输入大量的命令，这里取最简单的lnmp一键安装包 1. 登录服务器使用xshell或类似的SSH工具登录服务器，登录后运行：1screen -S lnmp 如果提示1screen:commend not found 可以先安装screen后再执行。使用screen的目的在于防止安装中途ssh由于长时间未通信而断开链接，导致安装程序中断。如果实在不想弄可以跳过。 2. 下载并安装lnmp一键安装包1wget -c http://soft.vpser.net/lnmp/lnmp1.4.tar.gz &amp;&amp; tar zxf lnmp1.4.tar.gz &amp;&amp; cd lnmp1.4 &amp;&amp; ./install.sh lnmp 安装过程在官方说明中已经很详细指出：官方安装说明最简单的教程就是除了提示输入MySql密码时，其他一路回车选默认值就好。 二、 网站部署1. 添加网站1lnmp vhost add 步骤同样可以在官方说明中找到：添加网站说明需要注意的是 网站的目录最好设置为/home/wwwroot/default这样方便我们以后添加数据库管理界面。 提示是否启动伪静态Allow Rewrite rule? (y/n)时，输入y，并在选择配置文件时，输入typecho。 其他的看个人需求添加，懒得看的全部回车就好。2. 域名解析去域名注册商把网站解析到服务器ip上。此过程不再赘述。3. 添加ssl证书在这里我使用的是阿里云Symantec免费SSL证书，申请方法自行百度。将适用于Nginx的证书文件下载下来。在/usr/local/nginx目录下新建cert目录，并将下载的两个文件放到cert目录下，并分别命名为ssl.pem; ssl.key。之后将nginx中对应域名的conf文件（一般位于”/usr/local/nginx/conf/vhost”中）先备份，之后将80端口部分修改为：123456789101112server &#123; listen 80; #listen [::]:80;\ server_name your_server_name; index index.html index.htm index.php default.html default.htm default.php; root /home/wwwroot/default; include typecho.conf; include enable-php-pathinfo.conf; ##强制把http请求跳转到https请求 return 301 https://$server_name$request_uri;&#125; 添加443端口部分:123456789101112131415161718192021222324252627282930313233343536server&#123; listen 443; server_name your_server_name; ssl on; root html; index index.html index.htm index.php; ssl_certificate /usr/local/nginx/cert/ssl.pem; ssl_certificate_key /usr/local/nginx/cert/ssl.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; include typecho.conf; include enable-php-pathinfo.conf; location /nginx_status &#123; stub_status on; access_log off; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 12h; &#125; location ~ /\. &#123; deny all; &#125; access_log /home/wwwlogs/access.log; &#125; 完成后重启nginx服务nginx -s reload 注意：在此conf文件中，我默认开启了http强制跳转https，并解决了typecho在lnmp一键安装包中由于伪静态导致的后台无法访问的问题。有其他需要可以自行改动。 三、 部署typecho1. 上传typecho到网站目录先从官网下载安装包，再上传到/home/wwwroot文件夹下。使用tar zxvf解压缩后，将老default文件夹改为old，将解压出的build文件夹命名为default。给新default文件夹操作权限1chmod 777 default 2. 添加数据库由于上一步替换掉了之前的default文件夹，因此phpmyadmin这个在线数据库管理系统需要从新安装。进入~/lnmp1.4目录，执行 ./upgrade.sh phpmyadmin输入4.6.6即可。之后访问服务器ip/phpmyadmin用root登录后新建typecho数据库。 3. 安装typecho直接访问网站即可跳到typecho的安装界面，按步骤安装完成后即可使用。如果提示无法创建文件xxx，请手动创建xxx，是因为在1中未给文件夹操作权限。 四、 备份及迁移后的恢复1. 备份在博客的日常使用中，建议至少每一个月备份一次。由于typecho自带的备份不能备份主题，图片和插件，因此如果使用了第三方主题、上传了插件或在博客中上传了图片，都需要将default/usr下的plugins、themes、uploads三个文件夹进行备份，下载。12#压缩命令tar zcvf beifen.tar.gz /home/wwwroot/default/usr 之后可以把压缩包保存到本地。 2. 恢复在进行服务器迁移时，安装完typecho后，可以先恢复typecho自带的备份，恢复完成后会发现文章中的图片全都打不开，之后就可以将备份好的usr上传到服务器，解压后移动到相应的位置即可。 五、 注意事项 typecho部署在阿里云上的话，上传图片会被防火墙拦截，需要在控制台防火墙中将ftp的21端口打开。 有更新今后会补充。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>typecho</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[同步和异步，阻塞和非阻塞]]></title>
    <url>%2F%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%EF%BC%8C%E9%98%BB%E5%A1%9E%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%2F</url>
    <content type="text"><![CDATA[在学习计算机操作系统的时候，经常会听老师讲到同步(Sync)/异步(Async)、阻塞(Block)/非阻塞(Unblock)四种调用方式，并且这些概念经常会搞混，下面说说我个人的理解过程。 1. 同步和异步 同步：所谓同步，就是在发出一个功能调用之后，在没有得到结果之前，该调用就不返回。按照这个定义，其实绝大部分函数都是同步调用。 异步：就是在发出一个功能调用之后，调用返回。被调用的部件在完成后，通过状态、通知或回调来通知调用者。 在程序里，同步和异步，是从程序通信过程来定义的。同步过程发起请求后，等到结果再返回；异步过程发起请求后立即返回，后续有事件通知。即调用的结果是调用者主动去获取的（比如一直等待recvfrom或者设置超时等待的select），则为同步。而调用结果是被调用者在完成后通知调用者的（比如Windows的IOCP），则为异步。 2. 阻塞和非阻塞 阻塞：阻塞调用是指调用结果返回之前，当前进程被挂起（线程进入非可执行状态，在这个状态下，cpu不会给线程分配时间片，当I/O操作结束，该线程阻塞状态解除，重新变为活动线程）。函数只有在得到结果之后才会返回。 非阻塞：和阻塞的概念相对，指在不能立即得到结果之前，该函数不会阻塞当前的线程，而会立刻返回，线程处于活跃状态。 在程序里，阻塞和非阻塞，是针对调用者所在线程是否在调用后主动挂起来说的。即如果在线程中调用者发出调用后，在被调用者返回之前，该线程主动挂起，则为阻塞。若线程不主动挂起，而继续向下执行，则为非阻塞。 3. 四者的联系和区别我之前经常把同步和阻塞搞混，认为是等同的。其实根本不一样，对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。 在这里我将列举一个找资料过程中看到的例子来说明同步和异步、阻塞和非阻塞之间的联系和区别。 老张用两个水壶烧水（普通水壶和响水壶）。 同步阻塞：老张把普通水壶放到火上，站着等待，每隔一段时间看看水开没开。 同步非阻塞：老张把普通水壶放到火上，然后去做别的事，同样每隔一段时间看看水开没开。 异步阻塞：老张把响水壶放到火上，站着等待，水烧开时水壶呜呜响，从而知道水开了。 异步非阻塞：老张把响水壶放到火上，然后去做别的事，水烧开时水壶呜呜响，从而知道水开了。 所谓同步异步，只是对于水壶而言。 普通水壶：同步； 响水壶：异步。 所谓阻塞非阻塞，只是针对老张而言。 站着等待的老张：阻塞； 做别的事的老张：非阻塞。 情况1、3中的老张就是阻塞的，在等待的时候，别人喊他是不会应答的。虽然3中响水壶是异步的，但对于阻塞的老张没有太大意义。 所以一般异步是配合非阻塞来使用的，这样才能发挥异步的作用。]]></content>
      <categories>
        <category>tools</category>
        <category>idea</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生活中的算法]]></title>
    <url>%2F%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[前几天梦见幼儿园排队，想到了冒泡排序，抖个机灵发朋友圈里了，还说要总结生活里的算法……这几天一直在想，先把目前能想到的写出来吧，以后再补充。（以后再也不乱立flag了） 程序员穿袜子 这是一个程序员圈子里很经典的一个梗。从名字中就散发出生活的清香。 程序员把他所有的袜子都放在卧室的地板上，摆成一个实心三角形（小顶堆）。每天下班回家就把袜子放在最后面，也就是堆的末尾。然后每次拿起两双袜子放在鼻子下闻闻，把相对较臭的放在后面，不断向前调整袜子在三角形中的位置，直到下面的都比上面的臭为止。这样，程序员每天出门就能方便的选出一双最不臭的袜子。 在这个梗里，程序员使用的是堆排序，这是一个有味道的算法…… 二分找肉法 吃串串香的时候，串特别长，一段串着肉，但有的店家没弄好，煮一会儿后肉全掉汤里了。 假设我手中有32根串，但末端只有一片牛肚。如果我一根一根找，那么在最坏的情况下，我需要O（n），也就是32次挑选才能选出那根有肉的串。 于是我发明了二分找肉法，首先把手里的串分成等量的两份，然后再对有肉的一份进行同样的操作，直到n=1为止。 复杂度从O（n）降为O（logn），只需要5次挑选。 在我发明算法并找到牛肚的时间里，汤里的31串牛肚估计已经老了。 衣柜算法 在家里的时候，衣服分门别类放成几摞，大的衣服还能挂起来，找衣服是很轻松的，近似于O（1）的复杂度，可以看作实现了哈希字典。 在寝室里衣柜基本只够将所有的衣服叠在一起放几摞（这里为了说明方便，按1摞处理）。要找一件不起眼的衣服，需要遍历一整叠，找到后还需要先把上层的衣服pop出来，取衣服过后再push进去……差不多就是一个stack栈，非常不适合查找的一种数据结构（手动再见） 课堂算法 高中上课，语数外理化生每节课40分钟，一般不会连上，体育音乐之类一周一节，还时常被抢占，处于饥饿状态，这里使用的是多级反馈时间片轮转调度算法。 上大学后，一节课50分钟，还是两节连着上，时间片边长了，也没了抢占，这就是基本的时间片轮转调度算法。 寒暑假在家，想学习劳逸结合，也运用时间片轮转调度算法。睡觉一片，吃饭一片，看视频一片，吃鸡一片，吃鸡一片，吃鸡一片，然后没时间学习了…… 想想真是佩服自己高中时候，上节课刚考完数学休息几分钟马上就能写一篇作文，几门课切换自如，寄存器如此强大，现在它已经快废了吧╮(╯▽╰)╭ 课文索引 以前语文课老师要求我们一人读一段课文，快到我的时候，我快速浏览全文，建立起跳转索引，然后仔细听前面同学读的内容，迅速匹配到相应的字符串。 查字典 小学查字典时会用trie树（在索引上找），初中以后就直接哈希（翻首字母）+ 二分（胡翻）了。 杂七杂八的一些小算法（合起来写） 幼儿园老师按高低个排队，“高的站后面，小的站前面”、“你们俩换一下”，这是对基本有序数组的冒泡排序。 忘记密码锁密码的时候，一个一个试，穷举。这局打完我再去上课，贪心算法。各种心里推断题，1、你开心吗？A、开心，去第2题。B、不开心，去第3题。有向图。]]></content>
      <categories>
        <category>tools</category>
        <category>code</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[诸事皆宜，百无禁忌]]></title>
    <url>%2F%E8%AF%B8%E4%BA%8B%E7%9A%86%E5%AE%9C%EF%BC%8C%E7%99%BE%E6%97%A0%E7%A6%81%E5%BF%8C%2F</url>
    <content type="text"><![CDATA[以前觉得这个世界是讲道理的，其实不是。 勤勤恳恳做一些我认为对的事情，为了某个目标倾尽所有，我相信只要自己足够真诚，就一定可以得到这个世界的认可。 可这个世界残酷就残酷在存在太多太多的事与愿违。 我所有的只能让自己安心，除此之外并不一定就能够被承认。比如认真念书，到头来也没能有什么好成绩; 我拿出来全部的真诚，也没能处理好人与人之间的关系。我以为自己努力不犯错，就不会不被爱，不会被曲解，不会被拋弃。 其实不是的。世界是冷漠的，它不在乎你付出多少，也不讲人情，不存在因果报应，也没什么合理不合理的。 我所得到的都是侥幸，所失去的才是人生。 这样的心态真的是很棒啊。 我当然相信这个世界上有真正热爱生活的人，但一定也会有不少人，能够心平气和地面对得失，放弃该放弃的，控制能控制的，在深不见底的绝望里冷漠走过，生出更高级的热爱。 于是结果啊过程啊都没那么重要了，关键还是看自己的态度。尽人事听天命大概就是这么一个道理。 已经无所谓这个世界讲不讲道理了，无愧于心，就是我现在最大的追求。]]></content>
      <categories>
        <category>方方说</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《2018刑侦科推理试题》详解]]></title>
    <url>%2F%E3%80%8A2018%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98%E3%80%8B%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[最近江苏网警的一篇《2018刑侦科推理试题》养活了很多自媒体朋友，我最初了解的渠道是在qq看点……据报道，有网友晒出解题过程要满满好几页稿纸，有人用电脑软件计算竟然花了近半小时……我按自己的思路走一遍发现还不算太难，是不是媒体故意夸大其词来博眼球？老一辈教导我们：“不要听风就是雨，将来报道出了偏差，是要负责任的。”本着马列唯物主义的质疑精神，我写出了自己的解题过程，只有6行；电脑模拟基本秒出答案，为了增强真实性，本文附带模拟源代码。 首先亮题： 再亮答案： 思路（非代码相关人士可以跳两段再看） 说实话，看到这题的时候我是懵逼的，但只要读懂题意，完全不需要动脑子推理，不需要切入点，编好程序瞎鸡儿运行就好。 我记得有人曾跟我说过，你们敲代码的是不是计算能力都特好，其实说实话，如果有手机，2位数+2位数我都懒得算，能用机器准确得出结果，为什么要费脑子。 回归本题，用C++编程，暴力列举出所有的情况，再一一验证条件，运行。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;math.h&gt;int main()&#123; int answer[10]; int b[10]; int count[4]; int i; int j; int k=0; int max, min; max=0; int max_order = 0; min=10; int min_order = 0; char test='A'; for(i=0;i&lt;10; i++)&#123; answer[i] = 0; b[i]=0; count[i]=0; &#125; printf("test\n"); for(b[0]=0; b[0]&lt;4; b[0]++)&#123; for(b[1]=0; b[1]&lt;4; b[1]++)&#123; for(b[2]=0; b[2]&lt;4; b[2]++)&#123; for(b[3]=0; b[3]&lt;4; b[3]++)&#123; for(b[4]=0; b[4]&lt;4; b[4]++)&#123; for(b[5]=0; b[5]&lt;4; b[5]++)&#123; for(b[6]=0; b[6]&lt;4; b[6]++)&#123; for(b[7]=0; b[7]&lt;4; b[7]++)&#123; for(b[8]=0; b[8]&lt;4; b[8]++)&#123; for(b[9]=0; b[9]&lt;4; b[9]++)&#123; if(b[1]&lt;2)&#123; if(b[4]!=(b[1]+2)) continue;&#125; else &#123;if(b[4]!=(b[1]-2)) continue;&#125; if(b[2]==0)&#123; if((b[5]!=b[1]) || (b[1]!=b[3]) ||(b[5]!=b[3])|| (b[2]==b[5]) || (b[2]==b[1] ) || (b[2]==b[3]) ) continue; &#125;else if(b[2]==1)&#123; if((b[2]!=b[1]) || (b[1]!=b[3]) ||(b[2]!=b[3])|| (b[2]==b[5]) || (b[5]==b[1] ) || (b[5]==b[3]) ) continue; &#125; else if(b[2]==2) &#123; if((b[5]!=b[2]) || (b[5]!=b[3]) ||(b[2]!=b[3])|| (b[2]==b[1]) || (b[5]==b[1] ) || (b[1]==b[3]) ) continue; &#125; else&#123; if((b[5]!=b[1]) || (b[1]!=b[2]) ||(b[5]!=b[2])|| (b[3]==b[5]) || (b[3]==b[1] ) || (b[2]==b[3]) ) continue; &#125; if(b[3]==0)&#123; if(b[0] != b[4] ) continue; &#125; else if (b[3]==1)&#123; if(b[1] != b[6] ) continue; &#125; else if (b[3]==2) &#123; if(b[0] != b[8] ) continue; &#125; else &#123; if(b[5] != b[9] ) continue; &#125; if(b[4]==0)&#123; if(b[7] != b[4] ) continue; &#125; else if (b[4]==1)&#123; if(b[4] != b[3] ) continue; &#125; else if (b[4]==2) &#123; if(b[4] != b[8] ) continue; &#125; else &#123; if(b[4] != b[6] ) continue; &#125; if(b[5]==0)&#123; if((b[7] != b[1]) || (b[7]!=b[3] ) ) continue; &#125; else if (b[5]==1)&#123; if((b[7] != b[0]) || (b[7]!=b[5] ) ) continue; &#125; else if (b[5]==2) &#123; if((b[7] != b[2]) || (b[7]!=b[9] ) ) continue; &#125; else &#123; if((b[7] != b[4]) || (b[7]!=b[8] ) ) continue; &#125; for(j=0; j&lt;4; j++)&#123; count[j]=0; &#125; for(j=0; j&lt;10; j++)&#123; count[b[j]]++; &#125; max = 0; for(j=0;j&lt;4;j++)&#123; if (count[j] &gt; max) &#123;max = count[j]; max_order = j;&#125; &#125; min = 10; for(j=0;j&lt;4;j++)&#123; if (count[j] &lt; min) &#123;min = count[j]; min_order = j;&#125; &#125; if(b[6]==0)&#123; if(( min_order != 2)) continue; &#125; else if (b[6]==1)&#123; if(( min_order != 1)) continue; &#125; else if (b[6]==2) &#123; if(( min_order != 0)) continue; &#125; else &#123; if(( min_order != 3)) continue; &#125; if(b[7]==0)&#123; if(abs((b[6]-b[0]))==1) continue; &#125; else if (b[7]==1)&#123; if(abs((b[4]-b[0]))==1) continue; &#125; else if (b[7]==2) &#123; if(abs((b[1]-b[0]))==1) continue; &#125; else &#123; if(abs((b[9]-b[0]))==1) continue; &#125; if(b[8]==0)&#123; if((b[0]==b[5]) == (b[4]==b[5]) ) continue; &#125; else if (b[8]==1)&#123; if((b[0]==b[5]) == (b[4]==b[9]) ) continue; &#125; else if (b[8]==2) &#123; if((b[0]==b[5]) == (b[4]==b[1]) ) continue; &#125; else &#123; if((b[0]==b[5]) == (b[4]==b[8]) ) continue; &#125; if(b[9]==0)&#123; if((max-min)!=3 ) continue; &#125; else if (b[9]==1)&#123; if((max-min)!=2 ) continue; &#125; else if (b[9]==2) &#123; if((max-min)!=4 ) continue; &#125; else &#123; if((max-min)!=1 ) continue; &#125; //printf("%d, %d, %d , %d ,max %c : %d ; min %c : %d\n", count[0], count[1], count[2], count[3],max_order+test, max, min_order+test, min ); printf("final answer is :\n"); for(j=0;j&lt;10;j++)&#123; printf("%c ", (char)(b[j]+test)); &#125; printf("\n"); for(j=0; j&lt;4; j++)&#123; count[j]=0; &#125; &#125; &#125; &#125; &#125; &#125; &#125; &#125; &#125; &#125; &#125;&#125; 正常解题思路 本解法不需要高深的数学基础，不需要编程知识，只要能读懂题意，抓对方法，解题其实很快。整个题干虽然都很虚，但巧妙利用阅读理解，可以推出很多信息。 条件1：从第三题可以得出，2、3、4、6题里面，有3题的答案是相同的。条件2：从第10题可以得出，本试卷答案最多的字母，数字也不会超过5，且本试卷答案最少的字母，肯定小于2（为1或者0）（要想明白这个道理需要一定的逻辑能力） 这种逻辑题，一旦知道了3题的答案，极大概率就能推出其他答案。鉴于单选题的性质，挨个尝试就可以了。 1、若3选A，则2、4、6选项相同且不为A，条件1、2满足。1.1、若2、4、6选B，进而推出5、7为D，不满足条件2，错。1.2、若2、4、6选C，由2知5为A，由6知3、8、10为A，条件1、2满足。1.2.1、由8知2、5、10与1答案字母相邻，2为C，5为A，10为A，所以1为B，条件1、2满足。1.2.1.1、理到现在，只有7、9未知，由已知答案可得9为B，条件1、2满足。1.2.1.1.1、最后，7选D，条件1、2满足。 所以最终答案为： 总结： 不要相信无良媒体满嘴跑火车，天文科普就是被这群智障媒体弄得一直没起色。 要培养良好的阅读和推理能力。 要认识到这不是分散的10道选择题，而是1道整体的推理题。 一张纸，一只笔，解答事半功倍。 程序还有优化空间，比如可以把简单的if判断放前面，快速排查掉一些无用的条件。 所以，@江苏网警，贵单位的刑侦科报道处怎么走？]]></content>
      <categories>
        <category>tools</category>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[《新东方快车谋杀案》一部画面比剧情好看的推理电影]]></title>
    <url>%2F%E3%80%8A%E6%96%B0%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%88%E3%80%8B%E4%B8%80%E9%83%A8%E7%94%BB%E9%9D%A2%E6%AF%94%E5%89%A7%E6%83%85%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%8E%A8%E7%90%86%E7%94%B5%E5%BD%B1%2F</url>
    <content type="text"><![CDATA[在去年的朋友圈中，我才知道了这个广为人知的故事，这个曾经有过一版堪称经典的电影。直到今天，我才想起来欣赏。说实话，我之前并没有刻意搜索过这个故事，所以我会以一个新人的角度来欣赏这部作品。 在电影的开场，波洛吃早餐量鸡蛋，接着双脚踩屎，再后面用拐杖放倒逃犯，这一切都是在塑造波洛严苛到极致的形象，这种巧妙的安排让我们初识的观众可以很轻松的认识波洛。 当本剧唯一大反派卡塞蒂变成盒子的时候，我才发现他是上了火车的杰克船长。在他被捅死之后，我还下意识觉得他会手上夹着一枚金币，突然跳起来说：“女士们先生们，你们将永远记住这一天，因为你们差点就捅死了杰克.斯派洛船长。” 在中间的问询阶段，电影显得略显沉闷。尽管导演采用平行剪辑的手法加快节奏，刻意去增加的剧情的刺激性，但还是处理偏颇。直到最后的揭秘，电影让所有人走出车厢，在隧道入口排一张长桌，十二名乘客齐聚，呈现《最后的晚餐》之态。晶莹白雪和幽邃黑洞之间，昏黄的灯火下，12名装作不认识的凶手。画面十分美好，可是在剧情上不是特别理想，感觉有点像为了实现《最后的晚餐》的镜头，又受制于车厢空间太小，而做出的无奈之举。 最后波洛在说出了12人联合复仇的真相之后，掏出枪放在桌上说：“你们现在唯一的选择是杀了我，把我扔在冰湖里，因为我不会说谎。”然后女话剧演员不愿为了掩盖罪行而杀一个无辜的人，拿起枪自杀，发现枪里没子弹……这点我在思考很久后才明白，这是波洛给他们的一个测试。虽然他们杀的是一个十恶不赦的罪犯，但在侦探眼中，他们都参与了杀人，也应该为自己的行为承担责任，不然法律的威严何在？而女话剧演员自杀，让波洛知道，他们在自己生命受到威胁时，仍然不愿意为了掩盖罪行而杀掉一个无辜的人。这个举动才是波洛违背自己原则放过所有人的原因。 脑洞 最后波洛准备走出车厢时，电影的旁白说：“阿姆斯特朗少校，我终于可以给你回信了……“我忽然觉得波洛才是本案真正的幕后推手，为了确保谋杀可以顺利执行，波洛放下偏执和一个花花公子为友，才搭乘上这班列车。他亲临现场，每一个步骤后都开门检查走廊，用自己的推理，演出了戏中戏，为整个案情上了双保险，即使其他人搞砸了，有他最著名侦探的头衔在，最后也可以顺利圆回来。]]></content>
      <categories>
        <category>方方说</category>
        <category>电影</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《月亮和六便士》----是否有个魔鬼抓住了他的灵魂？]]></title>
    <url>%2F%E3%80%8A%E6%9C%88%E4%BA%AE%E5%92%8C%E5%85%AD%E4%BE%BF%E5%A3%AB%E3%80%8B-%E6%98%AF%E5%90%A6%E6%9C%89%E4%B8%AA%E9%AD%94%E9%AC%BC%E6%8A%93%E4%BD%8F%E4%BA%86%E4%BB%96%E7%9A%84%E7%81%B5%E9%AD%82%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[啃完了《月亮与六便士》，有种当头一棒的痛感。总是渴望找到一项东西，然后为之不管不顾、 为之疯狂。一潭死水的生活最是让人窒息 。最痛苦的事不是平衡地上的六便士和天上月亮的关系，而是当你想仰望，却压根没找到天上的月亮。 摘录： 说这些豪言壮语的人可能还觉得他们在说一些前人未曾道过的真理，但是实际上连他们说话的腔调前人也已经用过一百次，而且丝毫也没有变化。钟摆摆过来又荡过去，这一旅程永远反复循环。 在那个时代谈话仍然被看作是一种需要下功夫陶冶的艺术，一句巧妙的对答比锅子底下噼啪爆响的荆棘更受人赏识，格言警句当时还不是痴笨的人利用来冒充聪敏的工具， 同情体贴本是一种很难得的本领，但是却常常被那些知道自己有这种本领的人滥用了。他们一看到自己的朋友有什么不幸就恶狠狠地扑到人们身上，把自己的全部才能施展出来，这就未免太可怕了它使人想到一条平静的小河，蜿蜒流过绿茸茸的牧场，与郁郁的树荫交相掩映，直到最后泻入烟波浩渺的大海中。但是大海却总是那么平静，总是沉默无言、声色不动，你会突然感到一种莫名的不安。 有些人的生活只是社会有机体的一部分，他们只能生活在这个有机体内，也只能依靠它而生活，这种人总是给人以虚幻的感觉； 我决定第二天晚上再去找思特里克兰德，因为我本能地觉得，必须细致盘算，并选定这一时间去。如果想从感情上说动一个人，在午饭以前是很少会成功的。 只有诗人同圣徒才能坚信，在沥青路面上辛勤浇水会培植出百合花来。 有人说灾难不幸可以使人性高贵，这句话并不对；叫人做出高尚行动的有时候反而是幸福得意，灾难不幸在大多数情况下只能使人们变得心胸狭小、报复心更强。 他非常重感情，但是在他那很容易就被打动的感情里面却含有某种愚蠢的东西，让你接受了他好心肠的帮助却丝毫没有感激之情。向他借钱就好象从小孩儿手里抢东西一样；因为他太好欺侮，你反而有点儿看不起他。 有时候一个人的外貌同他的灵魂这么不相称，这实在是一件苦不堪言的事。 如果灵魂真能出窍的话，不论出什么代价我也得试一次；只有这样我才能在画室里看到他俩私下如何过活，才能听到他们交谈些什么。总之一句话，我没有可以供我的幻想力发挥作用的最小依据。 女人们不断为了爱情而自寻短见，但是一般说来她们总是做得很小心，不让自杀成为事实。通常这只是为了引起她们情人的怜悯或者恐怖而作的一个姿态。 护士用她那双宁静、慈祥的眼睛望着戴尔克，这双眼睛曾经看到过人世的一切恐怖和痛苦，但是因为那里面装的是一个没有罪恶的世界的幻景，所以她的目光是清澈的。 我们非常可怜地想把自己心中的财富传送给别人，但是他们却没有接受这些财富的能力。因此我们只能孤独地行走，尽管身体互相依傍却并不在一起，既不了解别的人也不能为别人所了解。 他的思想这时会平静地飘浮在九天之上，他对那个女人感到又嫌恶又可怕，也许那感觉就象一只翩翩飞舞于花丛中的蝴蝶，见到它胜利地蜕身出来的肮脏的蛹壳一样。 小丑的嘴唇在微笑，他的笑话越来越滑稽，因为在他逗人发笑的时候他更加感到自己无法忍受的孤独。 上帝的磨盘转动很慢，但是却磨得很细。 感想：月亮代表高高在上的理想，而六便士代表平凡的现实。理想可能是遥不可及的悬在空中的月亮，而世俗的名誉财富却像六便士一样只要老老实实遵守社会规范努力工作，都是唾手可得的。主人公为了追求画画的理想而放弃了现实的世俗生活，虽然穷困潦倒几次濒临死亡，仍然不忘初心，最终虽然少有人见证到，但还是创造出了传世之作。主人公本来是一个老实体面的经济工作者，有着稳定充足的收入，有幸福的家庭；但突然有一天，他决定放弃这种生活，去追寻自己的艺术。这种转折是毫无征兆的，他就像豁然开朗一般，无所顾忌地抛弃世俗的一切，去追寻自己的艺术理想。 “我怀疑他的灵魂里是否深埋着某种创作本能，那种本能虽然受他的生活环境所抑制，却像肿瘤在活体器官中膨胀那样顽强地生长着，最终控制了他整个人，迫使他不由自主地采取行动。” 前段时间一直在想，我们是不是真的能够看清自己内心所想所盼。我们所成为的人，到底是灵魂的决定还是外界的推动。生活在人群当中，不得不重视别人的看法和评价，不得不在心中住进一个卫兵，当有其他与普世价值相违背的想法冒出，卫兵本能的将其砍掉。可惜，抽刀断水，也许我不明白有什么不对，但始终觉得意难平。我忽然想到了顺治，万里河山，说走就走。 连最至高无上的权利，都阻挡不了内心的渴望。 尼采为什么会疯 梵高为什么割掉耳朵 海明威为什么自杀 追逐梦想就是追逐自己的厄运，在满地都是六便士的街上，他抬起头看到了月光。可能他想通了这一切，才能踩在六便士上，赏着月光，衣衫褴褛，食不果腹。 是否有个魔鬼抓住了他的灵魂？让他只能俯首称臣。 那些命中注定的狂热，对抗卫兵的勇气，最终让他内心安宁。 所有的热爱，在投身于其中的时候，已经得到了最大的报酬，而是否有所认可与收获，都应当处之泰然。 主人公为什么最后选择烧掉他那画有惊世之作的屋子，因为最丰腴的愉悦感，已经在创作的时候产生，任他人看与不看，都与我何干？]]></content>
      <categories>
        <category>方方说</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Typecho!]]></title>
    <url>%2FHello-Typecho%2F</url>
    <content type="text"><![CDATA[这是由Typecho创建的文章！当然这是一篇初始页，也代表着我的博客迎来了一次翻天覆地的改变，虽然以前的博客已经 迁移到xiaofangdyd.tech上 关闭，就让那些过去的就过去吧！更新记录： 博客迁移至洛杉矶、北京Github服务器。（2019.01.29） 使用七牛oss托管图床（2019.01.29） 域名备案 博客程序从Wordpress更换为Typecho轻量级博客框架。 博客采用hexo框架 尽量用Markdown格式将之前的文章转移过来。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>typecho</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《雪国列车》--很多精彩，很多遗憾]]></title>
    <url>%2F%E3%80%8A%E9%9B%AA%E5%9B%BD%E5%88%97%E8%BD%A6%E3%80%8B-%E5%BE%88%E5%A4%9A%E7%B2%BE%E5%BD%A9%EF%BC%8C%E5%BE%88%E5%A4%9A%E9%81%97%E6%86%BE%2F</url>
    <content type="text"><![CDATA[《雪国列车》是我非常喜欢的一部电影，将人类文明史浓缩在一节节车厢里面，凭依上帝视角进行审视。 列车 尾部车厢，象征着阶级社会最底层的劳动者，最为凄惨。 蛋白质块生产车厢，象征着给底层社会提供生活最低保障品的最下服务阶层。 维护列车秩序的军队，象征着国家的暴力机器，他们在最底层的边缘。 植物区，水族馆等，象征着技术劳动者的中间阶层，相对于底层而言待遇稍好，但对社会变革无所适从，他们既服从于统治阶层的权威，又对底层劳动者怀有同情与恐惧。 高级乘客车厢，象征着腐朽的统治阶级，越往车头走，堕落的越彻底。 引擎车厢，象征着阶级社会的最高统治者，一直控制着人类社会方向的最少数人。 “车就是世界，我们就是全人类。” 电影中，人们藏起武器，害怕给小孩不良的印象；而和蔼可亲的怀孕女老师，却当着学生的面悍然拔枪杀人，分发新年礼物貌似慈善的仆人，其实是大屠杀的执行者，隐喻的意思不言自明。 电影中，儿童象征着人类的未来。有三种儿童，一种是底层劳动者中倔强生存的儿童；一种是权贵阶层被深度洗脑的儿童；第三种是最终被当成列车零件，机械化地维护阶级社会秩序的儿童。这也正象征着人类的三种未来。 火在电影中有许多次应用。一次是照亮黑暗的火炬，一次是点燃炸药的火种。《无人区》的一句话特别适合用在这里“我认为人类和动物的区别不是放弃自私，而是人类会使用火” 虽然整部电影的剧情匪夷所思，但最终火车还是被炸掉了，大家一起翘辫子了。自由和平等的代价是巨大的，不自由毋宁死，要死也要一起死。 整个影片结束了，据说这个片子赞颂了革命精神，弘扬了马列主义价值观，可我看到的却是一群阶级底层人民的不满，不满是由于物质的分配不均，分配不均是因为阶级产生，阶级产生是由于人的控制欲和占有欲，因为人有欲望，每个人都会对自身所拥有的不满。 叔本华曾经说过，人得到了就空虚，人得不到就痛苦，人一生就生活在空虚和痛苦之中。尽管物质的丰富只能带来暂时的快乐，这道理人人都懂，但却总忍不住想要得到更多，因为这种欲望是与生俱来的，不去占有更多物质的人早就在远古时期就已经灭绝了，所有生存至今的人类，基因代码里就写下了一句话：“我要得到更多”。 说到底，一句话“因乘客对列车食品不满，酿成火车出轨特大事故”。]]></content>
      <categories>
        <category>方方说</category>
        <category>电影</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java中的100 = 100，但1000≠1000？]]></title>
    <url>%2FJava%E4%B8%AD%E7%9A%84100-100%EF%BC%8C%E4%BD%861000%E2%89%A01000%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[如果我们在Java中运行一段代码：1234Integer a = 100, b = 100;System.out.println(a == b);Integer c = 1000, d = 1000;System.out.println(c == d); 你会得到：truefalse首先，先说明，Java是面向对象的编程语言，一切都是对象，但是为了编程的方便还是引入了基本数据类型，为了能够将这些基本数据类型当成对象操作，Java为每一个基本数据类型都引入了对应的包装类型（wrapper class），int的包装类就是Integer，从Java 5开始引入了自动装箱/拆箱机制，使得二者可以相互转换，对应如下： 原始类型 boolean char byte short int long float double 包装类型 Boolean Character Byte Short Integer Long Float Double 所以最根本的一点区别就是：int的初始值是0，integer的初始值是null；其他还有一些显著的区别就是： Integer变量必须实例化后才能使用，而int变量不需要。 Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值 。 下面再看几个例子来说明两者的区别：12345int i1 = 128;Integer i2 = new Integer(128);Integer i3 = 128;System.out.println(i1 == i2);System.out.println(i1 == i3); 结果均为true，因为包装类Integer在和int进行比较时，无论Integer变量是否为new生成，Integer会自动拆箱成int类型，变成两个int类型比较，所以只要两者数值相等，结果都为true。123Integer i3 = new Integer(100);Integer i4 = new Integer(100);System.out.println(i3 == i4); 结果为false，我们知道，如果两个引用指向同一个对象，用 = =表示他们是相等的；如果两个引用指向不同的对象，即使他们内容相同，但用= =表示他们是不相等的。由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。123Integer i5 = new Integer(100);Integer i6 = 100;System.out.println(i5 == i6); 结果为false，因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同。 对于非new生成的Integer变量，编译时会调用valueOf()函数,例如：Integer i = 100;编译时就会被翻译成：Integer i = Integer.valueOf(100) 而Java API中对Integer类型的valueOf定义如下：1234567public static Integer valueOf(int i)&#123; assert IntegerCache.high &gt;= 127; if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)&#123; return IntegerCache.cache[i + (-IntegerCache.low)]; &#125; return new Integer(i);&#125; java对于-128到127之间的数，会进行缓存，Integer i = 127时，会将127进行缓存，下次再写Integer j = 127时，就会直接从缓存中取，就不会new了。 最后再回到开始的那个代码中，a,b的值为100，在-128到127之间，因此它们指向了同一个对象，结果就为true；c,d的值在-128到127的范围之外，编译时依然调用的是new Integer()，但存放在常量池（方法区）中，因此结果就为false。 至于为什么需要缓存，理由就是，在此范围内的“小”整数使用率比范围外的“大”整数要高，因此，使用相同的底层对象是有价值的，可以减少潜在的内存占用。 总结： 无论如何，Integer与new Integer不会相等。不会经历拆箱过程，new出来的对象存放在堆，而非new的Integer常量则在常量池（在方法区），他们的内存地址不一样，所以为false。 两个都是非new出来的Integer，如果数在-128到127之间，则是true,否则为false。因为java在编译Integer i2 = 128的时候,被翻译成：Integer i2 = Integer.valueOf(128);而valueOf()函数会对-128到127之间的数进行缓存。 两个都是new出来的,都为false。因为内存地址不一样。 int和Integer(无论new否)比，只要数值相同，结果都为true，因为会把Integer自动拆箱为int再去比。 参考资料：Java基础之int和Integer有什么区别]]></content>
      <categories>
        <category>tools</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Integer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[优雅过生活]]></title>
    <url>%2F%E4%BC%98%E9%9B%85%E8%BF%87%E7%94%9F%E6%B4%BB%2F</url>
    <content type="text"><![CDATA[对我而言，我所向往的大学生活就是： 该上课就去上课，想逃课也可以逃课；该吃饭就去吃饭，想打球就去打球；该学习就学习，该聊天就聊天；爱睡懒觉就睡懒觉，决定早起就早起。 面对每一件事，在某种法律规则之内，不管喜不喜欢，强不强迫，专心的投入的出色的做。而不是上课的时候听不进去，想逃课又怕老师点名，只能趴在桌子上玩游戏；逃课的时候担心老师点名，陪着笑脸发讯息给朋友“老师点名了帮我签到啊，谢谢。”该吃饭的时候，放不下手中正忙的事，等忙完之后，匆匆跑去食堂只有剩饭剩菜；想吃零食吃辣条又担心长痘和地沟油，吃完以后喝一缸水排毒；想谈恋爱又开不了口，等着对方先说，结果刷微博发现对方发了一条和别人在一起的消息，只能握着屏幕咬碎钢牙点一个赞；学习的时候想着刷朋友圈刷微博，想着晚上玩什么游戏怎么玩，一下午看几页书，还是绪论；聊天和社团活动的时候心里想的是这话唠净浪费我时间，给我两个小时我都能复习完半本书了。 很多事情做不好的根源，在于“分心”二字，所谓分心，就是 时时刻刻，希望以最短的时间，博取最多的存在感，优越感和自我认同。 ————张佳玮 也就是“浮躁”。 我想，在正确的时间里，用正确的方法，专心投入地做正确的事，大学生活已经算是十分优雅了。]]></content>
      <categories>
        <category>方方说</category>
      </categories>
      <tags>
        <tag>专心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2进制转高进制压缩长度--《天才枪手》观后感]]></title>
    <url>%2F2%E8%BF%9B%E5%88%B6%E8%BD%AC%E9%AB%98%E8%BF%9B%E5%88%B6%E5%8E%8B%E7%BC%A9%E9%95%BF%E5%BA%A6-%E3%80%8A%E5%A4%A9%E6%89%8D%E6%9E%AA%E6%89%8B%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[天才枪手这部剧中，女主角提到的stic考试作弊计划之所以要引入“班克”参加，说是因为她背不下来50多道选择题，可以说间接导致了整个计划的失败。但是我突然想到，如果将ABCD四个选项整合为2进制，用00,01,10,11来代替，这样50多道选择题就会变成一个100多位由0和1组成的数。然后我们对这组数进行压缩处理，就会使长度逐渐变小，最终会相对容易记住并且被发现也基本不会被认为是在传答案。例如，我可以将4位2进制数分为一组，可以对应一个16进制的数（0-g），这样相当于，每两个答案可以合并为一个数字或字母，这样50多个答案会被压缩为20-30位字符，相当于将长度压缩为原来的1/2。女主正好可以记下。并且，在进行短暂的练习之后，可以保证看见两个选项立即写出对应的16进制字符（我就可以，hhhhh）。为什么不转换为更高位数的数字，我的解释是，效率不高。简而言之就是，转换为更高的位数并不能对字符的长度进行更加高效的压缩。2个选项有16种变化正好对应16个字符，而3个选项有64种变化，与之对应的是64进制，64进制包括了26个字母的大小写和0-9十个数字，以及“+”和“/”两个符号，转换的过程会花费大量的时间，并且字母的大小写记忆起来并不容易。我在开始想这个问题的时候，写了2转10再转36进制的字符位数，可以看出，最后依然为20多位，并且转换的过程相当复杂，并不适合考试这种环境。我可以对这100多位2进制数分组，每12个数为一组，将其转换为10进制，就会得到一个4位数（都选D时最大为4095），这样进行一次压缩之后，100多位数会变为30多位十进制的数，再将十进制的数字转换为36进制，以26个大写英文字母及0-9十个数字代替，每三组4位数为一大组转换为一个8位数（最大值为58523YLR），这样50多道选择题会被压缩为一个20位左右的数字加字母的组合。至于为什么这种方法没有比16进制取得更好的压缩效果，我的想法是：在这个举例中，并没有很好的利用进制内的所有数字，例如，在10进制中，最大只用到了4095，还有一大半的数字没有用上，在36进制中，更有6/7的排列没有用上，导致了压缩效率低下。如果按照上文充分利用高进制的排列组合，使用64进制，50多个选项就可以被压缩为17位左右。 总结： 2进制数转高进制压缩时，要尽量多利用到高进制中的排列顺序，这样的压缩效率才会提高。 在计算机中，存在将2进制数压缩为64进制的形式，称为base64编码，Base64是网络上最常见的用于传输8Bit字节码的编码方式之一。 考试作弊是不对的。]]></content>
      <categories>
        <category>方方说</category>
        <category>电影</category>
      </categories>
      <tags>
        <tag>天才枪手</tag>
        <tag>base64编码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在ubuntu16.04的vps上安装搭建ftp]]></title>
    <url>%2F%E5%9C%A8ubuntu16-04%E7%9A%84vps%E4%B8%8A%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAftp%2F</url>
    <content type="text"><![CDATA[由于身边设备包含种类过多，有Windows、Ubuntu、Android、iOS，有时候想要在四台设备间同步ppt，pdf，或者在Windows和Ubuntu上切换编译环境时用u盘拷贝文件步骤过于繁琐，且现有的一台服务器还没能充分利用资源，便萌生了在vps上再搭建一个ftp服务器的想法。我对于ftp服务器的要求就是：有一定安全性，禁止匿名访问，尽量走加密通道传输，使用账户密码登录然而百度上的教程经过我的测试大都不靠谱，于是自己Google摸索了一晚，找到了适合自己的搭建ftp的方法，在此分享并作为自己的备份。 1、安装vsftpd软件流行的FTP服务器端软件有：PureFTP，vsftpd,ProFTPD。考虑到租的服务器性能不高，我采用了轻量并且坑少的vsftpd。命令如下：sudo apt updatesudo apt install vsftpd安装完成后，需要对其进行一定的设置来使用。vilink123456789101112取消下列行首的#注释```write_enable=YES```（允许用户在ftp中的写入操作）```local_umask=022```（为用户增加相应的读写权限）```chroot_local_user=yes```（阻止访问除了用户文件夹意外的文件夹）在文件的末尾添加下列语句来开启消极模式：&lt;code&gt;allow_writeable_chroot=YESpasv_enable-YESpasv_min_port=40000pasv_max_port=40100&lt;/code&gt;之后保存退出编辑，重启vsftpd服务```service vsftpd restart 这时，ftp服务器就可以使用了，但是在21端口使用ftp登录是非常危险的，即使使用了账户密码，但传输文件很容易会被劫持，因此我在Google之后选择使用更为安全的sftp。 2、安装配置sftpsftp使用的是ssh文件传输协议，需要安装openssh-server,一般的vps服务器都预先安装过。安装过就可以跳过这一步。安装命令如下：apt install openssh-server```123安装完成之后我们需要为ftp新建一个用户。为了以后可能会添加用户，这里就创建一个ftpaccess用户组。```sudo groupadd ftpaccess 然后需要在/etc/ssh/sshd_config中修改一些参数。vilink123456789101112找到 **PasswordAuthentication**参数，若其=no，则将其注释掉，若为yes，就不用管。找到 **Subsystem sftp /usr/lib/openssh/sftp-server**将其注释掉。在文件最后添加下列语句：&lt;code&gt;Subsystem sftp internal-sftpMatch group ftpaccessChrootDirectory %hX11Forwarding noAllowTcpForwarding noForceCommand internal-sftp&lt;/code&gt;之后重启ssh服务```service ssh restart 下面开始创建访问sftp服务的用户创建用户xiaofangdyd,属于ftpaccess组sudo useradd -m xiaofangdyd -g ftpaccess -s /usr/bin/nologin(其中使用/usr/bin/nologin脚本来阻止ftp用户访问bash脚本，增加安全性)sudo passwd xiaofangdyd(设置密码)sudo chown root /home/xiaofangdyd(为相应文件夹赋予root权限)开启nologin脚本的开机访问sudo vi /etc/shells在最后添加如下行：/usr/bin/nologin最后在home文件夹创建一个用于下入文件的文件夹，并修改文件夹的所有者mkdir /home/xiaofangdyd/filessudo chown xiaofangdyd:ftpaccess /home/xiaofangdyd/files现在就可以通过sftp来向files文件夹上传并下载文件了。 在Windows和Linux操作端，推荐使用filezilla客户端版（filezilla Client）对ftp服务器进行访问。因为首先fz提供了对sftp登录的支持，最重要的是，由于简体中文版的Windows系统因为国家规定使用的是GBK字符编码，在ubuntu服务器以及linux上，默认使用的是utf-8全球通用编码，编码不同会导致中文文件名乱码。因此需要在fz中开启强制使用utf-8编码，才能保证文件之间的稳定传输。在iOS上，我使用的是FtpManager，同样使用sftp登录，强制使用utf-8字符编码。在Android上,我使用的是AndFTP，设置同上。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ftp</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017.11.26今天要考线代]]></title>
    <url>%2F2017-11-26%E4%BB%8A%E5%A4%A9%E8%A6%81%E8%80%83%E7%BA%BF%E4%BB%A3%2F</url>
    <content type="text"><![CDATA[昨天是星期六，心中怀揣着对线性代数的恐惧和室友泡了一天的图书馆……下午一个人出来的时候突然觉得好冷，好像每次从图书馆走出来都是这样的吧。 吃完饭回图书馆之前，溜去校外买了一杯抹茶，旁边的小女孩看着我和大人说：“他在一个人买奶茶。”瞬间觉得抹茶好苦啊。 可能每个人一生中都会有那么一段，需要一个人度过的时光，在这段时光里，我们会学会与自己相处，去了解自己，认识自己，认识这个世界。 路上看到夕阳和一棵树共同构成了一幅异常和谐的场面，兴高采烈想要分享出去，打好了字配好了图，在打算发送状态的那一刻，又退出了状态发送。就当没看到过这棵树吧。 走在路上发现，听歌时没谁可想，空空落落的，也不是件好事。 现在想想，为什么上了大学，人们开始拼命寻找恋人，拉帮结派，还不是因为大家都孤独。 我走到阳台，吸着雾霾看天。繁星漫天，远处零散的几处霓虹灯。我想着自己，突然有点想哭。又过了一会，一阵风吹来。吹来一大片云，关掉了天上的星灯。学校的路灯早已熄灭，漆黑的夜里更加漆黑。也许它认为城市应该睡觉了，但是我还醒着。 在微博上看到这张图片，刚开始觉得这真是一个热爱生活自娱自乐的狗子。但细想这不就是孤独吗，一个人扮演两个人角色。现实有很多人跟这只狗狗一样，狗狗表现在肢体，我们表演在内心。 站在汹涌的人群中，看着人家两人嬉闹打笑。我捂着嘴巴看完，生怕发出一声狗叫。窗内灯光柔软 爱意浓浓， 窗外寒风凌厉，形单影只。外面太冷了，衣服有点单薄，我想回家了。]]></content>
      <categories>
        <category>方方说</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排序算法--睡眠排序、面条排序、猴子排序 (非常严肃)]]></title>
    <url>%2F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F%E3%80%81%E9%9D%A2%E6%9D%A1%E6%8E%92%E5%BA%8F%E3%80%81%E7%8C%B4%E5%AD%90%E6%8E%92%E5%BA%8F-%E9%9D%9E%E5%B8%B8%E4%B8%A5%E8%82%83%2F</url>
    <content type="text"><![CDATA[常见的排序算法–诸如快排、堆排或归并等——都是基于比较的，除了这种正统意义上的排序算法，最近了解了几种令人啼笑皆非的排序算法，与大家分享一下。 1、睡眠排序（sleep sort）这个算法可以说算是最强大的排序算法，他的时间复杂度为O(n)，空间复杂度为0 ！时间复杂度完爆了quick sort，空间复杂度完爆了hash，而且还是稳定的。c代码实现如下：原理主要是利用多线程，把接受的每一个参数分别放在不同的线程里面并在每个线程同时使用sleep函数，sleep的时间就是参数的值，这样的话利用“数值大的参数的线程sleep的时间更长”这个事实，数字小的值就被先打印出来了，从而达到从小到大排序的目的。简单来说就是对于[1,3,6,10]这个数组，让计算机在第1s输出1，在第3s输出3，第6s输出6，第10s输出10。不过这个方法有个致命的缺点，就是如果被排序的数字很大的话，花的时间也比较多。以提供的代码为例，如果参数是3, 1, 10000的话，那么输出结果在第一秒会输出1，第三秒会输出3，但是要在10000秒时才能输出10000。为了提高速度可以按比例缩短时间，比如把sleep那句改成sleep(this/10000)，但是也不能无限制缩小时间，当睡眠时间小于开启多线程的时间时，就会出现乱序。当然上面这段代码很粗略，有很多问题还没解决。比如： 搞不定负数。（可以用一个恒正的函数将输入映射成时间） 输入相近的数会有误差。（可以乘个适当的系数，放大数据间的差） 当输入的数据很多时，这些线程不能看作是同时启动的等等。 2、面条排序（Spaghetti Sort）意大利面条排序(Spaghetti Sort)的思路是，将输入分别对应到不同长度的面条上，每根面条的长度即为对应的数字的大小。比如，对于[1, 4, 2, 8, 9]这个输入，则分别做出长度为1cm、4cm、2cm、8cm、9cm的面条。然后，将这些面条的一头对齐，用手抓住，另一头向下。然后慢慢地将手向下垂直下降，第一个触碰到桌面的面条对应的数字则为最大的数字，第二个触碰到的就是第二大的，依次类推，代码没找到…看起来挺简单的，和睡眠排序差别不大，就不写了…. 3、猴子排序（Bogo Sort）如下关于猴子排序(Bogo Sort)的描述摘自维基百科： 在计算机科学中，Bogo排序（Bogo-Sort）是个既不实用又原始的排序算法，其原理等同将一堆卡片抛起，落在桌上后检查卡片是否已整齐排列好，若非就再抛一次。其名字源自Quantum bogodynamics，又称bozo sort、blort sort或猴子排序（参见无限猴子定理）。 所谓无限猴子定理，即是：让一只猴子在打字机上随机地按键，当按键时间达到无穷时，几乎必然能够打出任何给定的文字，比如莎士比亚的全套著作。 猴子排序也是一样，原理就是随机打乱数组，检查是否排好序，若是，则输出，否则再次打乱，再检查……最佳情况的复杂度为O(n)，平均O(n*n!)，最坏可执行到世界末日。c++代码如下：12345678910111213141516171819202122232425262728#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;algorithm&gt;//random需要的头文件using namespace std;const int maxn = 103;int n, a[maxn];bool Ordered() &#123; for (int i = 0; i + 1 &lt; n; ++ i) &#123; if (a[i] &gt; a[i + 1]) &#123; return false; &#125; &#125; return true;&#125;int main() &#123; cin &gt;&gt; n; for (int i = 0; i &lt; n; ++ i) &#123; cin &gt;&gt; a[i]; &#125; while (!Ordered()) &#123; random_shuffle(a, a + n); &#125; for (int i = 0; i &lt; n; ++ i) &#123; cout &lt;&lt; a[i] &lt;&lt; ' '; &#125; cout &lt;&lt; endl;&#125; 所以，这种排序算法，基本大家就在吹牛的时候说说就好了，写在代码里，基本上就是分分钟被打死的后果。 3.1、量子猴排(Quantum Bogo Sort)量子猴排可以算是概念上对猴子排序的一种优化：洗牌的时候，使用量子化随机排列。这样的话，我们在观测这组数之前，这组数的状态是叠加的，参照薛定谔的猫。通过这种量子化随机排列，我们划分出来了个平行宇宙。接下来，在某个宇宙A中，观测一下这组数，发现运气不好，没有排序好，那么我们就销毁掉这个宇宙。然后再看看其他宇宙的运气怎么样。终于，在一个宇宙Z中，发现刚好是排好序的数组。那么我们就保留这个宇宙。最后，没有被销毁的宇宙中，数组都是恰好一次被排好序的。对了，量子猴排的时间复杂度是O(n)！]]></content>
      <categories>
        <category>tools</category>
        <category>code</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
        <tag>睡眠排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在服务器端使用一键安装ss脚本及线路优化]]></title>
    <url>%2F%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85ss%E8%84%9A%E6%9C%AC%E5%8F%8A%E7%BA%BF%E8%B7%AF%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[下载：常规版Windows客户端 ShadowsocksR版Windows客户端 安装：为了能有一个稳定的上网环境，以及某件事情的影响，萌生了想自己搭梯子的想法。最近的一个月一直在恶补这方面的知识，并自己动手实践，对shadowsocks的使用才初步入门，知道了在服务器端安装ss客户端的方法，总结下来，最为简单易用的是秋水逸冰的一键安装脚本本脚本适用于CentOS 6，7，Debian，Ubuntu系统，ss客户端对硬件资源的要求并不高，因此在选择服务器时如果没有其他需求的话，只用考虑网络带宽以及流量问题，这里需要注意的是，搭建的服务器相当于是本地访问和网站之间的桥梁，网站的数据包会先下载到服务器上，然后由服务器上传到本地客户端中，因此，服务器端使用的流量是本地流量的2倍，就好比你在购买服务器时，网站提示一个月有1000g的流量限制，当你在youtube上看500g的视频后，你的服务器端1000g流量其实已经用完了。服务器的购买并没有固定的推荐，每个地区的网络不同，运营商不同都会导致网速的差异，因此选择一个好的服务器很重要。我所在的西安电信使用digitalocean上提供的sfo的ubuntu服务器实测下载峰值可以达到2m/s，其他地区未知。购买及连接方法日后再谈，今天主要想记录下服务器的配置及优化。本文使用的是秋水逸冰的一键安装脚本，当在本地使用ssh命令（linux及mac os）或者xshell5（windows）连接上服务器的root用户后，依次运行以下3条命令。123wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.shchmod +x shadowsocks-all.sh./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log 之后脚本便自动执行，首先选择安装shadowsocks的版本，默认的1是常规，还有一个shadowsocksR版可供选择。然后脚本会提示进行shadowsocks的基本参数设置第一次是设置密码（如不设定，默认为 teddysun.com）然后是服务器端口（如不设定，默认为 8989）最后是选择加密方式（如不设定，默认为 aes-256-gcm）加密方式我一般选择为第7个 aes-256-cfb（因为其支持的客户端相对较多一点）安装完成后，脚本会提示： 12345678Congratulations, Shadowsocks-python server install completed!Your Server IP :your_server_ipYour Server Port :your_server_portYour Password :your_passwordYour Encryption Method:your_encryption_methodWelcome to visit:https://teddysun.com/342.htmlEnjoy it! 这时可以记下ip 远程端口 和密码在shadowsocks客户端上使用了。为了充分发挥服务器的网络性能，就需要对服务器的网络进行优化，最近Google 开源了其TCP BBR拥塞控制算法，并提交到了Linux内核。从4.9开始，Linux 内核已经用上了该算法。经过上机测试，有些机器的网速甚至可以提升好几个数量级。本次更新内核及开启bbr算法依旧使用的是秋水逸冰的脚本。在服务器root用户下，使用命令： --no-check-certificate&& chmod +x bbr.sh && ./bbr.sh```1234安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：```uname -r 查看内核版本，如果显示在4.13及以上说明ok了。这时服务器端的ss已经配置优化完成，脚本默认开启了ss的开机启动，因此服务器重启也不会有影响。 卸载：在root用户下，使用命令uninstall```12345## 使用命令：启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。Shadowsocks-Python 版：```/etc/init.d/shadowsocks-python start | stop | restart | status ShadowsocksR 版：start | stop | restart | status```123Shadowsocks-Go 版：```/etc/init.d/shadowsocks-go start | stop | restart | status Shadowsocks-libev 版：start | stop | restart | status```1234各版本默认配置文件位置Shadowsocks-Python 版：```/etc/shadowsocks-python/config.json ShadowsocksR 版：123Shadowsocks-Go 版：```/etc/shadowsocks-go/config.json Shadowsocks-libev 版：1234多用户多端口配置方法在root用户下，使用命令```vi /etc/shadowsocks.json e.g:1234567891011121314&quot;server&quot;:&quot;0.0.0.0&quot;,&quot;local_address&quot;:&quot;127.0.0.1&quot;,&quot;local_port&quot;:1080,&quot;port_password&quot;:&#123;&quot;8989&quot;:&quot;password0&quot;,&quot;9001&quot;:&quot;password1&quot;,&quot;9002&quot;:&quot;password2&quot;,&quot;9003&quot;:&quot;password3&quot;,&quot;9004&quot;:&quot;password4&quot;&#125;,&quot;timeout&quot;:300,&quot;method&quot;:&quot;your_encryption_method&quot;,&quot;fast_open&quot;: false&#125; 参考链接https://teddysun.com/342.htmlhttps://teddysun.com/489.html]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
        <tag>Google BBR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网址查询]]></title>
    <url>%2F%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[校园卡转账（校园网）西农校园网自助服务系统（校园网）英语视听说网址（校园网）万有仓库代码托管平台麦田pt的ipv6网址（需要ipv6网）豆瓣电影 Top 250onedrive客户端（Windows7及以下）Visual Studio Code下载]]></content>
      <categories>
        <category>方方说</category>
      </categories>
      <tags>
        <tag>学校</tag>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
