<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hello, Hexo]]></title>
    <url>%2F2019%2F01%2F22%2Fhello-Hexo%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[在ubuntu16.04的vps上安装搭建ftp]]></title>
    <url>%2F2017%2F12%2F02%2F%E5%9C%A8ubuntu16-04%E7%9A%84vps%E4%B8%8A%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAftp%2F</url>
    <content type="text"><![CDATA[由于身边设备包含种类过多，有Windows、Ubuntu、Android、iOS，有时候想要在四台设备间同步ppt，pdf，或者在Windows和Ubuntu上切换编译环境时用u盘拷贝文件步骤过于繁琐，且现有的一台服务器还没能充分利用资源，便萌生了在vps上再搭建一个ftp服务器的想法。我对于ftp服务器的要求就是：有一定安全性，禁止匿名访问，尽量走加密通道传输，使用账户密码登录然而百度上的教程经过我的测试大都不靠谱，于是自己Google摸索了一晚，找到了适合自己的搭建ftp的方法，在此分享并作为自己的备份。 1、安装vsftpd软件流行的FTP服务器端软件有：PureFTP，vsftpd,ProFTPD。考虑到租的服务器性能不高，我采用了轻量并且坑少的vsftpd。命令如下：sudo apt updatesudo apt install vsftpd安装完成后，需要对其进行一定的设置来使用。vilink123456789101112取消下列行首的#注释```write_enable=YES```（允许用户在ftp中的写入操作）```local_umask=022```（为用户增加相应的读写权限）```chroot_local_user=yes```（阻止访问除了用户文件夹意外的文件夹）在文件的末尾添加下列语句来开启消极模式：&lt;code&gt;allow_writeable_chroot=YESpasv_enable-YESpasv_min_port=40000pasv_max_port=40100&lt;/code&gt;之后保存退出编辑，重启vsftpd服务```service vsftpd restart 这时，ftp服务器就可以使用了，但是在21端口使用ftp登录是非常危险的，即使使用了账户密码，但传输文件很容易会被劫持，因此我在Google之后选择使用更为安全的sftp。 2、安装配置sftpsftp使用的是ssh文件传输协议，需要安装openssh-server,一般的vps服务器都预先安装过。安装过就可以跳过这一步。安装命令如下：apt install openssh-server```123安装完成之后我们需要为ftp新建一个用户。为了以后可能会添加用户，这里就创建一个ftpaccess用户组。```sudo groupadd ftpaccess 然后需要在/etc/ssh/sshd_config中修改一些参数。vilink123456789101112找到 **PasswordAuthentication**参数，若其=no，则将其注释掉，若为yes，就不用管。找到 **Subsystem sftp /usr/lib/openssh/sftp-server**将其注释掉。在文件最后添加下列语句：&lt;code&gt;Subsystem sftp internal-sftpMatch group ftpaccessChrootDirectory %hX11Forwarding noAllowTcpForwarding noForceCommand internal-sftp&lt;/code&gt;之后重启ssh服务```service ssh restart 下面开始创建访问sftp服务的用户创建用户xiaofangdyd,属于ftpaccess组sudo useradd -m xiaofangdyd -g ftpaccess -s /usr/bin/nologin(其中使用/usr/bin/nologin脚本来阻止ftp用户访问bash脚本，增加安全性)sudo passwd xiaofangdyd(设置密码)sudo chown root /home/xiaofangdyd(为相应文件夹赋予root权限) 开启nologin脚本的开机访问sudo vi /etc/shells 在最后添加如下行：/usr/bin/nologin 最后在home文件夹创建一个用于下入文件的文件夹，并修改文件夹的所有者mkdir /home/xiaofangdyd/filessudo chown xiaofangdyd:ftpaccess /home/xiaofangdyd/files 现在就可以通过sftp来向files文件夹上传并下载文件了。 在Windows和Linux操作端，推荐使用filezilla客户端版（filezilla Client）对ftp服务器进行访问。因为首先fz提供了对sftp登录的支持，最重要的是，由于简体中文版的Windows系统因为国家规定使用的是GBK字符编码，在ubuntu服务器以及linux上，默认使用的是utf-8全球通用编码，编码不同会导致中文文件名乱码。因此需要在fz中开启强制使用utf-8编码，才能保证文件之间的稳定传输。在iOS上，我使用的是FtpManager，同样使用sftp登录，强制使用utf-8字符编码。在Android上,我使用的是AndFTP，设置同上。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ftp</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017.11.26今天要考线代]]></title>
    <url>%2F2017%2F11%2F26%2F2017-11-26%E4%BB%8A%E5%A4%A9%E8%A6%81%E8%80%83%E7%BA%BF%E4%BB%A3%2F</url>
    <content type="text"><![CDATA[昨天是星期六，心中怀揣着对线性代数的恐惧和室友泡了一天的图书馆……下午一个人出来的时候突然觉得好冷，好像每次从图书馆走出来都是这样的吧。 吃完饭回图书馆之前，溜去校外买了一杯抹茶，旁边的小女孩看着我和大人说：“他在一个人买奶茶。”瞬间觉得抹茶好苦啊。 可能每个人一生中都会有那么一段，需要一个人度过的时光，在这段时光里，我们会学会与自己相处，去了解自己，认识自己，认识这个世界。 路上看到夕阳和一棵树共同构成了一幅异常和谐的场面，兴高采烈想要分享出去，打好了字配好了图，在打算发送状态的那一刻，又退出了状态发送。就当没看到过这棵树吧。 走在路上发现，听歌时没谁可想，空空落落的，也不是件好事。 现在想想，为什么上了大学，人们开始拼命寻找恋人，拉帮结派，还不是因为大家都孤独。 我走到阳台，吸着雾霾看天。繁星漫天，远处零散的几处霓虹灯。我想着自己，突然有点想哭。又过了一会，一阵风吹来。吹来一大片云，关掉了天上的星灯。学校的路灯早已熄灭，漆黑的夜里更加漆黑。也许它认为城市应该睡觉了，但是我还醒着。 在微博上看到这张图片，刚开始觉得这真是一个热爱生活自娱自乐的狗子。但细想这不就是孤独吗，一个人扮演两个人角色。现实有很多人跟这只狗狗一样，狗狗表现在肢体，我们表演在内心。 站在汹涌的人群中，看着人家两人嬉闹打笑。我捂着嘴巴看完，生怕发出一声狗叫。窗内灯光柔软 爱意浓浓， 窗外寒风凌厉，形单影只。外面太冷了，衣服有点单薄，我想回家了。]]></content>
      <categories>
        <category>方方说</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排序算法--睡眠排序、面条排序、猴子排序 (非常严肃)]]></title>
    <url>%2F2017%2F11%2F24%2F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F%E3%80%81%E9%9D%A2%E6%9D%A1%E6%8E%92%E5%BA%8F%E3%80%81%E7%8C%B4%E5%AD%90%E6%8E%92%E5%BA%8F-%E9%9D%9E%E5%B8%B8%E4%B8%A5%E8%82%83%2F</url>
    <content type="text"><![CDATA[常见的排序算法–诸如快排、堆排或归并等——都是基于比较的，除了这种正统意义上的排序算法，最近了解了几种令人啼笑皆非的排序算法，与大家分享一下。 1、睡眠排序（sleep sort）这个算法可以说算是最强大的排序算法，他的时间复杂度为O(n)，空间复杂度为0 ！时间复杂度完爆了quick sort，空间复杂度完爆了hash，而且还是稳定的。c代码实现如下：原理主要是利用多线程，把接受的每一个参数分别放在不同的线程里面并在每个线程同时使用sleep函数，sleep的时间就是参数的值，这样的话利用“数值大的参数的线程sleep的时间更长”这个事实，数字小的值就被先打印出来了，从而达到从小到大排序的目的。简单来说就是对于[1,3,6,10]这个数组，让计算机在第1s输出1，在第3s输出3，第6s输出6，第10s输出10。不过这个方法有个致命的缺点，就是如果被排序的数字很大的话，花的时间也比较多。以提供的代码为例，如果参数是3, 1, 10000的话，那么输出结果在第一秒会输出1，第三秒会输出3，但是要在10000秒时才能输出10000。为了提高速度可以按比例缩短时间，比如把sleep那句改成sleep(this/10000)，但是也不能无限制缩小时间，当睡眠时间小于开启多线程的时间时，就会出现乱序。当然上面这段代码很粗略，有很多问题还没解决。比如： 搞不定负数。（可以用一个恒正的函数将输入映射成时间） 输入相近的数会有误差。（可以乘个适当的系数，放大数据间的差） 当输入的数据很多时，这些线程不能看作是同时启动的等等。 2、面条排序（Spaghetti Sort）意大利面条排序(Spaghetti Sort)的思路是，将输入分别对应到不同长度的面条上，每根面条的长度即为对应的数字的大小。比如，对于[1, 4, 2, 8, 9]这个输入，则分别做出长度为1cm、4cm、2cm、8cm、9cm的面条。然后，将这些面条的一头对齐，用手抓住，另一头向下。然后慢慢地将手向下垂直下降，第一个触碰到桌面的面条对应的数字则为最大的数字，第二个触碰到的就是第二大的，依次类推，代码没找到…看起来挺简单的，和睡眠排序差别不大，就不写了…. 3、猴子排序（Bogo Sort）如下关于猴子排序(Bogo Sort)的描述摘自维基百科： 在计算机科学中，Bogo排序（Bogo-Sort）是个既不实用又原始的排序算法，其原理等同将一堆卡片抛起，落在桌上后检查卡片是否已整齐排列好，若非就再抛一次。其名字源自Quantum bogodynamics，又称bozo sort、blort sort或猴子排序（参见无限猴子定理）。 所谓无限猴子定理，即是：让一只猴子在打字机上随机地按键，当按键时间达到无穷时，几乎必然能够打出任何给定的文字，比如莎士比亚的全套著作。 猴子排序也是一样，原理就是随机打乱数组，检查是否排好序，若是，则输出，否则再次打乱，再检查……最佳情况的复杂度为O(n)，平均O(n*n!)，最坏可执行到世界末日。c++代码如下：12345678910111213141516171819202122232425262728#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;algorithm&gt;//random需要的头文件using namespace std;const int maxn = 103;int n, a[maxn];bool Ordered() &#123; for (int i = 0; i + 1 &lt; n; ++ i) &#123; if (a[i] &gt; a[i + 1]) &#123; return false; &#125; &#125; return true;&#125;int main() &#123; cin &gt;&gt; n; for (int i = 0; i &lt; n; ++ i) &#123; cin &gt;&gt; a[i]; &#125; while (!Ordered()) &#123; random_shuffle(a, a + n); &#125; for (int i = 0; i &lt; n; ++ i) &#123; cout &lt;&lt; a[i] &lt;&lt; ' '; &#125; cout &lt;&lt; endl;&#125; 所以，这种排序算法，基本大家就在吹牛的时候说说就好了，写在代码里，基本上就是分分钟被打死的后果。 3.1、量子猴排(Quantum Bogo Sort)量子猴排可以算是概念上对猴子排序的一种优化：洗牌的时候，使用量子化随机排列。这样的话，我们在观测这组数之前，这组数的状态是叠加的，参照薛定谔的猫。通过这种量子化随机排列，我们划分出来了个平行宇宙。接下来，在某个宇宙A中，观测一下这组数，发现运气不好，没有排序好，那么我们就销毁掉这个宇宙。然后再看看其他宇宙的运气怎么样。终于，在一个宇宙Z中，发现刚好是排好序的数组。那么我们就保留这个宇宙。最后，没有被销毁的宇宙中，数组都是恰好一次被排好序的。对了，量子猴排的时间复杂度是O(n)！]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
        <tag>睡眠排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在服务器端使用一键安装ss脚本及线路优化]]></title>
    <url>%2F2017%2F11%2F21%2F%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85ss%E8%84%9A%E6%9C%AC%E5%8F%8A%E7%BA%BF%E8%B7%AF%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[下载：常规版Windows客户端 ShadowsocksR版Windows客户端 安装：为了能有一个稳定的上网环境，以及某件事情的影响，萌生了想自己搭梯子的想法。最近的一个月一直在恶补这方面的知识，并自己动手实践，对shadowsocks的使用才初步入门，知道了在服务器端安装ss客户端的方法，总结下来，最为简单易用的是秋水逸冰的一键安装脚本本脚本适用于CentOS 6，7，Debian，Ubuntu系统，ss客户端对硬件资源的要求并不高，因此在选择服务器时如果没有其他需求的话，只用考虑网络带宽以及流量问题，这里需要注意的是，搭建的服务器相当于是本地访问和网站之间的桥梁，网站的数据包会先下载到服务器上，然后由服务器上传到本地客户端中，因此，服务器端使用的流量是本地流量的2倍，就好比你在购买服务器时，网站提示一个月有1000g的流量限制，当你在youtube上看500g的视频后，你的服务器端1000g流量其实已经用完了。服务器的购买并没有固定的推荐，每个地区的网络不同，运营商不同都会导致网速的差异，因此选择一个好的服务器很重要。我所在的西安电信使用digitalocean上提供的sfo的ubuntu服务器实测下载峰值可以达到2m/s，其他地区未知。购买及连接方法日后再谈，今天主要想记录下服务器的配置及优化。本文使用的是秋水逸冰的一键安装脚本，当在本地使用ssh命令（linux及mac os）或者xshell5（windows）连接上服务器的root用户后，依次运行以下3条命令。123wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.shchmod +x shadowsocks-all.sh./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log 之后脚本便自动执行，首先选择安装shadowsocks的版本，默认的1是常规，还有一个shadowsocksR版可供选择。然后脚本会提示进行shadowsocks的基本参数设置第一次是设置密码（如不设定，默认为 teddysun.com）然后是服务器端口（如不设定，默认为 8989）最后是选择加密方式（如不设定，默认为 aes-256-gcm）加密方式我一般选择为第7个 aes-256-cfb（因为其支持的客户端相对较多一点）安装完成后，脚本会提示： 12345678Congratulations, Shadowsocks-python server install completed!Your Server IP :your_server_ipYour Server Port :your_server_portYour Password :your_passwordYour Encryption Method:your_encryption_methodWelcome to visit:https://teddysun.com/342.htmlEnjoy it! 这时可以记下ip 远程端口 和密码在shadowsocks客户端上使用了。为了充分发挥服务器的网络性能，就需要对服务器的网络进行优化，最近Google 开源了其TCP BBR拥塞控制算法，并提交到了Linux内核。从4.9开始，Linux 内核已经用上了该算法。经过上机测试，有些机器的网速甚至可以提升好几个数量级。本次更新内核及开启bbr算法依旧使用的是秋水逸冰的脚本。在服务器root用户下，使用命令： --no-check-certificate&& chmod +x bbr.sh && ./bbr.sh```1234安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：```uname -r 查看内核版本，如果显示在4.13及以上说明ok了。这时服务器端的ss已经配置优化完成，脚本默认开启了ss的开机启动，因此服务器重启也不会有影响。 卸载：在root用户下，使用命令uninstall```12345## 使用命令：启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。Shadowsocks-Python 版：```/etc/init.d/shadowsocks-python start | stop | restart | status ShadowsocksR 版：start | stop | restart | status```123Shadowsocks-Go 版：```/etc/init.d/shadowsocks-go start | stop | restart | status Shadowsocks-libev 版：start | stop | restart | status```1234各版本默认配置文件位置Shadowsocks-Python 版：```/etc/shadowsocks-python/config.json ShadowsocksR 版：123Shadowsocks-Go 版：```/etc/shadowsocks-go/config.json Shadowsocks-libev 版：1234多用户多端口配置方法在root用户下，使用命令```vi /etc/shadowsocks.json e.g:1234567891011121314&quot;server&quot;:&quot;0.0.0.0&quot;,&quot;local_address&quot;:&quot;127.0.0.1&quot;,&quot;local_port&quot;:1080,&quot;port_password&quot;:&#123;&quot;8989&quot;:&quot;password0&quot;,&quot;9001&quot;:&quot;password1&quot;,&quot;9002&quot;:&quot;password2&quot;,&quot;9003&quot;:&quot;password3&quot;,&quot;9004&quot;:&quot;password4&quot;&#125;,&quot;timeout&quot;:300,&quot;method&quot;:&quot;your_encryption_method&quot;,&quot;fast_open&quot;: false&#125; 参考链接https://teddysun.com/342.htmlhttps://teddysun.com/489.html]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
        <tag>Google BBR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网址查询]]></title>
    <url>%2F2017%2F11%2F21%2F%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[校园卡转账（校园网）西农校园网自助服务系统（校园网）英语视听说网址（校园网）万有仓库代码托管平台麦田pt的ipv6网址（需要ipv6网）豆瓣电影 Top 250onedrive客户端（Windows7及以下）Visual Studio Code下载]]></content>
      <categories>
        <category>方方说</category>
      </categories>
      <tags>
        <tag>学校</tag>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
