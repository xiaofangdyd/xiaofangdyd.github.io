<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hello, Hexo</title>
      <link href="/hello-Hexo/"/>
      <url>/hello-Hexo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>长安客</title>
      <link href="/%E9%95%BF%E5%AE%89%E5%AE%A2/"/>
      <url>/%E9%95%BF%E5%AE%89%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/1.png" alt=""></p><blockquote><p>有多少人和我一样，坐在不足十平米的空间里，看着书里九万五千公里的绚丽。又或是和我一样，拥有一颗比九万五千公里还辽阔的心，却坐在不足一平米的椅子上。——《不去会死》</p></blockquote><a id="more"></a><p>第一次听说长安，是小学在哥哥家看《童话世界》，他们的编辑部就在西安。想着有机会要去亲自拜访，把没有买到的期刊补全，却一直没去。</p><p>后来机缘巧合之下跟着旅行社来到了西安，在兵马俑、华清池、大雁塔兜兜转转，也没有去成《童话世界》的编辑部。待到大些时候，再来西安，却过了那个童话的年纪。</p><p>考到陕西上大学后，每次来西安都有着各种稀奇古怪的事情要办，我好像提前进入了上班族的行列，带着耳机和漠不关己的眼神，匆匆的走在这里，好像要和汽车赛跑，以此来感受城市的快节奏生活。临走前还不忘抱怨：</p><p>“呸，这里真tm冷漠。”</p><p>但这次的西安两日之旅，让我对这座城市的印象大为改观。</p><p>这是一个需要你亲自来体验才懂的城市，这是一座你来了便不会忘了的历史之都。</p><h2 id="小公交"><a href="#小公交" class="headerlink" title="小公交"></a>小公交</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/2.jpg" alt=""></p><p>有人说，到一个地方旅游，重要的不是风景，而是当地的人。景由心生，但人由景生。一方水土养一方人。陕西人的直爽我已经领教了两年，这次来到西安，却发现了西安人独有的好客和热心，在这里，司机不是抢时间而是让着行人的，公交车是不需要喊师傅停车而是每站必停的。可能因为这次是抱着旅游的心态吧，人也由心生。</p><p>但最让我印象深刻的是照片里的这种小公交车，一个只有9个座位的小公交。在引擎的轰鸣下晃晃悠悠的走着，有着和大公交不一样的悠闲和自由。</p><h2 id="大唐芙蓉园"><a href="#大唐芙蓉园" class="headerlink" title="大唐芙蓉园"></a>大唐芙蓉园</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/3.png" alt=""></p><p>著名的景点周围总是不缺乏排队的人群，即使今天是清明。</p><p>小时候也从未见过有哪一个景点的排队人数有如今之多，即使是以前的长城和天安门。可能人们的生活水平真的提高了不少吧。另外，手机在排队中的作用也至关重要。</p><p>小时候人们排队时无外乎聊天和发呆，时间过的很慢，人的耐心总是有限度的，队伍也就长不起来。现在排队的时候大部分人都在低头看手机，一来能排遣无聊的等待时间，二来手机确实很好玩。</p><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/4.png" alt=""></p><p>在芙蓉园中，经常能看到很多现代和古代融合的奇景。钢铁之躯的脚踏船外是木船的装饰、钢筋混凝土的亭台外是仿朱砂的漆、古色古香的阁楼外挂着恢宏的牌匾和同样经历风吹雨打的空调外机。</p><p>人们来到这里，想梦回大唐，却离不开现代科技的便利。匆匆走过各个景点，用自拍杆记录下今昔俊俏的容颜，再配上几句伤感的诗词，我们成功的在各大社交平台梦回“长安”。</p><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/5.png" alt=""></p><p>现在在展出的文物面前停留最多的，不是眼睛，而是镜头和闪光灯。</p><p>科技的进步让我们可以长久保存事物的影像。在景区，博物馆，动物园，人们举着相机，手机疯狂拍摄。有一些人是真的在寻找景物特定的美，而绝大多数人，来到一处，闪光灯一阵乱闪，便匆匆走向下一处，这些照片可能他再也不会看，只有在手机提示内存不足时，“选择”-“删除”-“确定”。</p><p>小时候，老一辈人在聊到一个地方时，他们会说：“这里的XX挺棒的，有XX，XXX……特别好看!”</p><p>当我们聊到一个地方的时候，我们总会兴奋的说：“这里我来过！”接着便掏出手机，迫不及待展示自己行云流水的拍摄成果。</p><p>相比这样，我更热衷于仔细欣赏我喜欢的作品，然后任它们在记忆中被渐渐遗忘。当再次提起时，能留有一份欣赏时的韵味。</p><blockquote><p>说有一位画家，在沙滩上用棍子画了一副惊世之作，接着便欣赏它在涨潮时慢慢消失。<br>《月亮与六便士》中的主人公最后命令也家人烧掉了自己画有传奇作品的屋子。</p></blockquote><p>可以说，艺术的美，就在与它被人们遗忘时的心痛感。</p><p>艺术真残酷。</p><h2 id="曲江书城"><a href="#曲江书城" class="headerlink" title="曲江书城"></a>曲江书城</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/6.png" alt=""></p><p>上一次正儿八经去图书馆看书已经是初中时候了吧，高中无暇看书，偷偷看本读者，心里都美滋滋，哪有功夫看书。</p><p>在大学里，生活上的事情处理的一团遭，忙的焦头烂额，游戏又那么好玩。</p><p>一进门，我的身心都渐渐安静下来，在一排排书中行走，看着琳琅满目的书名，<del>颇有种古代黄帝翻牌子的快感。</del>一时不知道从何下手。</p><p>在电子书大行其道的当日，我们却很少去重复读一本书。匆匆看完后，“唉”一声，又打开了下一本。然而书对于我们这种记忆力正常的人类来说，是需要反复读的，反复读的好处，这里就不过多赘述，自己百度吧。</p><h2 id="永兴坊"><a href="#永兴坊" class="headerlink" title="永兴坊"></a>永兴坊</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/7.png" alt=""></p><p>西安的夜市就属回民街最热闹，然而西安的同学告诉我，那都是你们外地人去的，我们才不去。然后我就来到了本地人去的小吃街。</p><p>可能人们都学聪明了吧，这里的人比起回民街竟然过而不及。在摩肩接踵的人流中，我的腰包竟然也迅速变瘪。我这才发现，明明食物没有多美味，在拥挤的环境中，我不知不觉买了快￥100的小吃，放在外面可能不到￥40，颇有回民街的风采。</p><p>那为什么还有这么多人来？可能是为了图个热闹。</p><p>在人云亦云的环境里，我们要做出自己的判断，真的比想像中还要难。</p><h2 id="长安客和胡辣汤"><a href="#长安客和胡辣汤" class="headerlink" title="长安客和胡辣汤"></a>长安客和胡辣汤</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/8.png" alt=""></p><p>走之前看的几个酒店在中午的时候都被订完了，我们阴差阳错的选择了这个离景点数公里的酒店，条件很棒也不算贵。名字很值得品味，总觉得比什么凯旋酒店之流好上太多，可能是没钱也要鄙视一下的心理在作祟。</p><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/9.png" alt=""></p><p>踏破铁鞋无觅处，柳暗花明又一村。</p><p>早上办理完退房手续，刚出酒店门，就看到了一家正宗的河南胡辣汤店。感动。</p><p>在陕西的两年，我和其他河南人一样，忘不了那一碗胡辣汤。然而这里最多的却是一种叫做：<strong>肉丸胡辣汤</strong>的怪异种。为了那种味道，我找了两年，失望了一次又一次，却在不经意的一次回头，闻到了熟悉又陌生的香味。</p><p>在我每次特别想要一个东西时，好像我在和全世界作对。但世界却时不时把这些东西看似随意的丢给我，好像是我完成某些指定动作的奖励。</p><h2 id="剁椒鱼头"><a href="#剁椒鱼头" class="headerlink" title="剁椒鱼头"></a>剁椒鱼头</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/10.png" alt=""></p><p>在这的最后一顿饭，是西安的同学请客，选的是一家湘菜馆。一道剁椒鱼头吃的我欲罢不能。</p><p>辣椒其实并不是我国的本土作物，据说是在唐宋时期，洋人作为观赏植物朝贡而来。伟大的天朝人民却发现了这种不同寻常的味道可以用来入菜。</p><p>其实辣是一种痛觉。在我看来，流着眼泪也要吃辣是十分伤心时才会做的事，这样就可以让人看不到自己其实是哭出的泪，不然何必要让自己疼呢。就好像杀手就算在白天杀人还要穿黑衣，也是为了不让对方看出自己的伤口。</p><p>其实人们吃辣上瘾是有原因的。人们在受到刺激的时候，会分泌一些物质来自我麻痹进而达到保护自身的目的。这些物质会让人产生一种飘飘欲仙的快感。吃辣刺激了身体进行自我麻痹，从而产生快感。</p><p>不管你是谁，受到刺激的时候身体的第一反应就是逃避。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>旅行让我们明白，原来我们的生活如此可以轻而易举的改变，数天的旅程，来到一个陌生的地方，没人知道你叫什么，好像什么都可以重新开始，陌生给予我们不安而又奇特的安全感。站在人潮涌动的街头，擦肩而过，给予彼此空洞的一瞥，有时却有些莫名的感动。</p>]]></content>
      
      
      <categories>
          
          <category> 方方说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式（Abstract Factory）</title>
      <link href="/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88Abstract-Factory%EF%BC%89/"/>
      <url>/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88Abstract-Factory%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>在上文中介绍的工厂方法模式（Factory Method）中，有一些问题尚未解决。</p><ul><li>每次增加一个产品时，都需要增加一个具体类和对象实现工厂。</li></ul><p>而在现实生活中，一个工厂往往要生产很多种类的产品，为了解决上述的问题，我们又使用了一种新的设计模式——<strong>抽象工厂模式（Abstract Factory）</strong>。<br><a id="more"></a></p><blockquote><p>在阅读下文前强烈建议先阅读：<br>设计模式简介<br>简单工厂模式（Simple-Factory）<br>工厂方法模式（Factory Method）</p></blockquote><h2 id="二、-介绍"><a href="#二、-介绍" class="headerlink" title="二、 介绍"></a>二、 介绍</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>抽象工厂（Abstract Factory）模式为创建一组相关或相互依赖的对象提供一个接口，而不需要指出用于创建对象的具体类。</p><h3 id="2-解决的问题"><a href="#2-解决的问题" class="headerlink" title="2. 解决的问题"></a>2. 解决的问题</h3><p>每次增加一个产品时，都需要增加一个具体类和对象实现工厂。（即工厂方法模式的缺点）</p><h3 id="3-和工厂方法模式的对比"><a href="#3-和工厂方法模式的对比" class="headerlink" title="3. 和工厂方法模式的对比"></a>3. 和工厂方法模式的对比</h3><h4 id="1-不同点"><a href="#1-不同点" class="headerlink" title="(1) 不同点"></a>(1) 不同点</h4><table><thead><tr><th style="text-align:left">工厂方法模式</th><th style="text-align:left">抽象工厂模式</th></tr></thead><tbody><tr><td style="text-align:left">针对的是一个产品等级结构</td><td style="text-align:left">针对的是面向多个产品等级结构</td></tr><tr><td style="text-align:left">一个抽象产品类</td><td style="text-align:left">多个抽象产品类</td></tr><tr><td style="text-align:left">可以派生出多个具体产品类</td><td style="text-align:left">每个抽象产品类可以派生出多个具体产品类</td></tr><tr><td style="text-align:left">每个具体工厂类只能创建一个具体产品类的实例</td><td style="text-align:left">每个具体工厂类可以创建多个具体产品类的实例</td></tr></tbody></table><p><strong>最主要的区别：</strong>抽象工厂中每个工厂可以创建多种类的产品；而工厂方法每个工厂只能创建一个种类。</p><h4 id="2-相同点"><a href="#2-相同点" class="headerlink" title="(2) 相同点"></a>(2) 相同点</h4><ol><li>一个抽象工厂类，可以派生出多个具体工厂类</li></ol><h2 id="三、-模式原理"><a href="#三、-模式原理" class="headerlink" title="三、 模式原理"></a>三、 模式原理</h2><h3 id="1-UML类图"><a href="#1-UML类图" class="headerlink" title="1. UML类图"></a>1. UML类图</h3><p><img src="https://cdn.xiaofangdyd.cn/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt="抽象工厂UML类图.png"></p><h3 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h3><ol><li>创建<strong>抽象工厂类</strong>，定义具体工厂的公共接口；</li><li>创建<strong>抽象产品族类</strong> ，定义抽象产品的公共接口；</li><li>创建<strong>抽象产品类</strong> （继承抽象产品族类），定义具体产品的公共接口；</li><li>创建<strong>具体产品类</strong>（继承抽象产品类） ，定义生产的具体产品；</li><li>创建<strong>具体工厂类</strong>（继承抽象工厂类），定义创建对应具体产品实例的方法；</li><li>客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例。<h2 id="四、-实例-amp-代码"><a href="#四、-实例-amp-代码" class="headerlink" title="四、 实例&amp;代码"></a>四、 实例&amp;代码</h2><h3 id="1-基本情况"><a href="#1-基本情况" class="headerlink" title="1. 基本情况"></a>1. 基本情况</h3></li></ol><ul><li>背景：小X有<strong>两间塑料加工厂</strong>（A厂仅生产容器类产品；B厂仅生产模具类产品）；随着客户需求的变化，A厂也需要生产模具类产品，B厂也需要生产容器类产品。</li><li>冲突：没有资源（资金+租位）在当地分别开设多一家注塑分厂（<strong>无法使用工厂方法模式</strong>）</li><li>解决方案：在原有的两家塑料厂里增设生产需求的功能，即<strong>A厂能生产容器+模具产品；B厂间能生产模具+容器产品</strong>。<h3 id="2-使用步骤-1"><a href="#2-使用步骤-1" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h3><h4 id="1-创建抽象工厂类，定义具体工厂的公共接口"><a href="#1-创建抽象工厂类，定义具体工厂的公共接口" class="headerlink" title="(1) 创建抽象工厂类，定义具体工厂的公共接口"></a>(1) 创建<strong>抽象工厂类</strong>，定义具体工厂的公共接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">ManufactureContainer</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">ManufactureMould</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-创建抽象产品族类-，定义抽象产品的公共接口"><a href="#2-创建抽象产品族类-，定义抽象产品的公共接口" class="headerlink" title="(2) 创建抽象产品族类 ，定义抽象产品的公共接口"></a>(2) 创建<strong>抽象产品族类</strong> ，定义抽象产品的公共接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建抽象产品类-，定义具体产品的公共接口"><a href="#3-创建抽象产品类-，定义具体产品的公共接口" class="headerlink" title="(3) 创建抽象产品类 ，定义具体产品的公共接口"></a>(3) 创建<strong>抽象产品类</strong> ，定义具体产品的公共接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器产品抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerProduct</span> <span class="keyword">extends</span> <span class="title">AbstractProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MouldProduct</span> <span class="keyword">extends</span> <span class="title">AbstractProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-创建具体产品类（继承抽象产品类），-定义生产的具体产品"><a href="#4-创建具体产品类（继承抽象产品类），-定义生产的具体产品" class="headerlink" title="(4) 创建具体产品类（继承抽象产品类）， 定义生产的具体产品"></a>(4) 创建<strong>具体产品类</strong>（继承抽象产品类）， 定义生产的具体产品</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器产品A类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContainerProductA</span> <span class="keyword">extends</span> <span class="title">ContainerProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了容器产品A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器产品B类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContainerProductB</span> <span class="keyword">extends</span> <span class="title">ContainerProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了容器产品B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品A类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouldProductA</span> <span class="keyword">extends</span> <span class="title">MouldProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了模具产品A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品B类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouldProductB</span> <span class="keyword">extends</span> <span class="title">MouldProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了模具产品B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法"><a href="#5-创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法" class="headerlink" title="(5) 创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法"></a>(5) 创建<strong>具体工厂类</strong>（继承抽象工厂类），定义创建对应具体产品实例的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A厂 - 生产模具+容器产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">ManufactureContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ContainerProductA();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">ManufactureMould</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MouldProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B厂 - 生产模具+容器产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryB</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">ManufactureContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ContainerProductB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">ManufactureMould</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MouldProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例"><a href="#6-客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例" class="headerlink" title="(6) 客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例"></a>(6) 客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生产工作流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        FactoryA mFactoryA = <span class="keyword">new</span> FactoryA();</span><br><span class="line">        FactoryB mFactoryB = <span class="keyword">new</span> FactoryB();</span><br><span class="line">        <span class="comment">//A厂当地客户需要容器产品A</span></span><br><span class="line">        mFactoryA.ManufactureContainer().Show();</span><br><span class="line">        <span class="comment">//A厂当地客户需要模具产品A</span></span><br><span class="line">        mFactoryA.ManufactureMould().Show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//B厂当地客户需要容器产品B</span></span><br><span class="line">        mFactoryB.ManufactureContainer().Show();</span><br><span class="line">        <span class="comment">//B厂当地客户需要模具产品B</span></span><br><span class="line">        mFactoryB.ManufactureMould().Show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-结果"><a href="#7-结果" class="headerlink" title="(7)结果"></a>(7)结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">生产出了容器产品A</span><br><span class="line">生产出了模具产品A</span><br><span class="line">生产出了容器产品B</span><br><span class="line">生产出了模具产品B</span><br></pre></td></tr></table></figure><h2 id="五、-优缺点"><a href="#五、-优缺点" class="headerlink" title="五、 优缺点"></a>五、 优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h3><ol><li>降低耦合。抽象工厂模式将<strong>具体产品</strong>的创建延迟到子类<strong>具体工厂</strong>中，这样将对象的创建封装起来，可以减少客<strong>户端与具体产品类</strong>之间的依赖，从而使系统耦合度低，这样更有利于后期的维护和扩展。</li><li>抽象工厂模式隔离了具体类的生成。由于这种隔离，更换一个<strong>具体工厂</strong>就变得相对容易，所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。</li><li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用<strong>同一个产品族</strong>中的对象。</li><li>更符合<strong>开放封闭原则</strong>。新增一种<strong>产品族</strong>时，只需要增加相应的<strong>具体产品类</strong>和相应的<strong>工厂子类</strong>即可。<h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h3></li></ol><ul><li>抽象工厂模式很难支持新种类产品的变化。</li></ul><p>这是因为抽象工厂接口中已经确定了<strong>可以被创建的产品集合</strong>，如果需要添加新产品，此时就必须去修改抽象层的代码，这样就涉及到抽象工厂类的以及所有子类的改变，这样也就违背了<strong>开放封闭原则</strong>。</p><blockquote><p>也就是说：在抽象工厂模式中，增加新的产品族很方便，但是增加新的产品等级结构很麻烦，抽象工厂模式的这种性质称为<strong>开放封闭原则的倾斜性</strong>。</p></blockquote><h2 id="六、-应用场景"><a href="#六、-应用场景" class="headerlink" title="六、 应用场景"></a>六、 应用场景</h2><ol><li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是很重要的，<strong>用户无须关心对象的创建过程</strong>。</li><li>系统<strong>中有多于一个的产品族，而每次只使用其中某一产品族</strong>。可以通过配置文件等方式来使得用户可以动态改变产品族，也可以很方便地增加新的产品族。</li><li><strong>产品等级结构稳定</strong>，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构。</li></ol>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> OOAD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法模式（Factory Method）</title>
      <link href="/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%EF%BC%88Factory-Method%EF%BC%89/"/>
      <url>/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%EF%BC%88Factory-Method%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>在上文中介绍的简单工厂模式（Simple-Factory）中，有一些问题尚未解决。</p><ol><li>工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响。</li><li>违背开放封闭原则，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。</li></ol><p>为了解决这些问题，需要使用一种新的设计模式————<strong>工厂方法模式（Factory Method）</strong>。<br><a id="more"></a></p><blockquote><p>在阅读下文前强烈建议先阅读<br>设计模式简介<br>简单工厂模式（Simple-Factory）</p></blockquote><h2 id="二、-介绍"><a href="#二、-介绍" class="headerlink" title="二、 介绍"></a>二、 介绍</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>通过定义一个用于创建对象的接口，让子类决定具体实例化哪个产品类，工厂模式使其创建过程延迟到子类进行。工厂方法模式又称为：工厂模式(Factory Pattern)、虚拟构造器模式(Virtual Constructor Pattern)、多态工厂模式(Polymorphic Factory Pattern)等。</p><h3 id="2-解决的问题"><a href="#2-解决的问题" class="headerlink" title="2. 解决的问题"></a>2. 解决的问题</h3><p>解决了工厂一旦需要生产新产品就需要修改工厂类的方法逻辑，遵守了“<strong>开放封闭原则</strong>”。</p><blockquote><p>之所以能解决简单工厂的问题，是因为工厂方法把具体产品的创建推迟到工厂的子类（具体工厂）中，此时工厂类不再负责所有产品的创建，而只给出具体工厂必须实现的接口，符合开放封闭原则。</p></blockquote><h2 id="三、-模式原理"><a href="#三、-模式原理" class="headerlink" title="三、 模式原理"></a>三、 模式原理</h2><h3 id="1-UML类图"><a href="#1-UML类图" class="headerlink" title="1. UML类图"></a>1. UML类图</h3><p><img src="https://cdn.xiaofangdyd.cn/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png" alt=""></p><h3 id="2-模式组成"><a href="#2-模式组成" class="headerlink" title="2. 模式组成"></a>2. 模式组成</h3><table><thead><tr><th style="text-align:left">组成（角色）</th><th style="text-align:left">关系</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">抽象产品（Product）</td><td style="text-align:left">具体产品的父类</td><td style="text-align:left">描述具体产品的公共接口</td></tr><tr><td style="text-align:left">具体产品（Concrete Product）</td><td style="text-align:left">抽象产品的子类；工厂类创建的目标类</td><td style="text-align:left">描述生产的具体产品</td></tr><tr><td style="text-align:left">抽象工厂（Creator）</td><td style="text-align:left">具体工厂的父类</td><td style="text-align:left">描述具体工厂的公共接口</td></tr><tr><td style="text-align:left">具体工厂（Concrete Creator）</td><td style="text-align:left">抽象工厂的子类；被外界调用</td><td style="text-align:left">描述具体工厂；实现FactoryMethod工厂方法创建产品的实例</td></tr></tbody></table><h2 id="四、-实例-amp-代码"><a href="#四、-实例-amp-代码" class="headerlink" title="四、 实例&amp;代码"></a>四、 实例&amp;代码</h2><h3 id="1-基本情况"><a href="#1-基本情况" class="headerlink" title="1. 基本情况"></a>1. 基本情况</h3><ul><li>背景：小X有一个塑料加工厂（仅生产A类产品）；随着客户需求变化，需要生产B类产品。</li><li>冲突：改变原有塑料加工厂的配置和变化非常困难，假设下一次客户需要再发生变化，再次改变将增大非常大的成本。</li><li>解决方案：小X决定置办塑料分厂B来生产B类产品；<h3 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h3><h4 id="1-创建抽象工厂类，定义具体工厂的公共接口"><a href="#1-创建抽象工厂类，定义具体工厂的公共接口" class="headerlink" title="(1) 创建抽象工厂类，定义具体工厂的公共接口"></a>(1) 创建<strong>抽象工厂类</strong>，定义具体工厂的公共接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abstract class Factory&#123;</span><br><span class="line">    public abstract Product Manufacture();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-创建抽象产品类-，定义具体产品的公共接口"><a href="#2-创建抽象产品类-，定义具体产品的公共接口" class="headerlink" title="(2) 创建抽象产品类 ，定义具体产品的公共接口"></a>(2) 创建<strong>抽象产品类</strong> ，定义具体产品的公共接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abstract class Product&#123;</span><br><span class="line">    public abstract void Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建具体产品类（继承抽象产品类），-定义生产的具体产品"><a href="#3-创建具体产品类（继承抽象产品类），-定义生产的具体产品" class="headerlink" title="(3) 创建具体产品类（继承抽象产品类）， 定义生产的具体产品"></a>(3) 创建<strong>具体产品类</strong>（继承抽象产品类）， 定义生产的具体产品</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//具体产品A类</span><br><span class="line">class  ProductA extends  Product&#123;</span><br><span class="line">    public void Show() &#123;</span><br><span class="line">        System.out.println(&quot;生产出了产品A&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//具体产品B类</span><br><span class="line">class  ProductB extends  Product&#123;</span><br><span class="line">    public void Show() &#123;</span><br><span class="line">        System.out.println(&quot;生产出了产品B&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法"><a href="#4-创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法" class="headerlink" title="(4) 创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法"></a>(4) 创建<strong>具体工厂类</strong>（继承抽象工厂类），定义创建对应具体产品实例的方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//工厂A类 - 生产A类产品</span><br><span class="line">class  FactoryA extends Factory&#123;</span><br><span class="line">    public Product Manufacture() &#123;</span><br><span class="line">        return new ProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//工厂B类 - 生产B类产品</span><br><span class="line">class  FactoryB extends Factory&#123;</span><br><span class="line">    public Product Manufacture() &#123;</span><br><span class="line">        return new ProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例"><a href="#5-外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例" class="headerlink" title="(5) 外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例"></a>(5) 外界通过调用具体工厂类的方法，从而创建<strong>不同具体产品类的实例</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//生产工作流程</span><br><span class="line">public class FactoryPattern &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        //客户要产品A</span><br><span class="line">        FactoryA mFactoryA = new FactoryA();</span><br><span class="line">        mFactoryA.Manufacture().Show();</span><br><span class="line"></span><br><span class="line">        //客户要产品B</span><br><span class="line">        FactoryB mFactoryB = new FactoryB();</span><br><span class="line">        mFactoryB.Manufacture().Show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-结果"><a href="#6-结果" class="headerlink" title="(6)结果"></a>(6)结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生产出了产品A</span><br><span class="line">生产出了产品B</span><br></pre></td></tr></table></figure><h2 id="五、-优缺点"><a href="#五、-优缺点" class="headerlink" title="五、 优缺点"></a>五、 优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h3><ul><li>屏蔽产品的具体实现，调用者只关心产品的接口。</li><li>更符合开放封闭原则</li><li>每个具体工厂只负责创建对应的产品，符合接口隔离原则</li><li>扩展性高。<h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h3></li><li>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。<h2 id="六、-应用场景"><a href="#六、-应用场景" class="headerlink" title="六、 应用场景"></a>六、 应用场景</h2>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是<strong>复杂对象适合使用工厂模式</strong>，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会<strong>增加系统的复杂度</strong>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> OOAD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单工厂模式（Simple Factory）</title>
      <link href="/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88Simple-Factory%EF%BC%89/"/>
      <url>/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88Simple-Factory%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>工厂模式主要是为创建对象提供过度接口，以便将创建对象的具体过程隔离屏蔽起来，达到提高灵活性的目的。</p><p>工厂模式可以分为三类：<strong>简单工厂模式（Simple Factory）、工厂方法模式（Factory Method）、抽象工厂模式（Abstract Factory）。</strong>这三种模式从前到后逐步抽象，并且更具一般性。<br><a id="more"></a><br>本文会简单概述开发中最常用的设计模式 - 简单工厂模式。</p><blockquote><p>在阅读下文前强烈建议先阅读<br>设计模式简介</p></blockquote><h2 id="二、含义"><a href="#二、含义" class="headerlink" title="二、含义"></a>二、含义</h2><p>简单工厂模式又称静态工厂方法模式（因为工厂类定义了一个静态方法）。在现实生活中，工厂是负责生产产品的；同样在设计模式中，简单工厂模式我们可以理解为负责生产对象的一个类，称为“工厂类”。</p><p>它存在的目的很简单：<strong>定义一个用于创建对象的接口。</strong></p><h2 id="三、解决的问题"><a href="#三、解决的问题" class="headerlink" title="三、解决的问题"></a>三、解决的问题</h2><p>将“类实例化的操作”与“使用对象的操作”分开，让使用者不用知道具体参数就可以实例化出所需要的“产品”类，从而避免了在客户端代码中显式指定，实现了解耦。<br><strong>即使用者可直接消费产品而不需要知道其生产的细节</strong></p><h2 id="四、-模式原理"><a href="#四、-模式原理" class="headerlink" title="四、 模式原理"></a>四、 模式原理</h2><h3 id="1-模式组成"><a href="#1-模式组成" class="headerlink" title="1. 模式组成"></a>1. 模式组成</h3><table><thead><tr><th style="text-align:left">组成（角色）</th><th style="text-align:left">关系</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">抽象产品（Product）</td><td style="text-align:left">具体产品的父类</td><td style="text-align:left">描述产品的公共接口</td></tr><tr><td style="text-align:left">具体产品（Concrete Product）</td><td style="text-align:left">抽象产品的子类；工厂类创建的目标类</td><td style="text-align:left">描述生产的具体产品</td></tr><tr><td style="text-align:left">工厂（Creator）</td><td style="text-align:left">被外界调用</td><td style="text-align:left">根据传入不同参数从而创建不同具体产品类的实例</td></tr></tbody></table><h3 id="2-UML类图"><a href="#2-UML类图" class="headerlink" title="2. UML类图"></a>2. UML类图</h3><p><img src="https://cdn.xiaofangdyd.cn/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt="UML类图.png"></p><h3 id="3-使用步骤"><a href="#3-使用步骤" class="headerlink" title="3. 使用步骤"></a>3. 使用步骤</h3><ol><li>创建<strong>抽象产品类</strong>&amp;定义具体产品的公共接口。</li><li>创建<strong>具体产品类</strong>（继承抽象产品类） &amp; 定义生产的具体产品。</li><li>创建<strong>工厂类</strong>，通过创建静态方法根据传入不同参数从而创建不同具体产品类的实例。</li><li>外界通过调用工厂类的静态方法，<strong>传入不同参数</strong>从而创建不同<strong>具体产品类的实例</strong>。<h2 id="五、-实例-amp-代码"><a href="#五、-实例-amp-代码" class="headerlink" title="五、 实例&amp;代码"></a>五、 实例&amp;代码</h2><h3 id="1-基本情况"><a href="#1-基本情况" class="headerlink" title="1. 基本情况"></a>1. 基本情况</h3></li></ol><ul><li>背景：小X有一个塑料生产厂，用来做塑料加工生意。</li><li>目的：小X希望通过<strong>简单工厂模式</strong>实现3款产品的生产。<h3 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h3><h4 id="1-创建抽象产品类，定义具体产品的公共接口"><a href="#1-创建抽象产品类，定义具体产品的公共接口" class="headerlink" title="(1) 创建抽象产品类，定义具体产品的公共接口"></a>(1) 创建抽象产品类，定义具体产品的公共接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-创建具体产品类（继承抽象产品类），定义生产的具体产品"><a href="#2-创建具体产品类（继承抽象产品类），定义生产的具体产品" class="headerlink" title="(2) 创建具体产品类（继承抽象产品类），定义生产的具体产品"></a>(2) 创建具体产品类（继承抽象产品类），定义生产的具体产品</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体产品类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ProductA</span> <span class="keyword">extends</span>  <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了产品A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ProductB</span> <span class="keyword">extends</span>  <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了产品C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品类C</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ProductC</span> <span class="keyword">extends</span>  <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了产品C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建工厂类，通过创建静态方法从而根据传入不同参数创建不同具体产品类的实例"><a href="#3-创建工厂类，通过创建静态方法从而根据传入不同参数创建不同具体产品类的实例" class="headerlink" title="(3) 创建工厂类，通过创建静态方法从而根据传入不同参数创建不同具体产品类的实例"></a>(3) 创建工厂类，通过创建静态方法从而根据传入不同参数创建不同具体产品类的实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">Manufacture</span><span class="params">(String ProductName)</span></span>&#123;</span><br><span class="line"><span class="comment">//工厂类里用switch语句控制生产哪种商品；</span></span><br><span class="line"><span class="comment">//使用者只需要调用工厂类的静态方法就可以实现产品类的实例化。</span></span><br><span class="line">        <span class="keyword">switch</span> (ProductName)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductC();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例"><a href="#4-外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例" class="headerlink" title="(4) 外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例"></a>(4) 外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂产品生产流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Factory mFactory = <span class="keyword">new</span> Factory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品A</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用工厂类的静态方法 &amp; 传入不同参数从而创建产品实例</span></span><br><span class="line">            mFactory.Manufacture(<span class="string">"A"</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有这一类产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品B</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFactory.Manufacture(<span class="string">"B"</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有这一类产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品C</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFactory.Manufacture(<span class="string">"C"</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有这一类产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品D</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFactory.Manufacture(<span class="string">"D"</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有这一类产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-输出结果"><a href="#5-输出结果" class="headerlink" title="(5) 输出结果"></a>(5) 输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">生产出了产品A</span><br><span class="line">生产出了产品B</span><br><span class="line">生产出了产品C</span><br><span class="line">没有这一类产品</span><br></pre></td></tr></table></figure><h2 id="六、优缺点"><a href="#六、优缺点" class="headerlink" title="六、优缺点"></a>六、优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h3><ol><li>将创建实例的工作与使用实例的工作分开，<strong>使用者不必关心类对象如何创建</strong>，实现了解耦。</li><li>把初始化实例时的工作放到工厂里进行，使代码更容易维护。 </li><li>更符合面向对象的原则。</li><li><strong>面向接口编程</strong>，而不是面向实现编程。<h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h3></li><li>工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响。</li><li>违背<strong>开放封闭原则</strong>，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。</li><li>简单工厂模式由于使用了静态工厂方法，<strong>静态方法不能被继承和重写</strong>，会造成工厂角色无法形成基于继承的等级结构。<h2 id="七、应用场景"><a href="#七、应用场景" class="headerlink" title="七、应用场景"></a>七、应用场景</h2></li></ol><ul><li>当客户程序不需要知道要使用对象的创建过程。</li><li>客户程序使用的对象存在变动的可能，或者根本就不知道使用哪一个具体的对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> OOAD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式简介</title>
      <link href="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/"/>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-定义及作用"><a href="#一、-定义及作用" class="headerlink" title="一、 定义及作用"></a>一、 定义及作用</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>设计模式（Design pattern）是软件开发人员在软件开发过程中<strong>面临特定问题设计的解决方案</strong>，这些解决方案是众多开发人员经过相当长一段时间的试验和错误总结出来的。<br><a id="more"></a></p><h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h3><ul><li>提高代码复用率，降低开发成本和周期</li><li>提高代码的可靠性</li><li>让代码更容易被他人理解<h2 id="二、-设计原则"><a href="#二、-设计原则" class="headerlink" title="二、 设计原则"></a>二、 设计原则</h2>在设计模式中，强调如下六大原则：<h3 id="1-开放封闭原则（Open-Close-Principle）"><a href="#1-开放封闭原则（Open-Close-Principle）" class="headerlink" title="1. 开放封闭原则（Open Close Principle）"></a>1. 开放封闭原则（Open Close Principle）</h3><blockquote><p>一个实体（类、函数、模块等）应该<strong>对扩展开放，对修改关闭</strong></p></blockquote></li></ul><ol><li>每次发生变化时，要通过添加新的代码来增强现有类型的行为，而不是修改原有的代码。</li><li>符合开放封闭原则的最好方式是提供一个固有的接口，然后让所有可能发生变化的类实现该接口，让固定的接口与相关对象进行交互。</li><li>可以使程序的扩展性更好，易于维护和升级。</li><li>需要使用接口和抽象类。<h3 id="2-里氏替换原则（Liskov-Substitution-Principle）"><a href="#2-里氏替换原则（Liskov-Substitution-Principle）" class="headerlink" title="2. 里氏替换原则（Liskov Substitution Principle）"></a>2. 里氏替换原则（Liskov Substitution Principle）</h3><blockquote><p>任何基类可以出现的地方，子类一定可以出现。</p></blockquote></li><li>LSP是继承复用的基石。</li><li>在软件开发过程中，子类替换父类后，程序的行为是一样的。 </li><li>只有当子类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而子类也能够在基类的基础上增加新的行为。</li><li>LSP是对开放封闭原则的补充，是对实现开放封闭原则的具体步骤的规范。<h3 id="3-依赖倒置原则（Dependence-Inversion-Principle）"><a href="#3-依赖倒置原则（Dependence-Inversion-Principle）" class="headerlink" title="3. 依赖倒置原则（Dependence Inversion Principle）"></a>3. 依赖倒置原则（Dependence Inversion Principle）</h3><blockquote><p>针对接口编程，依赖于抽象而不依赖于具体。</p></blockquote></li><li>细节应该依赖于抽象，而抽象不应该依赖于细节。</li><li>所谓的 <strong>面向接口编程，而不是面向实现编程</strong> 。这样可以降低客户与具体实现的耦合。<h3 id="4-接口隔离原则（Interface-Segregation-Principle）"><a href="#4-接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="4. 接口隔离原则（Interface Segregation Principle）"></a>4. 接口隔离原则（Interface Segregation Principle）</h3><blockquote><p>使用多个隔离的接口，比使用单个接口要好。</p></blockquote></li><li>不要让一个单一的接口承担过多的职责，而应把每个职责分离到多个专门的接口中，进行接口分离。</li><li>要降低类之间的耦合。</li><li>强调降低依赖，降低耦合。<h3 id="5-迪米特法则（Demeter-Principle）"><a href="#5-迪米特法则（Demeter-Principle）" class="headerlink" title="5. 迪米特法则（Demeter Principle）"></a>5. 迪米特法则（Demeter Principle）</h3><blockquote><p>一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p></blockquote></li><li>又称：<strong>最少知道原则</strong>。</li><li>遵守迪米特法则的模块修改时影响的更少，扩展更加容易。</li><li><strong>外观模式</strong>（Facade Pattern)和<strong>中介者模式</strong>（Mediator Pattern）就使用了迪米特法则。<h3 id="6-合成复用原则（Composite-Reuse-Principle）"><a href="#6-合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6. 合成复用原则（Composite Reuse Principle）"></a>6. 合成复用原则（Composite Reuse Principle）</h3><blockquote><p>尽量使用合成/聚合的方式，而不是使用继承。</p></blockquote><h2 id="三、-设计模式分类"><a href="#三、-设计模式分类" class="headerlink" title="三、 设计模式分类"></a>三、 设计模式分类</h2>设计模式总共分为三大类，共23种设计模式。<br><img src="https://cdn.xiaofangdyd.cn/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B.jpg" alt="设计模式分类.jpg"></li></ol>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> OOAD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云搭建typecho博客平台</title>
      <link href="/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAtypecho%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0/"/>
      <url>/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAtypecho%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<p>经过半年多的折腾，我的博客最终在阿里云的服务器成功落户，中间经历了更换域名，导入ssl证书，更换博客平台，网站迁移，网站备案等一系列事件。在弄这些东西的时候，免不了查询资料，我发现国内的资料要么比较老，要么就不全。这篇博客是我安装的一个记录，也可以算是备份。如果有和我一样情况的，本文也可以是一个参考。</p><a id="more"></a><p>使用本文教程有几个前提要求：</p><ol><li>租用的有服务器，系统为ubuntu16.04（其他系统大同小异）</li><li>购买的有域名且通过工信部icp备案。（未备案的服务器需在中国大陆境外）</li></ol><p>本文分为以下几个部分：<strong>lnmp环境安装、网站部署、部署typecho、备份及迁移后的恢复</strong></p><h2 id="一、lnmp环境安装"><a href="#一、lnmp环境安装" class="headerlink" title="一、lnmp环境安装"></a>一、lnmp环境安装</h2><p>lnmp在网上有很多安装方法，需要输入大量的命令，这里取最简单的<a href="https://lnmp.org" target="_blank" rel="noopener">lnmp一键安装包</a></p><h3 id="1-登录服务器"><a href="#1-登录服务器" class="headerlink" title="1. 登录服务器"></a>1. 登录服务器</h3><p>使用xshell或类似的SSH工具登录服务器，<br>登录后运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S lnmp</span><br></pre></td></tr></table></figure></p><p>如果提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen:commend not found</span><br></pre></td></tr></table></figure></p><p>可以先安装screen后再执行。<br>使用screen的目的在于防止安装中途ssh由于长时间未通信而断开链接，导致安装程序中断。如果实在不想弄可以跳过。</p><h3 id="2-下载并安装lnmp一键安装包"><a href="#2-下载并安装lnmp一键安装包" class="headerlink" title="2. 下载并安装lnmp一键安装包"></a>2. 下载并安装lnmp一键安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://soft.vpser.net/lnmp/lnmp1.4.tar.gz &amp;&amp; tar zxf lnmp1.4.tar.gz &amp;&amp; cd lnmp1.4 &amp;&amp; ./install.sh lnmp</span><br></pre></td></tr></table></figure><p>安装过程在官方说明中已经很详细指出：<a href="https://lnmp.org/install.html" target="_blank" rel="noopener">官方安装说明</a><br>最简单的教程就是除了提示<strong>输入MySql密码</strong>时，其他一路回车选默认值就好。</p><p><img src="https://cdn.xiaofangdyd.cn/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAtypecho.png" alt=""></p><h2 id="二、-网站部署"><a href="#二、-网站部署" class="headerlink" title="二、 网站部署"></a>二、 网站部署</h2><h3 id="1-添加网站"><a href="#1-添加网站" class="headerlink" title="1. 添加网站"></a>1. 添加网站</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lnmp vhost add</span><br></pre></td></tr></table></figure><p>步骤同样可以在官方说明中找到：<a href="https://lnmp.org/faq/lnmp-vhost-add-howto.html" target="_blank" rel="noopener">添加网站说明</a><br>需要注意的是</p><ol><li>网站的目录最好设置为<code>/home/wwwroot/default</code>这样方便我们以后添加数据库管理界面。</li><li>提示是否启动伪静态<strong>Allow Rewrite rule? (y/n)</strong>时，输入<strong>y</strong>，并在选择配置文件时，输入<strong>typecho</strong>。</li><li>其他的看个人需求添加，懒得看的全部回车就好。<h3 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2. 域名解析"></a>2. 域名解析</h3>去域名注册商把网站解析到服务器ip上。此过程不再赘述。<h3 id="3-添加ssl证书"><a href="#3-添加ssl证书" class="headerlink" title="3. 添加ssl证书"></a>3. 添加ssl证书</h3>在这里我使用的是阿里云Symantec免费SSL证书，申请方法自行百度。<br>将适用于Nginx的证书文件下载下来。<br>在<strong>/usr/local/nginx</strong>目录下新建<strong>cert</strong>目录，并将下载的两个文件放到cert目录下，并分别命名为<strong>ssl.pem; ssl.key</strong>。<br>之后将<strong>nginx中对应域名的conf文件</strong>（一般位于”/usr/local/nginx/conf/vhost”中）先备份，之后将80端口部分修改为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server </span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    #listen [::]:80;\</span><br><span class="line">    server_name your_server_name; </span><br><span class="line">    index index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">    root /home/wwwroot/default;</span><br><span class="line">    include typecho.conf;</span><br><span class="line">    include enable-php-pathinfo.conf;</span><br><span class="line">    ##强制把http请求跳转到https请求</span><br><span class="line">    return 301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>添加443端口部分:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name your_server_name;</span><br><span class="line">    ssl on;</span><br><span class="line">    root html;</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    ssl_certificate /usr/local/nginx/cert/ssl.pem;</span><br><span class="line">    ssl_certificate_key /usr/local/nginx/cert/ssl.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    include typecho.conf;</span><br><span class="line">    include enable-php-pathinfo.conf;</span><br><span class="line"></span><br><span class="line">    location /nginx_status</span><br><span class="line">    &#123;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">    &#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(js|css)?$</span><br><span class="line">    &#123;</span><br><span class="line">        expires 12h;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ /\.</span><br><span class="line">    &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    access_log /home/wwwlogs/access.log; &#125;</span><br></pre></td></tr></table></figure></p><p>完成后重启nginx服务<code>nginx -s reload</code></p><p><strong>注意：</strong>在此conf文件中，我默认开启了<strong>http强制跳转https</strong>，并解决了typecho在lnmp一键安装包中<strong>由于伪静态导致的后台无法访问</strong>的问题。有其他需要可以自行改动。</p><h2 id="三、-部署typecho"><a href="#三、-部署typecho" class="headerlink" title="三、 部署typecho"></a>三、 部署typecho</h2><h3 id="1-上传typecho到网站目录"><a href="#1-上传typecho到网站目录" class="headerlink" title="1. 上传typecho到网站目录"></a>1. 上传typecho到网站目录</h3><p>先从官网下载安装包，再上传到<strong>/home/wwwroot</strong>文件夹下。<br>使用tar zxvf解压缩后，将老default文件夹改为old，将解压出的build文件夹命名为default。<br>给新default文件夹操作权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 default</span><br></pre></td></tr></table></figure></p><h3 id="2-添加数据库"><a href="#2-添加数据库" class="headerlink" title="2. 添加数据库"></a>2. 添加数据库</h3><p>由于上一步替换掉了之前的default文件夹，因此phpmyadmin这个在线数据库管理系统需要从新安装。<br>进入~/lnmp1.4目录，执行 <code>./upgrade.sh phpmyadmin</code>输入<strong>4.6.6</strong>即可。<br>之后访问<code>服务器ip/phpmyadmin</code>用root登录后新建typecho数据库。</p><h3 id="3-安装typecho"><a href="#3-安装typecho" class="headerlink" title="3. 安装typecho"></a>3. 安装typecho</h3><p>直接访问网站即可跳到typecho的安装界面，按步骤安装完成后即可使用。<br>如果提示无法创建文件xxx，请手动创建xxx，是因为在1中未给文件夹操作权限。</p><h2 id="四、-备份及迁移后的恢复"><a href="#四、-备份及迁移后的恢复" class="headerlink" title="四、 备份及迁移后的恢复"></a>四、 备份及迁移后的恢复</h2><h3 id="1-备份"><a href="#1-备份" class="headerlink" title="1. 备份"></a>1. 备份</h3><p>在博客的日常使用中，建议至少每一个月备份一次。由于typecho自带的备份不能备份主题，图片和插件，因此如果使用了第三方主题、上传了插件或在博客中上传了图片，都需要将default/usr下的<strong>plugins、themes、uploads</strong>三个文件夹进行备份，下载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#压缩命令</span><br><span class="line">tar zcvf beifen.tar.gz /home/wwwroot/default/usr</span><br></pre></td></tr></table></figure></p><p>之后可以把压缩包保存到本地。</p><h3 id="2-恢复"><a href="#2-恢复" class="headerlink" title="2. 恢复"></a>2. 恢复</h3><p>在进行服务器迁移时，安装完typecho后，可以先恢复typecho自带的备份，恢复完成后会发现文章中的图片全都打不开，之后就可以将备份好的usr上传到服务器，解压后移动到相应的位置即可。</p><h2 id="五、-注意事项"><a href="#五、-注意事项" class="headerlink" title="五、 注意事项"></a>五、 注意事项</h2><ol><li>typecho部署在阿里云上的话，上传图片会被防火墙拦截，需要在控制台防火墙中将ftp的21端口打开。</li><li>有更新今后会补充。</li></ol>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同步和异步，阻塞和非阻塞</title>
      <link href="/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%EF%BC%8C%E9%98%BB%E5%A1%9E%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
      <url>/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%EF%BC%8C%E9%98%BB%E5%A1%9E%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E/</url>
      
        <content type="html"><![CDATA[<p>在学习计算机操作系统的时候，经常会听老师讲到<strong>同步(Sync)/异步(Async)、阻塞(Block)/非阻塞(Unblock)</strong>四种调用方式，并且这些概念经常会搞混，下面说说我个人的理解过程。<br><a id="more"></a></p><h2 id="1-同步和异步"><a href="#1-同步和异步" class="headerlink" title="1. 同步和异步"></a>1. 同步和异步</h2><ul><li>同步：所谓同步，就是在发出一个功能调用之后，在没有得到结果之前，该调用就不返回。按照这个定义，其实绝大部分函数都是同步调用。</li><li>异步：就是在发出一个功能调用之后，调用返回。被调用的部件在完成后，通过状态、通知或回调来通知调用者。</li></ul><p>在程序里，同步和异步，是从程序通信过程来定义的。同步过程发起请求后，等到结果再返回；异步过程发起请求后立即返回，后续有事件通知。<br>即<strong>调用的结果是调用者主动去获取的</strong>（比如一直等待recvfrom或者设置超时等待的select），则为同步。而<strong>调用结果是被调用者在完成后通知调用者的</strong>（比如Windows的IOCP），则为异步。</p><h2 id="2-阻塞和非阻塞"><a href="#2-阻塞和非阻塞" class="headerlink" title="2. 阻塞和非阻塞"></a>2. 阻塞和非阻塞</h2><ul><li>阻塞：阻塞调用是指调用结果返回之前，当前进程被挂起（线程进入非可执行状态，在这个状态下，cpu不会给线程分配时间片，当I/O操作结束，该线程阻塞状态解除，重新变为活动线程）。函数只有在得到结果之后才会返回。</li><li>非阻塞：和阻塞的概念相对，指在不能立即得到结果之前，该函数不会阻塞当前的线程，而会立刻返回，线程处于活跃状态。</li></ul><p>在程序里，阻塞和非阻塞，是针对<strong>调用者所在线程是否在调用后主动挂起</strong>来说的。即如果在线程中调用者发出调用后，在被调用者返回之前，<strong>该线程主动挂起</strong>，则为阻塞。若<strong>线程不主动挂起，而继续向下执行</strong>，则为非阻塞。</p><h2 id="3-四者的联系和区别"><a href="#3-四者的联系和区别" class="headerlink" title="3. 四者的联系和区别"></a>3. 四者的联系和区别</h2><p>我之前经常把同步和阻塞搞混，认为是等同的。<strong>其实根本不一样</strong>，对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。</p><p>在这里我将列举一个找资料过程中看到的例子来说明同步和异步、阻塞和非阻塞之间的联系和区别。</p><p>老张用两个水壶烧水（普通水壶和响水壶）。</p><ol><li>同步阻塞：老张把普通水壶放到火上，站着等待，每隔一段时间看看水开没开。</li><li>同步非阻塞：老张把普通水壶放到火上，然后去做别的事，同样每隔一段时间看看水开没开。</li><li>异步阻塞：老张把响水壶放到火上，站着等待，水烧开时水壶呜呜响，从而知道水开了。</li><li>异步非阻塞：老张把响水壶放到火上，然后去做别的事，水烧开时水壶呜呜响，从而知道水开了。</li></ol><p>所谓同步异步，只是对于水壶而言。</p><ul><li>普通水壶：同步；</li><li>响水壶：异步。</li></ul><p>所谓阻塞非阻塞，只是针对老张而言。</p><ul><li>站着等待的老张：阻塞；</li><li>做别的事的老张：非阻塞。</li></ul><p>情况1、3中的老张就是阻塞的，在等待的时候，别人喊他是不会应答的。虽然3中响水壶是异步的，但对于阻塞的老张没有太大意义。</p><p>所以一般<strong>异步是配合非阻塞</strong>来使用的，这样才能发挥异步的作用。</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活中的算法</title>
      <link href="/%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95/"/>
      <url>/%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>前几天梦见幼儿园排队，想到了冒泡排序，抖个机灵发朋友圈里了，还说要总结生活里的算法……这几天一直在想，先把目前能想到的写出来吧，以后再补充。（以后再也不乱立flag了）</p><a id="more"></a><ul><li>程序员穿袜子</li></ul><p>这是一个程序员圈子里很经典的一个梗。从名字中就散发出生活的清香。</p><blockquote><p>程序员把他所有的袜子都放在卧室的地板上，摆成一个实心三角形（小顶堆）。每天下班回家就把袜子放在最后面，也就是堆的末尾。然后每次拿起两双袜子放在鼻子下闻闻，把相对较臭的放在后面，不断向前调整袜子在三角形中的位置，直到下面的都比上面的臭为止。这样，程序员每天出门就能方便的选出一双最不臭的袜子。</p></blockquote><p>在这个梗里，程序员使用的是堆排序，这是一个有味道的算法……</p><ul><li>二分找肉法</li></ul><p>吃串串香的时候，串特别长，一段串着肉，但有的店家没弄好，煮一会儿后肉全掉汤里了。</p><p>假设我手中有32根串，但末端只有一片牛肚。如果我一根一根找，那么在最坏的情况下，我需要O（n），也就是32次挑选才能选出那根有肉的串。</p><p>于是我发明了二分找肉法，首先把手里的串分成等量的两份，然后再对有肉的一份进行同样的操作，直到n=1为止。</p><p>复杂度从O（n）降为O（logn），只需要5次挑选。</p><p>在我发明算法并找到牛肚的时间里，汤里的31串牛肚估计已经老了。</p><ul><li>衣柜算法</li></ul><p>在家里的时候，衣服分门别类放成几摞，大的衣服还能挂起来，找衣服是很轻松的，近似于O（1）的复杂度，可以看作实现了哈希字典。</p><p>在寝室里衣柜基本只够将所有的衣服叠在一起放几摞（这里为了说明方便，按1摞处理）。要找一件不起眼的衣服，需要遍历一整叠，找到后还需要先把上层的衣服pop出来，取衣服过后再push进去……差不多就是一个stack栈，非常不适合查找的一种数据结构（手动再见）</p><ul><li>课堂算法</li></ul><p>高中上课，语数外理化生每节课40分钟，一般不会连上，体育音乐之类一周一节，还时常被抢占，处于饥饿状态，这里使用的是多级反馈时间片轮转调度算法。</p><p>上大学后，一节课50分钟，还是两节连着上，时间片边长了，也没了抢占，这就是基本的时间片轮转调度算法。</p><p>寒暑假在家，想学习劳逸结合，也运用时间片轮转调度算法。睡觉一片，吃饭一片，看视频一片，吃鸡一片，吃鸡一片，吃鸡一片，然后没时间学习了……</p><p>想想真是佩服自己高中时候，上节课刚考完数学休息几分钟马上就能写一篇作文，几门课切换自如，寄存器如此强大，现在它已经快废了吧╮(╯▽╰)╭</p><ul><li>课文索引</li></ul><p>以前语文课老师要求我们一人读一段课文，快到我的时候，我快速浏览全文，建立起跳转索引，然后仔细听前面同学读的内容，迅速匹配到相应的字符串。</p><ul><li>查字典</li></ul><p>小学查字典时会用trie树（在索引上找），初中以后就直接哈希（翻首字母）+ 二分（胡翻）了。</p><ul><li>杂七杂八的一些小算法（合起来写）</li></ul><p>幼儿园老师按高低个排队，“高的站后面，小的站前面”、“你们俩换一下”，这是对基本有序数组的冒泡排序。</p><p>忘记密码锁密码的时候，一个一个试，穷举。<br>这局打完我再去上课，贪心算法。<br>各种心里推断题，1、你开心吗？A、开心，去第2题。B、不开心，去第3题。有向图。</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>诸事皆宜，百无禁忌</title>
      <link href="/%E8%AF%B8%E4%BA%8B%E7%9A%86%E5%AE%9C%EF%BC%8C%E7%99%BE%E6%97%A0%E7%A6%81%E5%BF%8C/"/>
      <url>/%E8%AF%B8%E4%BA%8B%E7%9A%86%E5%AE%9C%EF%BC%8C%E7%99%BE%E6%97%A0%E7%A6%81%E5%BF%8C/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.xiaofangdyd.cn/%E8%AF%B8%E4%BA%8B%E7%9A%86%E5%AE%9C_%E7%99%BE%E6%97%A0%E7%A6%81%E5%BF%8C/1.jpg" alt=""></p><p>以前觉得这个世界是讲道理的，其实不是。</p><p>勤勤恳恳做一些我认为对的事情，为了某个目标倾尽所有，<strong>我相信只要自己足够真诚，就一定可以得到这个世界的认可。</strong></p><p>可这个世界残酷就残酷在存在太多太多的事与愿违。</p><p><strong>我所有的只能让自己安心，除此之外并不一定就能够被承认。</strong><br><a id="more"></a><br><img src="https://cdn.xiaofangdyd.cn/%E8%AF%B8%E4%BA%8B%E7%9A%86%E5%AE%9C_%E7%99%BE%E6%97%A0%E7%A6%81%E5%BF%8C/2.jpeg" alt=""><br>比如认真念书，到头来也没能有什么好成绩; 我拿出来全部的真诚，也没能处理好人与人之间的关系。我以为自己努力不犯错，就不会不被爱，不会被曲解，不会被拋弃。</p><p>其实不是的。<strong>世界是冷漠的</strong>，它不在乎你付出多少，也不讲人情，不存在因果报应，也没什么合理不合理的。</p><blockquote><p>我所得到的都是侥幸，所失去的才是人生。</p></blockquote><p>这样的心态真的是很棒啊。</p><p><img src="https://cdn.xiaofangdyd.cn/%E8%AF%B8%E4%BA%8B%E7%9A%86%E5%AE%9C_%E7%99%BE%E6%97%A0%E7%A6%81%E5%BF%8C/3.jpeg" alt=""></p><p>我当然相信这个世界上有真正热爱生活的人，但一定也会有不少人，能够心平气和地面对得失，放弃该放弃的，控制能控制的，在深不见底的绝望里冷漠走过，生出更高级的热爱。</p><p>于是结果啊过程啊都没那么重要了，关键还是看自己的态度。尽人事听天命大概就是这么一个道理。</p><p>已经无所谓这个世界讲不讲道理了，<strong>无愧于心</strong>，就是我现在最大的追求。</p>]]></content>
      
      
      <categories>
          
          <category> 方方说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《2018刑侦科推理试题》详解</title>
      <link href="/%E3%80%8A2018%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98%E3%80%8B%E8%AF%A6%E8%A7%A3/"/>
      <url>/%E3%80%8A2018%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98%E3%80%8B%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>最近江苏网警的一篇《2018刑侦科推理试题》养活了很多自媒体朋友，我最初了解的渠道是在qq看点……据报道，有网友晒出解题过程要满满好几页稿纸，有人用电脑软件计算竟然花了<strong>近半小时</strong>……我按自己的思路走一遍发现还不算太难，是不是媒体故意夸大其词来博眼球？老一辈教导我们：“不要听风就是雨，将来报道出了偏差，是要负责任的。”本着马列唯物主义的质疑精神，我写出了自己的解题过程，<strong>只有6行</strong>；电脑模拟基本秒出答案，为了增强真实性，本文附带模拟源代码。</p><a id="more"></a><ul><li>首先亮题：</li></ul><p><img src="https://cdn.xiaofangdyd.cn/2018%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98/1.png" alt=""></p><ul><li>再亮答案：</li></ul><p><img src="https://cdn.xiaofangdyd.cn/2018%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98/2.jpg" alt=""></p><ul><li>思路（非代码相关人士可以跳两段再看）</li></ul><p>说实话，看到这题的时候我是懵逼的，但只要读懂题意，完全不需要动脑子推理，不需要切入点，编好程序瞎鸡儿运行就好。</p><p>我记得有人曾跟我说过，你们敲代码的是不是计算能力都特好，其实说实话，如果有手机，2位数+2位数我都懒得算，能用机器准确得出结果，为什么要费脑子。</p><p>回归本题，用C++编程，暴力列举出所有的情况，再一一验证条件，运行。</p><ul><li><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> count[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max, min;</span><br><span class="line">    max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max_order = <span class="number">0</span>;</span><br><span class="line">    min=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> min_order = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> test=<span class="string">'A'</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">        answer[i] = <span class="number">0</span>;</span><br><span class="line">        b[i]=<span class="number">0</span>;</span><br><span class="line">        count[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"test\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(b[<span class="number">0</span>]=<span class="number">0</span>; b[<span class="number">0</span>]&lt;<span class="number">4</span>; b[<span class="number">0</span>]++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(b[<span class="number">1</span>]=<span class="number">0</span>; b[<span class="number">1</span>]&lt;<span class="number">4</span>; b[<span class="number">1</span>]++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(b[<span class="number">2</span>]=<span class="number">0</span>; b[<span class="number">2</span>]&lt;<span class="number">4</span>; b[<span class="number">2</span>]++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(b[<span class="number">3</span>]=<span class="number">0</span>; b[<span class="number">3</span>]&lt;<span class="number">4</span>; b[<span class="number">3</span>]++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(b[<span class="number">4</span>]=<span class="number">0</span>; b[<span class="number">4</span>]&lt;<span class="number">4</span>; b[<span class="number">4</span>]++)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(b[<span class="number">5</span>]=<span class="number">0</span>; b[<span class="number">5</span>]&lt;<span class="number">4</span>; b[<span class="number">5</span>]++)&#123;</span><br><span class="line">                            <span class="keyword">for</span>(b[<span class="number">6</span>]=<span class="number">0</span>; b[<span class="number">6</span>]&lt;<span class="number">4</span>; b[<span class="number">6</span>]++)&#123;</span><br><span class="line">                                <span class="keyword">for</span>(b[<span class="number">7</span>]=<span class="number">0</span>; b[<span class="number">7</span>]&lt;<span class="number">4</span>; b[<span class="number">7</span>]++)&#123;</span><br><span class="line">                                    <span class="keyword">for</span>(b[<span class="number">8</span>]=<span class="number">0</span>; b[<span class="number">8</span>]&lt;<span class="number">4</span>; b[<span class="number">8</span>]++)&#123;</span><br><span class="line">                                        <span class="keyword">for</span>(b[<span class="number">9</span>]=<span class="number">0</span>; b[<span class="number">9</span>]&lt;<span class="number">4</span>; b[<span class="number">9</span>]++)&#123;</span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">1</span>]&lt;<span class="number">2</span>)&#123; <span class="keyword">if</span>(b[<span class="number">4</span>]!=(b[<span class="number">1</span>]+<span class="number">2</span>)) <span class="keyword">continue</span>;&#125;</span><br><span class="line">                                            <span class="keyword">else</span> &#123;<span class="keyword">if</span>(b[<span class="number">4</span>]!=(b[<span class="number">1</span>]<span class="number">-2</span>)) <span class="keyword">continue</span>;&#125;</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">2</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">5</span>]!=b[<span class="number">1</span>]) || (b[<span class="number">1</span>]!=b[<span class="number">3</span>]) ||(b[<span class="number">5</span>]!=b[<span class="number">3</span>])|| (b[<span class="number">2</span>]==b[<span class="number">5</span>]) || (b[<span class="number">2</span>]==b[<span class="number">1</span>] ) || (b[<span class="number">2</span>]==b[<span class="number">3</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b[<span class="number">2</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">2</span>]!=b[<span class="number">1</span>]) || (b[<span class="number">1</span>]!=b[<span class="number">3</span>]) ||(b[<span class="number">2</span>]!=b[<span class="number">3</span>])|| (b[<span class="number">2</span>]==b[<span class="number">5</span>]) || (b[<span class="number">5</span>]==b[<span class="number">1</span>] ) || (b[<span class="number">5</span>]==b[<span class="number">3</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(b[<span class="number">2</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">5</span>]!=b[<span class="number">2</span>]) || (b[<span class="number">5</span>]!=b[<span class="number">3</span>]) ||(b[<span class="number">2</span>]!=b[<span class="number">3</span>])|| (b[<span class="number">2</span>]==b[<span class="number">1</span>]) || (b[<span class="number">5</span>]==b[<span class="number">1</span>] ) || (b[<span class="number">1</span>]==b[<span class="number">3</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">5</span>]!=b[<span class="number">1</span>]) || (b[<span class="number">1</span>]!=b[<span class="number">2</span>]) ||(b[<span class="number">5</span>]!=b[<span class="number">2</span>])|| (b[<span class="number">3</span>]==b[<span class="number">5</span>]) || (b[<span class="number">3</span>]==b[<span class="number">1</span>] ) || (b[<span class="number">2</span>]==b[<span class="number">3</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">3</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">0</span>] != b[<span class="number">4</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">3</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">1</span>] != b[<span class="number">6</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">3</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">0</span>] != b[<span class="number">8</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">5</span>] != b[<span class="number">9</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">4</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">7</span>] != b[<span class="number">4</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">4</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">4</span>] != b[<span class="number">3</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">4</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">4</span>] != b[<span class="number">8</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">4</span>] != b[<span class="number">6</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">5</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">7</span>] != b[<span class="number">1</span>]) || (b[<span class="number">7</span>]!=b[<span class="number">3</span>] ) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">5</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">7</span>] != b[<span class="number">0</span>]) || (b[<span class="number">7</span>]!=b[<span class="number">5</span>] ) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">5</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">7</span>] != b[<span class="number">2</span>]) || (b[<span class="number">7</span>]!=b[<span class="number">9</span>] ) ) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">7</span>] != b[<span class="number">4</span>]) || (b[<span class="number">7</span>]!=b[<span class="number">8</span>] ) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)&#123;</span><br><span class="line">                                                count[j]=<span class="number">0</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++)&#123;</span><br><span class="line">                                                count[b[j]]++;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            max = <span class="number">0</span>;</span><br><span class="line">                                            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                                                <span class="keyword">if</span> (count[j] &gt; max) &#123;max = count[j]; max_order = j;&#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                            min = <span class="number">10</span>;</span><br><span class="line">                                            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                                                <span class="keyword">if</span> (count[j] &lt; min) &#123;min = count[j]; min_order = j;&#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">6</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(( min_order != <span class="number">2</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">6</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(( min_order != <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">6</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(( min_order != <span class="number">0</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(( min_order != <span class="number">3</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">7</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(<span class="built_in">abs</span>((b[<span class="number">6</span>]-b[<span class="number">0</span>]))==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">7</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(<span class="built_in">abs</span>((b[<span class="number">4</span>]-b[<span class="number">0</span>]))==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">7</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(<span class="built_in">abs</span>((b[<span class="number">1</span>]-b[<span class="number">0</span>]))==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(<span class="built_in">abs</span>((b[<span class="number">9</span>]-b[<span class="number">0</span>]))==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">8</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">0</span>]==b[<span class="number">5</span>]) == (b[<span class="number">4</span>]==b[<span class="number">5</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">8</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">0</span>]==b[<span class="number">5</span>]) == (b[<span class="number">4</span>]==b[<span class="number">9</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">8</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">0</span>]==b[<span class="number">5</span>]) == (b[<span class="number">4</span>]==b[<span class="number">1</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">0</span>]==b[<span class="number">5</span>]) == (b[<span class="number">4</span>]==b[<span class="number">8</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">9</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((max-min)!=<span class="number">3</span> ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">9</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((max-min)!=<span class="number">2</span> ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">9</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((max-min)!=<span class="number">4</span> ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((max-min)!=<span class="number">1</span> ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                            <span class="comment">//printf("%d, %d, %d , %d ,max %c : %d ;  min %c : %d\n", count[0], count[1], count[2], count[3],max_order+test, max, min_order+test, min );</span></span><br><span class="line">                                            <span class="built_in">printf</span>(<span class="string">"final answer is :\n"</span>);</span><br><span class="line">                                            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">                                                <span class="built_in">printf</span>(<span class="string">"%c "</span>, (<span class="keyword">char</span>)(b[j]+test));</span><br><span class="line">                                            &#125;</span><br><span class="line">                                            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                                            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)&#123;</span><br><span class="line">                                                count[j]=<span class="number">0</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>正常解题思路</p></li></ul><p>本解法不需要高深的数学基础，不需要编程知识，只要能读懂题意，抓对方法，解题其实很快。<br>整个题干虽然都很虚，但巧妙利用阅读理解，可以推出很多信息。<br><img src="https://cdn.xiaofangdyd.cn/2018%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98/3.png" alt=""></p><p><strong>条件1：</strong>从第三题可以得出，2、3、4、6题里面，有3题的答案是相同的。<br><strong>条件2：</strong>从第10题可以得出，本试卷答案最多的字母，数字也不会超过5，且本试卷答案最少的字母，肯定小于2（为1或者0）（要想明白这个道理需要一定的逻辑能力）</p><p>这种逻辑题，一旦知道了3题的答案，极大概率就能推出其他答案。鉴于单选题的性质，挨个尝试就可以了。</p><p>1、若3选A，则2、4、6选项相同且不为A，条件1、2满足。<br>1.1、若2、4、6选B，进而推出5、7为D，不满足条件2，错。<br>1.2、若2、4、6选C，由2知5为A，由6知3、8、10为A，条件1、2满足。<br>1.2.1、由8知2、5、10与1答案字母相邻，2为C，5为A，10为A，所以1为B，条件1、2满足。<br>1.2.1.1、理到现在，只有7、9未知，由已知答案可得9为B，条件1、2满足。<br>1.2.1.1.1、最后，7选D，条件1、2满足。</p><p><strong>所以最终答案为：</strong><br><img src="https://cdn.xiaofangdyd.cn/2018%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98/4.png" alt=""></p><ul><li>总结：</li></ul><ol><li>不要相信无良媒体满嘴跑火车，天文科普就是被这群智障媒体弄得一直没起色。</li><li>要培养良好的阅读和推理能力。</li><li>要认识到这不是分散的10道选择题，而是1道整体的推理题。</li><li>一张纸，一只笔，解答事半功倍。</li><li>程序还有优化空间，比如可以把简单的if判断放前面，快速排查掉一些无用的条件。</li></ol><p>所以，@江苏网警，贵单位的刑侦科报道处怎么走？</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《新东方快车谋杀案》一部画面比剧情好看的推理电影</title>
      <link href="/%E3%80%8A%E6%96%B0%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%88%E3%80%8B%E4%B8%80%E9%83%A8%E7%94%BB%E9%9D%A2%E6%AF%94%E5%89%A7%E6%83%85%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%8E%A8%E7%90%86%E7%94%B5%E5%BD%B1/"/>
      <url>/%E3%80%8A%E6%96%B0%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%88%E3%80%8B%E4%B8%80%E9%83%A8%E7%94%BB%E9%9D%A2%E6%AF%94%E5%89%A7%E6%83%85%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%8E%A8%E7%90%86%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<p>在去年的朋友圈中，我才知道了这个广为人知的故事，这个曾经有过一版堪称经典的电影。直到今天，我才想起来欣赏。说实话，我之前并没有刻意搜索过这个故事，所以我会以一个新人的角度来欣赏这部作品。</p><a id="more"></a><p>在电影的开场，波洛吃早餐量鸡蛋，接着双脚踩屎，再后面用拐杖放倒逃犯，这一切都是在塑造波洛严苛到极致的形象，这种巧妙的安排让我们初识的观众可以很轻松的认识波洛。</p><p><img src="https://cdn.xiaofangdyd.cn/%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%881.jpg" alt="东方快车谋杀案1.jpg"></p><p>当本剧唯一大反派卡塞蒂变成盒子的时候，我才发现他是上了火车的杰克船长。在他被捅死之后，我还下意识觉得他会手上夹着一枚金币，突然跳起来说：“<strong>女士们先生们，你们将永远记住这一天，因为你们差点就捅死了杰克.斯派洛船长。</strong>”</p><p><img src="https://cdn.xiaofangdyd.cn/%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%882.jpg" alt="东方快车谋杀案2.jpg"></p><p>在中间的问询阶段，电影显得略显沉闷。尽管导演采用平行剪辑的手法加快节奏，刻意去增加的剧情的刺激性，但还是处理偏颇。<br><br><br>直到最后的揭秘，电影让所有人走出车厢，在隧道入口排一张长桌，十二名乘客齐聚，呈现《最后的晚餐》之态。晶莹白雪和幽邃黑洞之间，昏黄的灯火下，12名装作不认识的凶手。画面十分美好，可是在剧情上不是特别理想，感觉有点像为了实现《最后的晚餐》的镜头，又受制于车厢空间太小，而做出的无奈之举。</p><p><img src="https://cdn.xiaofangdyd.cn/%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%883.jpeg" alt="东方快车谋杀案3.jpeg"></p><p>最后波洛在说出了12人联合复仇的真相之后，掏出枪放在桌上说：“<strong>你们现在唯一的选择是杀了我，把我扔在冰湖里，因为我不会说谎。</strong>”然后女话剧演员不愿为了掩盖罪行而杀一个无辜的人，拿起枪自杀，发现枪里没子弹……这点我在思考很久后才明白，这是波洛给他们的一个测试。虽然他们杀的是一个十恶不赦的罪犯，但在侦探眼中，他们都参与了杀人，也应该为自己的行为承担责任，不然法律的威严何在？而女话剧演员自杀，让波洛知道，<strong>他们在自己生命受到威胁时，仍然不愿意为了掩盖罪行而杀掉一个无辜的人</strong>。这个举动才是波洛违背自己原则放过所有人的原因。</p><ul><li>脑洞</li></ul><p>最后波洛准备走出车厢时，电影的旁白说：“阿姆斯特朗少校，我终于可以给你回信了……“我忽然觉得<strong>波洛才是本案真正的幕后推手</strong>，为了确保谋杀可以顺利执行，波洛放下偏执和一个花花公子为友，才搭乘上这班列车。他亲临现场，每一个步骤后都开门检查走廊，用自己的推理，演出了戏中戏，为整个案情上了双保险，即使其他人搞砸了，有他最著名侦探的头衔在，最后也可以顺利圆回来。</p>]]></content>
      
      
      <categories>
          
          <category> 方方说 </category>
          
          <category> 电影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《月亮和六便士》----是否有个魔鬼抓住了他的灵魂？</title>
      <link href="/%E3%80%8A%E6%9C%88%E4%BA%AE%E5%92%8C%E5%85%AD%E4%BE%BF%E5%A3%AB%E3%80%8B-%E6%98%AF%E5%90%A6%E6%9C%89%E4%B8%AA%E9%AD%94%E9%AC%BC%E6%8A%93%E4%BD%8F%E4%BA%86%E4%BB%96%E7%9A%84%E7%81%B5%E9%AD%82%EF%BC%9F/"/>
      <url>/%E3%80%8A%E6%9C%88%E4%BA%AE%E5%92%8C%E5%85%AD%E4%BE%BF%E5%A3%AB%E3%80%8B-%E6%98%AF%E5%90%A6%E6%9C%89%E4%B8%AA%E9%AD%94%E9%AC%BC%E6%8A%93%E4%BD%8F%E4%BA%86%E4%BB%96%E7%9A%84%E7%81%B5%E9%AD%82%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>啃完了《月亮与六便士》，有种当头一棒的痛感。总是渴望找到一项东西，然后为之不管不顾、 为之疯狂。一潭死水的生活最是让人窒息 。最痛苦的事不是平衡地上的六便士和天上月亮的关系，而是当你想仰望，却压根没找到天上的月亮。<br><a id="more"></a></p><h4 id="摘录："><a href="#摘录：" class="headerlink" title="摘录："></a>摘录：</h4><ul><li><p>说这些豪言壮语的人可能还觉得他们在说一些前人未曾道过的真理，但是实际上连他们说话的腔调前人也已经用过一百次，而且丝毫也没有变化。钟摆摆过来又荡过去，这一旅程永远反复循环。</p></li><li><p>在那个时代谈话仍然被看作是一种需要下功夫陶冶的艺术，一句巧妙的对答比锅子底下噼啪爆响的荆棘更受人赏识，格言警句当时还不是痴笨的人利用来冒充聪敏的工具，</p></li><li><p>同情体贴本是一种很难得的本领，但是却常常被那些知道自己有这种本领的人滥用了。他们一看到自己的朋友有什么不幸就恶狠狠地扑到人们身上，把自己的全部才能施展出来，这就未免太可怕了<br>它使人想到一条平静的小河，蜿蜒流过绿茸茸的牧场，与郁郁的树荫交相掩映，直到最后泻入烟波浩渺的大海中。但是大海却总是那么平静，总是沉默无言、声色不动，你会突然感到一种莫名的不安。</p></li><li><p>有些人的生活只是社会有机体的一部分，他们只能生活在这个有机体内，也只能依靠它而生活，这种人总是给人以虚幻的感觉；</p></li><li><p>我决定第二天晚上再去找思特里克兰德，因为我本能地觉得，必须细致盘算，并选定这一时间去。如果想从感情上说动一个人，在午饭以前是很少会成功的。</p></li><li><p>只有诗人同圣徒才能坚信，在沥青路面上辛勤浇水会培植出百合花来。</p></li><li><p>有人说灾难不幸可以使人性高贵，这句话并不对；叫人做出高尚行动的有时候反而是幸福得意，灾难不幸在大多数情况下只能使人们变得心胸狭小、报复心更强。</p></li><li><p>他非常重感情，但是在他那很容易就被打动的感情里面却含有某种愚蠢的东西，让你接受了他好心肠的帮助却丝毫没有感激之情。向他借钱就好象从小孩儿手里抢东西一样；因为他太好欺侮，你反而有点儿看不起他。</p></li><li><p>有时候一个人的外貌同他的灵魂这么不相称，这实在是一件苦不堪言的事。</p></li><li><p>如果灵魂真能出窍的话，不论出什么代价我也得试一次；只有这样我才能在画室里看到他俩私下如何过活，才能听到他们交谈些什么。总之一句话，我没有可以供我的幻想力发挥作用的最小依据。</p></li><li><p>女人们不断为了爱情而自寻短见，但是一般说来她们总是做得很小心，不让自杀成为事实。通常这只是为了引起她们情人的怜悯或者恐怖而作的一个姿态。</p></li><li><p>护士用她那双宁静、慈祥的眼睛望着戴尔克，这双眼睛曾经看到过人世的一切恐怖和痛苦，但是因为那里面装的是一个没有罪恶的世界的幻景，所以她的目光是清澈的。</p></li><li><p>我们非常可怜地想把自己心中的财富传送给别人，但是他们却没有接受这些财富的能力。因此我们只能孤独地行走，尽管身体互相依傍却并不在一起，既不了解别的人也不能为别人所了解。</p></li><li><p>他的思想这时会平静地飘浮在九天之上，他对那个女人感到又嫌恶又可怕，也许那感觉就象一只翩翩飞舞于花丛中的蝴蝶，见到它胜利地蜕身出来的肮脏的蛹壳一样。</p></li><li><p>小丑的嘴唇在微笑，他的笑话越来越滑稽，因为在他逗人发笑的时候他更加感到自己无法忍受的孤独。</p></li><li><p>上帝的磨盘转动很慢，但是却磨得很细。</p></li></ul><h4 id="感想："><a href="#感想：" class="headerlink" title="感想："></a>感想：</h4><p>月亮代表高高在上的理想，而六便士代表平凡的现实。理想可能是遥不可及的悬在空中的月亮，而世俗的名誉财富却像六便士一样只要老老实实遵守社会规范努力工作，都是唾手可得的。主人公为了追求画画的理想而放弃了现实的世俗生活，虽然穷困潦倒几次濒临死亡，仍然不忘初心，最终虽然少有人见证到，但还是创造出了传世之作。<br>主人公本来是一个老实体面的经济工作者，有着稳定充足的收入，有幸福的家庭；但突然有一天，他决定放弃这种生活，去追寻自己的艺术。这种转折是毫无征兆的，他就像豁然开朗一般，无所顾忌地抛弃世俗的一切，去追寻自己的艺术理想。</p><blockquote><p>“我怀疑他的灵魂里是否深埋着某种创作本能，那种本能虽然受他的生活环境所抑制，却像肿瘤在活体器官中膨胀那样顽强地生长着，最终控制了他整个人，迫使他不由自主地采取行动。” </p></blockquote><p>前段时间一直在想，我们是不是真的能够看清自己内心所想所盼。我们所成为的人，到底是灵魂的决定还是外界的推动。生活在人群当中，不得不重视别人的看法和评价，不得不在心中住进一个卫兵，当有其他与普世价值相违背的想法冒出，卫兵本能的将其砍掉。可惜，抽刀断水，也许我不明白有什么不对，但始终觉得意难平。<br>我忽然想到了顺治，万里河山，说走就走。</p><p> 连最至高无上的权利，都阻挡不了内心的渴望。</p><p> 尼采为什么会疯</p><p> 梵高为什么割掉耳朵</p><p> 海明威为什么自杀</p><p> 追逐梦想就是追逐自己的厄运，在满地都是六便士的街上，他抬起头看到了月光。可能他想通了这一切，才能踩在六便士上，赏着月光，衣衫褴褛，食不果腹。    </p><p> 是否有个魔鬼抓住了他的灵魂？让他只能俯首称臣。     </p><p> 那些命中注定的狂热，对抗卫兵的勇气，最终让他内心安宁。</p><p> 所有的热爱，在投身于其中的时候，已经得到了最大的报酬，而是否有所认可与收获，都应当处之泰然。</p><p> 主人公为什么最后选择烧掉他那画有惊世之作的屋子，因为最丰腴的愉悦感，已经在创作的时候产生，任他人看与不看，都与我何干？</p>]]></content>
      
      
      <categories>
          
          <category> 方方说 </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Typecho!</title>
      <link href="/Hello-Typecho/"/>
      <url>/Hello-Typecho/</url>
      
        <content type="html"><![CDATA[<p>这是由Typecho创建的文章！<br>当然这是一篇初始页，也代表着我的博客迎来了一次翻天覆地的改变，虽然以前的博客已经 <del>迁移到<a href="http://xiaofangdyd.tech" target="_blank" rel="noopener">xiaofangdyd.tech</a>上</del> 关闭，就让那些过去的就过去吧！<br>更新记录：</p><ul><li>博客迁移至<del>洛杉矶、北京</del>Github服务器。（2019.01.29）</li><li>使用七牛oss托管图床（2019.01.29）</li><li>域名备案</li><li><del>博客程序从Wordpress更换为Typecho轻量级博客框架。</del></li><li>博客采用hexo框架</li><li>尽量用Markdown格式将之前的文章转移过来。</li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typecho </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《雪国列车》--很多精彩，很多遗憾</title>
      <link href="/%E3%80%8A%E9%9B%AA%E5%9B%BD%E5%88%97%E8%BD%A6%E3%80%8B-%E5%BE%88%E5%A4%9A%E7%B2%BE%E5%BD%A9%EF%BC%8C%E5%BE%88%E5%A4%9A%E9%81%97%E6%86%BE/"/>
      <url>/%E3%80%8A%E9%9B%AA%E5%9B%BD%E5%88%97%E8%BD%A6%E3%80%8B-%E5%BE%88%E5%A4%9A%E7%B2%BE%E5%BD%A9%EF%BC%8C%E5%BE%88%E5%A4%9A%E9%81%97%E6%86%BE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.xiaofangdyd.cn/%E9%9B%AA%E5%9B%BD%E5%88%97%E8%BD%A6.jpeg" alt="雪国列车.jpeg"><br>《雪国列车》是我非常喜欢的一部电影，将人类文明史浓缩在一节节车厢里面，凭依上帝视角进行审视。<br><a id="more"></a></p><ul><li>列车<ol><li>尾部车厢，象征着阶级社会最底层的劳动者，最为凄惨。</li><li>蛋白质块生产车厢，象征着给底层社会提供生活最低保障品的最下服务阶层。</li><li>维护列车秩序的军队，象征着国家的暴力机器，他们在最底层的边缘。</li><li>植物区，水族馆等，象征着技术劳动者的中间阶层，相对于底层而言待遇稍好，但对社会变革无所适从，他们既服从于统治阶层的权威，又对底层劳动者怀有同情与恐惧。</li><li>高级乘客车厢，象征着腐朽的统治阶级，越往车头走，堕落的越彻底。</li><li>引擎车厢，象征着阶级社会的最高统治者，一直控制着人类社会方向的最少数人。</li></ol></li></ul><p><strong>“车就是世界，我们就是全人类。”</strong></p><ul><li>电影中，人们藏起武器，害怕给小孩不良的印象；而和蔼可亲的怀孕女老师，却当着学生的面悍然拔枪杀人，分发新年礼物貌似慈善的仆人，其实是大屠杀的执行者，隐喻的意思不言自明。</li><li>电影中，儿童象征着人类的未来。有三种儿童，一种是底层劳动者中倔强生存的儿童；一种是权贵阶层被深度洗脑的儿童；第三种是最终被当成列车零件，机械化地维护阶级社会秩序的儿童。这也正象征着人类的三种未来。</li><li>火在电影中有许多次应用。一次是照亮黑暗的火炬，一次是点燃炸药的火种。《无人区》的一句话特别适合用在这里<br>“我认为人类和动物的区别不是放弃自私，而是人类会使用火”</li><li>虽然整部电影的剧情匪夷所思，但最终火车还是被炸掉了，大家一起翘辫子了。自由和平等的代价是巨大的，不自由毋宁死，要死也要一起死。</li><li>整个影片结束了，据说这个片子赞颂了革命精神，弘扬了马列主义价值观，可我看到的却是一群阶级底层人民的不满，不满是由于物质的分配不均，分配不均是因为阶级产生，阶级产生是由于人的控制欲和占有欲，因为人有欲望，每个人都会对自身所拥有的不满。</li><li>叔本华曾经说过，人得到了就空虚，人得不到就痛苦，人一生就生活在空虚和痛苦之中。尽管物质的丰富只能带来暂时的快乐，这道理人人都懂，但却总忍不住想要得到更多，因为这种欲望是与生俱来的，不去占有更多物质的人早就在远古时期就已经灭绝了，所有生存至今的人类，基因代码里就写下了一句话：“我要得到更多”。</li><li>说到底，一句话“因乘客对列车食品不满，酿成火车出轨特大事故”。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 方方说 </category>
          
          <category> 电影 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的100 = 100，但1000≠1000？</title>
      <link href="/Java%E4%B8%AD%E7%9A%84100-100%EF%BC%8C%E4%BD%861000%E2%89%A01000%EF%BC%9F/"/>
      <url>/Java%E4%B8%AD%E7%9A%84100-100%EF%BC%8C%E4%BD%861000%E2%89%A01000%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>如果我们在Java中运行一段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">100</span>, b = <span class="number">100</span>;</span><br><span class="line">System.out.println(a == b);</span><br><span class="line">Integer c = <span class="number">1000</span>, d = <span class="number">1000</span>;</span><br><span class="line">System.out.println(c == d);</span><br></pre></td></tr></table></figure></p><p>你会得到：<br><code>true<br>false</code><br><a id="more"></a><br>首先，先说明，Java是面向对象的编程语言，一切都是对象，但是为了编程的方便还是引入了基本数据类型，为了能够将这些基本数据类型当成对象操作，Java为每一个基本数据类型都引入了对应的包装类型（wrapper class），int的包装类就是Integer，从Java 5开始引入了自动装箱/拆箱机制，使得二者可以相互转换，对应如下：</p><table><thead><tr><th>原始类型</th><th>boolean</th><th>char</th><th>byte</th><th>short</th><th>int</th><th>long</th><th>float</th><th>double</th></tr></thead><tbody><tr><td>包装类型</td><td>Boolean</td><td>Character</td><td>Byte</td><td>Short</td><td>Integer</td><td>Long</td><td>Float</td><td>Double</td></tr></tbody></table><p><strong>所以最根本的一点区别就是</strong>：int的初始值是0，integer的初始值是null；<br>其他还有一些显著的区别就是：</p><ul><li>Integer变量必须实例化后才能使用，而int变量不需要。</li><li>Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值 。</li></ul><p>下面再看几个例子来说明两者的区别：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">128</span>;</span><br><span class="line">Integer i2 = <span class="keyword">new</span> Integer(<span class="number">128</span>);</span><br><span class="line">Integer i3 = <span class="number">128</span>;</span><br><span class="line">System.out.println(i1 == i2);</span><br><span class="line">System.out.println(i1 == i3);</span><br></pre></td></tr></table></figure></p><p><strong>结果均为true</strong>，因为包装类Integer在和int进行比较时，无论Integer变量是否为new生成，Integer会自动拆箱成int类型，变成两个int类型比较，所以只要两者数值相等，结果都为true。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i3 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">Integer i4 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">System.out.println(i3 == i4);</span><br></pre></td></tr></table></figure></p><p><strong>结果为false</strong>，我们知道，如果两个引用指向同一个对象，用 = =表示他们是相等的；如果两个引用指向不同的对象，即使他们内容相同，但用= =表示他们是不相等的。由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i5 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">Integer i6 = <span class="number">100</span>;</span><br><span class="line">System.out.println(i5 == i6);</span><br></pre></td></tr></table></figure></p><p><strong>结果为false</strong>，因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同。</p><p>对于非new生成的Integer变量，编译时会调用valueOf()函数,例如：<br><code>Integer i = 100;</code><br>编译时就会被翻译成：<code>Integer i = Integer.valueOf(100)</code></p><p>而Java API中对Integer类型的valueOf定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)&#123;</span><br><span class="line"><span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>java对于<strong>-128</strong>到<strong>127</strong>之间的数，会进行缓存，Integer i = 127时，会将127进行缓存，下次再写Integer j = 127时，就会直接从缓存中取，就不会new了。</p><p>最后再回到开始的那个代码中，a,b的值为100，在-128到127之间，因此它们指向了同一个对象，结果就为true；<br>c,d的值在-128到127的范围之外，编译时依然调用的是new Integer()，但存放在常量池（方法区）中，因此结果就为false。</p><p>至于为什么需要缓存，理由就是，在此范围内的“小”整数使用率比范围外的“大”整数要高，因此，使用相同的底层对象是有价值的，可以减少潜在的内存占用。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>无论如何，Integer与new Integer不会相等。不会经历拆箱过程，new出来的对象存放在堆，而非new的Integer常量则在常量池（在方法区），他们的内存地址不一样，所以为false。</li><li>两个都是非new出来的Integer，如果数在-128到127之间，则是true,否则为false。因为java在编译Integer i2 = 128的时候,被翻译成：Integer i2 = Integer.valueOf(128);而valueOf()函数会对-128到127之间的数进行缓存。</li><li>两个都是new出来的,都为false。因为内存地址不一样。</li><li>int和Integer(无论new否)比，只要数值相同，结果都为true，因为会把Integer自动拆箱为int再去比。</li></ol><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://blog.csdn.net/chenliguan/article/details/53888018" target="_blank" rel="noopener">Java基础之int和Integer有什么区别</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Integer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅过生活</title>
      <link href="/%E4%BC%98%E9%9B%85%E8%BF%87%E7%94%9F%E6%B4%BB/"/>
      <url>/%E4%BC%98%E9%9B%85%E8%BF%87%E7%94%9F%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<p>对我而言，我所向往的大学生活就是：</p><p>该上课就去上课，想逃课也可以逃课；<br>该吃饭就去吃饭，想打球就去打球；<br>该学习就学习，该聊天就聊天；<br>爱睡懒觉就睡懒觉，决定早起就早起。</p><p>面对每一件事，在某种法律规则之内，不管喜不喜欢，强不强迫，<strong>专心的投入的出色的做</strong>。<br><a id="more"></a><br>而不是<br>上课的时候听不进去，想逃课又怕老师点名，只能趴在桌子上玩游戏；<br>逃课的时候担心老师点名，陪着笑脸发讯息给朋友“老师点名了帮我签到啊，谢谢。”<br>该吃饭的时候，放不下手中正忙的事，等忙完之后，匆匆跑去食堂只有剩饭剩菜；<br>想吃零食吃辣条又担心长痘和地沟油，吃完以后喝一缸水排毒；<br>想谈恋爱又开不了口，等着对方先说，结果刷微博发现对方发了一条和别人在一起的消息，只能握着屏幕咬碎钢牙点一个赞；<br>学习的时候想着刷朋友圈刷微博，想着晚上玩什么游戏怎么玩，一下午看几页书，还是绪论；<br>聊天和社团活动的时候心里想的是这话唠净浪费我时间，给我两个小时我都能复习完半本书了。</p><p>很多事情做不好的根源，在于“分心”二字，所谓分心，就是</p><blockquote><p>时时刻刻，希望以最短的时间，博取最多的存在感，优越感和自我认同。 ————张佳玮</p></blockquote><p>也就是“浮躁”。</p><p>我想，在正确的时间里，用正确的方法，专心投入地做正确的事，大学生活已经算是十分优雅了。<br><img src="https://cdn.xiaofangdyd.cn/%E4%BC%98%E9%9B%85%E8%BF%87%E7%94%9F%E6%B4%BB.jpg" alt="优雅过生活.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> 方方说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2进制转高进制压缩长度--《天才枪手》观后感</title>
      <link href="/2%E8%BF%9B%E5%88%B6%E8%BD%AC%E9%AB%98%E8%BF%9B%E5%88%B6%E5%8E%8B%E7%BC%A9%E9%95%BF%E5%BA%A6-%E3%80%8A%E5%A4%A9%E6%89%8D%E6%9E%AA%E6%89%8B%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
      <url>/2%E8%BF%9B%E5%88%B6%E8%BD%AC%E9%AB%98%E8%BF%9B%E5%88%B6%E5%8E%8B%E7%BC%A9%E9%95%BF%E5%BA%A6-%E3%80%8A%E5%A4%A9%E6%89%8D%E6%9E%AA%E6%89%8B%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.xiaofangdyd.cn/tiancaiqiangshou1.png" alt="天才枪手"><br>天才枪手这部剧中，女主角提到的stic考试作弊计划之所以要引入“班克”参加，说是因为她背不下来50多道选择题，可以说间接导致了整个计划的失败。但是我突然想到，如果将ABCD四个选项整合为2进制，用00,01,10,11来代替，这样50多道选择题就会变成一个100多位由0和1组成的数。然后我们对这组数进行压缩处理，就会使长度逐渐变小，最终会相对容易记住并且被发现也基本不会被认为是在传答案。<br><a id="more"></a><br>例如，我可以将4位2进制数分为一组，可以对应一个16进制的数（0-g），这样相当于，每两个答案可以合并为一个数字或字母，这样50多个答案会被压缩为20-30位字符，相当于将长度压缩为原来的1/2。女主正好可以记下。并且，在进行短暂的练习之后，可以保证看见两个选项立即写出对应的16进制字符（我就可以，hhhhh）。<br>为什么不转换为更高位数的数字，我的解释是，效率不高。简而言之就是，转换为更高的位数并不能对字符的长度进行更加高效的压缩。2个选项有16种变化正好对应16个字符，而3个选项有64种变化，与之对应的是64进制，64进制包括了26个字母的大小写和0-9十个数字，以及“+”和“/”两个符号，转换的过程会花费大量的时间，并且字母的大小写记忆起来并不容易。<br>我在开始想这个问题的时候，写了2转10再转36进制的字符位数，可以看出，最后依然为20多位，并且转换的过程相当复杂，并不适合考试这种环境。<br>我可以对这100多位2进制数分组，每12个数为一组，将其转换为10进制，就会得到一个4位数（都选D时最大为4095），这样进行一次压缩之后，100多位数会变为30多位十进制的数，再将十进制的数字转换为36进制，以26个大写英文字母及0-9十个数字代替，每三组4位数为一大组转换为一个8位数（最大值为58523YLR），这样50多道选择题会被压缩为一个20位左右的数字加字母的组合。<br>至于为什么这种方法没有比16进制取得更好的压缩效果，我的想法是：在这个举例中，并没有很好的利用进制内的所有数字，例如，在10进制中，最大只用到了4095，还有一大半的数字没有用上，在36进制中，更有6/7的排列没有用上，导致了压缩效率低下。如果按照上文充分利用高进制的排列组合，使用64进制，50多个选项就可以被压缩为17位左右。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>2进制数转高进制压缩时，要尽量多利用到高进制中的排列顺序，这样的压缩效率才会提高。</li><li>在计算机中，存在将2进制数压缩为64进制的形式，称为base64编码，Base64是网络上最常见的用于传输8Bit字节码的编码方式之一。</li><li>考试作弊是不对的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 方方说 </category>
          
          <category> 电影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 天才枪手 </tag>
            
            <tag> base64编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu16.04的vps上安装搭建ftp</title>
      <link href="/%E5%9C%A8ubuntu16-04%E7%9A%84vps%E4%B8%8A%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAftp/"/>
      <url>/%E5%9C%A8ubuntu16-04%E7%9A%84vps%E4%B8%8A%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAftp/</url>
      
        <content type="html"><![CDATA[<p>由于身边设备包含种类过多，有Windows、Ubuntu、Android、iOS，有时候想要在四台设备间同步ppt，pdf，或者在Windows和Ubuntu上切换编译环境时用u盘拷贝文件步骤过于繁琐，且现有的一台服务器还没能充分利用资源，便萌生了在vps上再搭建一个ftp服务器的想法。<br>我对于ftp服务器的要求就是：有一定安全性，禁止匿名访问，尽量走加密通道传输，使用账户密码登录<br>然而百度上的教程经过我的测试大都不靠谱，于是自己Google摸索了一晚，找到了适合自己的搭建ftp的方法，在此分享并作为自己的备份。<br><a id="more"></a></p><h2 id="1、安装vsftpd软件"><a href="#1、安装vsftpd软件" class="headerlink" title="1、安装vsftpd软件"></a>1、安装vsftpd软件</h2><p>流行的FTP服务器端软件有：PureFTP，vsftpd,ProFTPD。考虑到租的服务器性能不高，我采用了轻量并且坑少的vsftpd。命令如下：<br><code>sudo apt update<br>sudo apt install vsftpd</code><br>安装完成后，需要对其进行一定的设置来使用。<br><figure class="highlight plain"><figcaption><span>vi</span><a href="/etc/vsftpd.conf```">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">取消下列行首的#注释</span><br><span class="line">```write_enable=YES```（允许用户在ftp中的写入操作）</span><br><span class="line">```local_umask=022```（为用户增加相应的读写权限）</span><br><span class="line">```chroot_local_user=yes```（阻止访问除了用户文件夹意外的文件夹）</span><br><span class="line">在文件的末尾添加下列语句来开启消极模式：</span><br><span class="line">&lt;code&gt;</span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line">pasv_enable-YES</span><br><span class="line">pasv_min_port=40000</span><br><span class="line">pasv_max_port=40100&lt;/code&gt;</span><br><span class="line">之后保存退出编辑，重启vsftpd服务</span><br><span class="line">```service vsftpd restart</span><br></pre></td></tr></table></figure></p><p>这时，ftp服务器就可以使用了，但是在21端口使用ftp登录是非常危险的，即使使用了账户密码，但传输文件很容易会被劫持，因此我在Google之后选择使用更为安全的sftp。</p><h2 id="2、安装配置sftp"><a href="#2、安装配置sftp" class="headerlink" title="2、安装配置sftp"></a>2、安装配置sftp</h2><p>sftp使用的是ssh文件传输协议，需要安装openssh-server,一般的vps服务器都预先安装过。安装过就可以跳过这一步。安装命令如下：<br><figure class="highlight plain"><figcaption><span>apt install openssh-server```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">安装完成之后我们需要为ftp新建一个用户。</span><br><span class="line">为了以后可能会添加用户，这里就创建一个ftpaccess用户组。</span><br><span class="line">```sudo groupadd ftpaccess</span><br></pre></td></tr></table></figure></p><p>然后需要在/etc/ssh/sshd_config中修改一些参数。<br><figure class="highlight plain"><figcaption><span>vi</span><a href="/etc/ssh/sshd_config```">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">找到 **PasswordAuthentication**参数，若其=no，则将其注释掉，若为yes，就不用管。</span><br><span class="line">找到 **Subsystem sftp /usr/lib/openssh/sftp-server**将其注释掉。</span><br><span class="line">在文件最后添加下列语句：</span><br><span class="line">&lt;code&gt;Subsystem sftp internal-sftp</span><br><span class="line">Match group ftpaccess</span><br><span class="line">ChrootDirectory %h</span><br><span class="line">X11Forwarding no</span><br><span class="line">AllowTcpForwarding no</span><br><span class="line">ForceCommand internal-sftp</span><br><span class="line">&lt;/code&gt;</span><br><span class="line">之后重启ssh服务</span><br><span class="line">```service ssh restart</span><br></pre></td></tr></table></figure></p><p>下面开始创建访问sftp服务的用户<br>创建用户xiaofangdyd,属于ftpaccess组<br><code>sudo useradd -m xiaofangdyd -g ftpaccess -s /usr/bin/nologin</code><br>(其中使用/usr/bin/nologin脚本来阻止ftp用户访问bash脚本，增加安全性)<br><code>sudo passwd xiaofangdyd</code><br>(设置密码)<br><code>sudo chown root /home/xiaofangdyd</code><br>(为相应文件夹赋予root权限)<br>开启nologin脚本的开机访问<br><code>sudo vi /etc/shells</code><br>在最后添加如下行：<br><code>/usr/bin/nologin</code><br>最后在home文件夹创建一个用于下入文件的文件夹，并修改文件夹的所有者<br><code>mkdir /home/xiaofangdyd/files<br>sudo chown xiaofangdyd:ftpaccess /home/xiaofangdyd/files</code><br>现在就可以通过sftp来向files文件夹上传并下载文件了。</p><p>在Windows和Linux操作端，推荐使用<strong>filezilla客户端版</strong>（filezilla Client）对ftp服务器进行访问。因为首先fz提供了对sftp登录的支持，最重要的是，由于简体中文版的Windows系统因为国家规定使用的是GBK字符编码，在ubuntu服务器以及linux上，默认使用的是utf-8全球通用编码，编码不同会导致中文文件名乱码。因此需要在fz中开启强制使用utf-8编码，才能保证文件之间的稳定传输。<br>在iOS上，我使用的是FtpManager，同样使用sftp登录，强制使用utf-8字符编码。<br>在Android上,我使用的是AndFTP，设置同上。</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ftp </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017.11.26今天要考线代</title>
      <link href="/2017-11-26%E4%BB%8A%E5%A4%A9%E8%A6%81%E8%80%83%E7%BA%BF%E4%BB%A3/"/>
      <url>/2017-11-26%E4%BB%8A%E5%A4%A9%E8%A6%81%E8%80%83%E7%BA%BF%E4%BB%A3/</url>
      
        <content type="html"><![CDATA[<p>昨天是星期六，心中怀揣着对线性代数的恐惧和室友泡了一天的图书馆……下午一个人出来的时候突然觉得好冷，好像每次从图书馆走出来都是这样的吧。</p><p>吃完饭回图书馆之前，溜去校外买了一杯抹茶，旁边的小女孩看着我和大人说：“他在一个人买奶茶。”瞬间觉得抹茶好苦啊。</p><p>可能每个人一生中都会有那么一段，需要一个人度过的时光，在这段时光里，我们会学会与自己相处，去了解自己，认识自己，认识这个世界。</p><a id="more"></a><p>路上看到夕阳和一棵树共同构成了一幅异常和谐的场面，兴高采烈想要分享出去，打好了字配好了图，在打算发送状态的那一刻，又退出了状态发送。就当没看到过这棵树吧。</p><p>走在路上发现，听歌时没谁可想，空空落落的，也不是件好事。</p><p>现在想想，为什么上了大学，人们开始拼命寻找恋人，拉帮结派，还不是因为大家都孤独。</p><p>我走到阳台，吸着雾霾看天。<br>繁星漫天，远处零散的几处霓虹灯。<br>我想着自己，突然有点想哭。<br>又过了一会，一阵风吹来。<br>吹来一大片云，关掉了天上的星灯。<br>学校的路灯早已熄灭，漆黑的夜里更加漆黑。<br>也许它认为城市应该睡觉了，但是我还醒着。<br><img src="https://cdn.xiaofangdyd.cn/xiandai1.gif" alt="alone.gif"></p><p>在微博上看到这张图片，刚开始觉得这真是一个热爱生活自娱自乐的狗子。<br>但细想这不就是孤独吗，一个人扮演两个人角色。<br>现实有很多人跟这只狗狗一样，狗狗表现在肢体，我们表演在内心。</p><p>站在汹涌的人群中，看着人家两人嬉闹打笑。<br>我捂着嘴巴看完，生怕发出一声狗叫。<br>窗内灯光柔软 爱意浓浓， 窗外寒风凌厉，形单影只。<br>外面太冷了，衣服有点单薄，我想回家了。</p>]]></content>
      
      
      <categories>
          
          <category> 方方说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法--睡眠排序、面条排序、猴子排序 (非常严肃)</title>
      <link href="/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F%E3%80%81%E9%9D%A2%E6%9D%A1%E6%8E%92%E5%BA%8F%E3%80%81%E7%8C%B4%E5%AD%90%E6%8E%92%E5%BA%8F-%E9%9D%9E%E5%B8%B8%E4%B8%A5%E8%82%83/"/>
      <url>/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F%E3%80%81%E9%9D%A2%E6%9D%A1%E6%8E%92%E5%BA%8F%E3%80%81%E7%8C%B4%E5%AD%90%E6%8E%92%E5%BA%8F-%E9%9D%9E%E5%B8%B8%E4%B8%A5%E8%82%83/</url>
      
        <content type="html"><![CDATA[<p>常见的排序算法–诸如快排、堆排或归并等——都是基于比较的，除了这种正统意义上的排序算法，最近了解了几种令人啼笑皆非的排序算法，与大家分享一下。<br><a id="more"></a></p><h2 id="1、睡眠排序（sleep-sort）"><a href="#1、睡眠排序（sleep-sort）" class="headerlink" title="1、睡眠排序（sleep sort）"></a>1、睡眠排序（sleep sort）</h2><p>这个算法可以说算是最强大的排序算法，他的时间复杂度为O(n)，空间复杂度为0 ！时间复杂度完爆了quick sort，空间复杂度完爆了hash，而且还是稳定的。<br>c代码实现如下：<br><img src="https://cdn.xiaofangdyd.cn/paixu1.jpeg" alt="sleep_sort.jpeg"><br>原理主要是利用多线程，把接受的每一个参数分别放在不同的线程里面并在每个线程同时使用sleep函数，sleep的时间就是参数的值，这样的话利用“数值大的参数的线程sleep的时间更长”这个事实，数字小的值就被先打印出来了，从而达到从小到大排序的目的。简单来说就是对于[1,3,6,10]这个数组，让计算机在第1s输出1，在第3s输出3，第6s输出6，第10s输出10。<br>不过这个方法有个致命的缺点，就是如果被排序的数字很大的话，花的时间也比较多。以提供的代码为例，如果参数是3, 1, 10000的话，那么输出结果在第一秒会输出1，第三秒会输出3，但是要在10000秒时才能输出10000。为了提高速度可以按比例缩短时间，比如把sleep那句改成sleep(this/10000)，但是也不能无限制缩小时间，<strong>当睡眠时间小于开启多线程的时间时</strong>，就会出现乱序。<br>当然上面这段代码很粗略，有很多问题还没解决。比如：</p><ol><li><del>搞不定负数</del>。（可以用一个恒正的函数将输入映射成时间）</li><li><del>输入相近的数会有误差</del>。（可以乘个适当的系数，放大数据间的差）</li><li>当输入的数据很多时，这些线程不能看作是同时启动的等等。</li></ol><h2 id="2、面条排序（Spaghetti-Sort）"><a href="#2、面条排序（Spaghetti-Sort）" class="headerlink" title="2、面条排序（Spaghetti Sort）"></a>2、面条排序（Spaghetti Sort）</h2><p>意大利面条排序(Spaghetti Sort)的思路是，将输入分别对应到不同长度的面条上，每根面条的长度即为对应的数字的大小。比如，对于[1, 4, 2, 8, 9]这个输入，则分别做出长度为1cm、4cm、2cm、8cm、9cm的面条。然后，将这些面条的一头对齐，用手抓住，另一头向下。然后慢慢地将手向下垂直下降，第一个触碰到桌面的面条对应的数字则为最大的数字，第二个触碰到的就是第二大的，依次类推，代码没找到…看起来挺简单的，和睡眠排序差别不大，就不写了….</p><h2 id="3、猴子排序（Bogo-Sort）"><a href="#3、猴子排序（Bogo-Sort）" class="headerlink" title="3、猴子排序（Bogo Sort）"></a>3、猴子排序（Bogo Sort）</h2><p>如下关于猴子排序(Bogo Sort)的描述摘自维基百科：</p><blockquote><p>在计算机科学中，Bogo排序（Bogo-Sort）是个既不实用又原始的排序算法，其原理等同将一堆卡片抛起，落在桌上后检查卡片是否已整齐排列好，若非就再抛一次。其名字源自Quantum bogodynamics，又称bozo sort、blort sort或猴子排序（参见无限猴子定理）。</p></blockquote><p>所谓无限猴子定理，即是：让一只猴子在打字机上随机地按键，当按键时间达到无穷时，几乎必然能够打出任何给定的文字，比如莎士比亚的全套著作。</p><p>猴子排序也是一样，原理就是随机打乱数组，检查是否排好序，若是，则输出，否则再次打乱，再检查……最佳情况的复杂度为O(n)，平均O(n*n!)，最坏可执行到世界末日。<br>c++代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;//random需要的头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">103</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Ordered</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!Ordered()) &#123;</span><br><span class="line">        random_shuffle(a, a + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，这种排序算法，基本大家就在吹牛的时候说说就好了，写在代码里，基本上就是分分钟被打死的后果。</p><h3 id="3-1、量子猴排-Quantum-Bogo-Sort"><a href="#3-1、量子猴排-Quantum-Bogo-Sort" class="headerlink" title="3.1、量子猴排(Quantum Bogo Sort)"></a>3.1、量子猴排(Quantum Bogo Sort)</h3><p>量子猴排可以算是概念上对猴子排序的一种优化：洗牌的时候，使用量子化随机排列。这样的话，我们在观测这组数之前，这组数的状态是叠加的，参照薛定谔的猫。通过这种量子化随机排列，我们划分出来了个平行宇宙。接下来，在某个宇宙A中，观测一下这组数，发现运气不好，没有排序好，那么我们就销毁掉这个宇宙。然后再看看其他宇宙的运气怎么样。终于，在一个宇宙Z中，发现刚好是排好序的数组。那么我们就保留这个宇宙。最后，没有被销毁的宇宙中，数组都是恰好一次被排好序的。<br><img src="https://cdn.xiaofangdyd.cn/paixu2.jpg" alt="量子猴排.jpg"><br>对了，量子猴排的时间复杂度是O(n)！</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 睡眠排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在服务器端使用一键安装ss脚本及线路优化</title>
      <link href="/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85ss%E8%84%9A%E6%9C%AC%E5%8F%8A%E7%BA%BF%E8%B7%AF%E4%BC%98%E5%8C%96/"/>
      <url>/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85ss%E8%84%9A%E6%9C%AC%E5%8F%8A%E7%BA%BF%E8%B7%AF%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h2><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">常规版Windows客户端</a></p><p><a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases" target="_blank" rel="noopener">ShadowsocksR版Windows客户端</a></p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p>为了能有一个稳定的上网环境，以及某件事情的影响，萌生了想自己搭梯子的想法。最近的一个月一直在恶补这方面的知识，并自己动手实践，对shadowsocks的使用才初步入门，知道了在服务器端安装ss客户端的方法，总结下来，最为简单易用的是秋水逸冰的一键安装脚本<br><a id="more"></a><br>本脚本适用于CentOS 6，7，Debian，Ubuntu系统，ss客户端对硬件资源的要求并不高，因此在选择服务器时如果没有其他需求的话，只用考虑网络带宽以及流量问题，这里需要注意的是，搭建的服务器相当于是本地访问和网站之间的桥梁，网站的数据包会先下载到服务器上，然后由服务器上传到本地客户端中，因此，<strong>服务器端使用的流量是本地流量的2倍</strong>，就好比你在购买服务器时，网站提示一个月有1000g的流量限制，当你在youtube上看500g的视频后，你的服务器端1000g流量其实已经用完了。<br>服务器的购买并没有固定的推荐，每个地区的网络不同，运营商不同都会导致网速的差异，因此选择一个好的服务器很重要。我所在的西安电信使用digitalocean上提供的sfo的ubuntu服务器实测下载峰值可以达到2m/s，其他地区未知。购买及连接方法日后再谈，今天主要想记录下服务器的配置及优化。<br>本文使用的是秋水逸冰的一键安装脚本，当在本地使用ssh命令（linux及mac os）或者xshell5（windows）连接上服务器的root用户后，依次运行以下3条命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure></p><p>之后脚本便自动执行，首先选择安装shadowsocks的版本，默认的1是常规，还有一个shadowsocksR版可供选择。<br>然后脚本会提示进行shadowsocks的基本参数设置<br>第一次是设置密码（如不设定，默认为 teddysun.com）<br>然后是服务器端口（如不设定，默认为 8989）<br>最后是选择加密方式（如不设定，默认为 aes-256-gcm）<br>加密方式我一般选择为第7个 aes-256-cfb（因为其支持的客户端相对较多一点）<br>安装完成后，脚本会提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, Shadowsocks-python server install completed!</span><br><span class="line">Your Server IP :your_server_ip</span><br><span class="line">Your Server Port :your_server_port</span><br><span class="line">Your Password :your_password</span><br><span class="line">Your Encryption Method:your_encryption_method</span><br><span class="line"></span><br><span class="line">Welcome to visit:https://teddysun.com/342.html</span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><p>这时可以记下ip 远程端口 和密码在shadowsocks客户端上使用了。<br>为了充分发挥服务器的网络性能，就需要对服务器的网络进行优化，最近Google 开源了其TCP BBR拥塞控制算法，并提交到了Linux内核。从4.9开始，Linux 内核已经用上了该算法。经过上机测试，有些机器的网速甚至可以提升好几个数量级。本次更新内核及开启bbr算法依旧使用的是秋水逸冰的脚本。<br>在服务器root用户下，使用命令：</p><figure class="highlight plain"><figcaption><span>--no-check-certificate</span><a href="https://github.com/teddysun/across/raw/master/bbr.sh" target="_blank" rel="noopener">&& chmod +x bbr.sh && ./bbr.sh```</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。</span><br><span class="line">重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：</span><br><span class="line">```uname -r</span><br></pre></td></tr></table></figure><p>查看内核版本，如果显示在4.13及以上说明ok了。这时服务器端的ss已经配置优化完成，<strong>脚本默认开启了ss的开机启动</strong>，因此服务器重启也不会有影响。</p><h2 id="卸载："><a href="#卸载：" class="headerlink" title="卸载："></a>卸载：</h2><p>在root用户下，使用命令<br><figure class="highlight plain"><figcaption><span>uninstall```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 使用命令：</span><br><span class="line">启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</span><br><span class="line">Shadowsocks-Python 版：</span><br><span class="line">```/etc/init.d/shadowsocks-python start | stop | restart | status</span><br></pre></td></tr></table></figure></p><p>ShadowsocksR 版：<br><figure class="highlight plain"><figcaption><span>start | stop | restart | status```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Shadowsocks-Go 版：</span><br><span class="line">```/etc/init.d/shadowsocks-go start | stop | restart | status</span><br></pre></td></tr></table></figure></p><p>Shadowsocks-libev 版：<br><figure class="highlight plain"><figcaption><span>start | stop | restart | status```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">各版本默认配置文件位置</span><br><span class="line">Shadowsocks-Python 版：</span><br><span class="line">```/etc/shadowsocks-python/config.json</span><br></pre></td></tr></table></figure></p><p>ShadowsocksR 版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Shadowsocks-Go 版：</span><br><span class="line">```/etc/shadowsocks-go/config.json</span><br></pre></td></tr></table></figure></p><p>Shadowsocks-libev 版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">多用户多端口配置方法</span><br><span class="line">在root用户下，使用命令</span><br><span class="line">```vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p><p>e.g:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">&quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">&quot;local_port&quot;:1080,</span><br><span class="line">&quot;port_password&quot;:&#123;</span><br><span class="line">&quot;8989&quot;:&quot;password0&quot;,</span><br><span class="line">&quot;9001&quot;:&quot;password1&quot;,</span><br><span class="line">&quot;9002&quot;:&quot;password2&quot;,</span><br><span class="line">&quot;9003&quot;:&quot;password3&quot;,</span><br><span class="line">&quot;9004&quot;:&quot;password4&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;timeout&quot;:300,</span><br><span class="line">&quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class="line">&quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://teddysun.com/342.html" target="_blank" rel="noopener">https://teddysun.com/342.html</a><br><a href="https://teddysun.com/489.html" target="_blank" rel="noopener">https://teddysun.com/489.html</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shadowsocks </tag>
            
            <tag> Google BBR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用网址查询</title>
      <link href="/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80%E6%9F%A5%E8%AF%A2/"/>
      <url>/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p><a href="http://210.27.80.195:8001/" target="_blank" rel="noopener">校园卡转账（校园网）</a><br><a href="http://aaa2.nwsuaf.edu.cn:8080/selfservice/" target="_blank" rel="noopener">西农校园网自助服务系统（校园网）</a><br><a href="http://219.245.196.72" target="_blank" rel="noopener">英语视听说网址（校园网）</a><br><a href="https://odv.xiaofangdyd.cn" target="_blank" rel="noopener">万有仓库</a><br><a href="http://code.xiaofangdyd.cn/" target="_blank" rel="noopener">代码托管平台</a><br><a href="http://pt.nwsuaf6.edu.cn/index.php" target="_blank" rel="noopener">麦田pt的ipv6网址（需要ipv6网）</a><br><a href="https://movie.douban.com/top250" target="_blank" rel="noopener">豆瓣电影 Top 250</a><br><a href="https://go.microsoft.com/fwlink/p/?LinkId=248256" target="_blank" rel="noopener">onedrive客户端（Windows7及以下）</a><br><a href="https://code.visualstudio.com/docs/?dv=win64" target="_blank" rel="noopener">Visual Studio Code下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 方方说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学校 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
