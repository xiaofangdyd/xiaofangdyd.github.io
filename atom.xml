<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>万有笔记</title>
  
  <subtitle>诸事皆宜，百无禁忌</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-30T09:54:50.709Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Fanghl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hello, Hexo</title>
    <link href="http://yoursite.com/hello-Hexo/"/>
    <id>http://yoursite.com/hello-Hexo/</id>
    <published>2019-01-22T03:59:26.000Z</published>
    <updated>2019-01-30T09:54:50.709Z</updated>
    
    <content type="html"><![CDATA[<p>寒假在家，用了一周时间，将博客又搬到了GitHub上，把typecho换成了对markdown支持更好的hexo，然后在搬文章的时候，顺手把所有的图片都托管到七牛云上，解决图片加载慢的问题。</p><ul><li>设置DNS解析，国内用户解析到coding，国际用户解析到GitHub，达到加速的目的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;寒假在家，用了一周时间，将博客又搬到了GitHub上，把typecho换成了对markdown支持更好的hexo，然后在搬文章的时候，顺手把所有的图片都托管到七牛云上，解决图片加载慢的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置DNS解析，国内用户解析到coding，国际用户解析
      
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>回溯法求解N色方柱问题</title>
    <link href="http://yoursite.com/%E5%9B%9E%E6%BA%AF%E6%B3%95%E6%B1%82%E8%A7%A3N%E8%89%B2%E6%96%B9%E6%9F%B1%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/回溯法求解N色方柱问题/</id>
    <published>2019-01-17T03:57:55.000Z</published>
    <updated>2019-01-30T09:33:51.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题简介"><a href="#问题简介" class="headerlink" title="问题简介"></a>问题简介</h2><p>设有n立方体，每个立方体的每个面用红、黄、蓝、绿等n种颜色之一染色。要把这n个立方体叠成一个方形柱体，使得柱体的4个侧面的每一侧均有n种不同的颜色。试设计一个回溯算法，计算出n个立方体的一种满足要求的叠置方案。<br><a id="more"></a><br>例如：第一行有1个正整数n，0&lt;n&lt;27，表示给定的立方体个数和颜色数均为n。第2行是n个大写字母组成的字符串。该字符串的第k（0&lt;=k&lt;n）个字符代表第k种颜色。接下来的n行中，每行有6个数，表示立方体各面的颜色。立方体各面的编号如图所示：</p><p><center class="half"><br>    <img src="https://cdn.xiaofangdyd.cn/%E5%9B%9E%E6%BA%AF%E6%B3%95%E6%B1%82%E8%A7%A3N%E8%89%B2%E6%96%B9%E6%9F%B1/1.jpg"><br>    <img src="https://cdn.xiaofangdyd.cn/%E5%9B%9E%E6%BA%AF%E6%B3%95%E6%B1%82%E8%A7%A3N%E8%89%B2%E6%96%B9%E6%9F%B1/2.jpg"><br></center><br>上图中F表示前面，B表示背面，L表示左面，R表示右面，T表示顶面，D表示底面。相应的2表示前面，3表示背面，0表示左面，1表示右面，5表示顶面，4表示底面。<br>结果输出：将计算的ｎ个立方体的一种可行的叠置方案输出到文件output.txt。每行6个字符，表示立方体个面的颜色。如果不存在所要求的叠置方案，输出“No Solution”</p><h2 id="输入输出规范"><a href="#输入输出规范" class="headerlink" title="输入输出规范"></a>输入输出规范</h2><p>输入格式：n色方柱.txt:<br>4<br>R G B Y<br>0 2 1 3 0 0<br>3 0 2 1 0 1<br>2 1 0 2 1 3<br>1 3 3 0 2 2</p><p>输出格式：solution.txt:</p><p>第1种立方体叠置方案为：<br>R B G Y R R<br>Y R B G R G<br>B G R B G Y<br>G Y Y R B B<br>第2种立方体叠置方案为：<br>G Y R B R R<br>B G Y R R G<br>R B B G G Y<br>Y R G Y B B<br>完成，共找到2种叠置方案。</p><h2 id="算法策略"><a href="#算法策略" class="headerlink" title="算法策略"></a>算法策略</h2><p>事实上，N色方柱问题的解题思路很像N皇后问题的回溯算法思路，N皇后的要求是每放置一个皇后，使得已放置的皇后之间不能相互攻击。N色方柱的思路就是每放置一个立方体，使得已放置好的立方体柱四个侧面中每个侧面的颜色不重复。</p><p>首先已知两点：</p><ol><li>一个立方体如果标记好相邻两个面，则能推导出所有面的标记。</li><li>立方体中相对的两个面永远固定。（比如：一个立方体前面为蓝色，后面为红色，则无论其怎么旋转，蓝色面和红色面永远是相对的）</li></ol><p>由此，对每个涂完颜色的小立方体而言，一共有三组相对的面（前-后、左-右、上-下），而所需求解的立方体柱，只需要保证摆放完成的N个立方体，两组相对面（前-后、左-右）颜色不同即可。</p><p>下面开始对问题进行抽象：对于N个小立方体，首先构建N张无向图，每个图中，将N种颜色作为N个顶点，将三组相对面的颜色的顶点连成一条边，如图所示。</p><p><img src="https://cdn.xiaofangdyd.cn/%E5%9B%9E%E6%BA%AF%E6%B3%95%E6%B1%82%E8%A7%A3N%E8%89%B2%E6%96%B9%E6%9F%B1/3.jpg"></p><p>然后，将上述N个无向图合并，并标明每一条边来自哪个立方体，如图所示。</p><p><img src="https://cdn.xiaofangdyd.cn/%E5%9B%9E%E6%BA%AF%E6%B3%95%E6%B1%82%E8%A7%A3N%E8%89%B2%E6%96%B9%E6%9F%B1/4.jpg" height="150"></p><p>下一步在构成的无向图中，找出两个特殊子图。一个图表示叠置的N个立方体的前面和背面，另一个图表示叠置的N个立方体的左面与右面。同时构建子图时应满足三个性质：</p><ol><li>每个子图有n条边，且每个立方体恰好一条边。</li><li>2个子图没有公共边。</li><li>子图中每个顶点的度均为2。</li></ol><p>对于图中的无向图，找出满足要求的两个子图如图所示。</p><p><img src="https://cdn.xiaofangdyd.cn/%E5%9B%9E%E6%BA%AF%E6%B3%95%E6%B1%82%E8%A7%A3N%E8%89%B2%E6%96%B9%E6%9F%B1/5.jpg" height="150/"></p><p>对图3中的两个子图，给定每条边一个方向，要求：<strong>每个顶点刚好有一个入度和一个出度。</strong></p><p>至此，抽象求解完成，再根据构建的两个有向子图，映射出对应的立方体每个面的颜色。人为规定有向边的始点对应于堆叠完成的N个立方体的前面和左面，有向边的终点对应于堆叠完成的N个立方体的后面和右面。映射出的解如表。</p><table><thead><tr><th></th><th>F(前面)</th><th>B(后面)</th><th>L(左面)</th><th>R(右面)</th></tr></thead><tbody><tr><td>Cube1</td><td>R</td><td>B</td><td>G</td><td>Y</td></tr><tr><td>Cube2</td><td>Y</td><td>R</td><td>B</td><td>G</td></tr><tr><td>Cube3</td><td>B</td><td>G</td><td>R</td><td>B</td></tr><tr><td>Cube4</td><td>G</td><td>Y</td><td>Y</td><td>R</td></tr></tbody></table><p>上述算法的关键是找到符合要求的两个子图，可以使用回溯法，类似于N皇后问题的求解思路。</p><h2 id="数据结构选定"><a href="#数据结构选定" class="headerlink" title="数据结构选定"></a>数据结构选定</h2><p>对于输入的立方体颜色，使用board[N][6]二维数组进行存储，用color[N]一维数组存储颜色信息，对于构建好的子图，使用一个描述边的二维数组side[2][N]表示。其中有2行，一行描述一个子图，每一行中有N列，第N列表示第N个立方体选取的边的信息（一个立方体只能存在3组边，因此边的取值为0、1、2）。设定一个二维数组point[2][N]存储两个子图每条边的度（取值只能为0、1，不能超过2）。</p><p>在将子图转换为输出时，使用result[n][6]存储输出立方体的颜色信息（取值为0-n），used[n]存储边的使用情况（取值为0、1）。</p><h2 id="求解步骤"><a href="#求解步骤" class="headerlink" title="求解步骤"></a>求解步骤</h2><ol><li><p>定义问题的解空间</p><p>由问题理解可得，N色方柱问题的解空间为：一个可以存储两个子图的数据结构。在本题中为side[2][N]的二维数组（取值为0、1、2）</p></li><li><p>确定解空间的组织结构</p><p>确定显约束：每个子图有N条边且每个立方体提供一条边</p></li><li><p>搜索解空间</p><p>确定约束条件：每个子图有N条边且每个立方体提供一条边</p><p>确定限界条件：两个子图不存在公共边且构建完成后子图中每个顶点的度为2</p></li></ol><p>使用全局变量board[N][6]存储立方体每个面的颜色信息，在回溯算法中，使用局部变量cube表示当前搜索的立方体，zitu表示当前构建的子图。使用point[2][N]记录两个子图中N个顶点的度（小于2），使用side[2][N]记录两个子图中选用的N个立方体的边的信息。首先遍历当前cube的side信息，找一条未使用过的边，若未找到，证明当前cube所有情况已经回溯完成，需要回溯到上一个cube寻找。若找到，接着将这条边对应的子图中的两个顶点的度分别加1，然后判断顶点的度是否大于2，若大于2，说明当前的cube的选边不合理，需要回溯重选；若小于2，再判断当前子图是否完成，若完成，开始查找下一个子图或输出结果，若未完成，则进入下一个cube继续搜索。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题简介&quot;&gt;&lt;a href=&quot;#问题简介&quot; class=&quot;headerlink&quot; title=&quot;问题简介&quot;&gt;&lt;/a&gt;问题简介&lt;/h2&gt;&lt;p&gt;设有n立方体，每个立方体的每个面用红、黄、蓝、绿等n种颜色之一染色。要把这n个立方体叠成一个方形柱体，使得柱体的4个侧面的每一侧均有n种不同的颜色。试设计一个回溯算法，计算出n个立方体的一种满足要求的叠置方案。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/tools/code/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="N色方柱" scheme="http://yoursite.com/tags/N%E8%89%B2%E6%96%B9%E6%9F%B1/"/>
    
  </entry>
  
  <entry>
    <title>Biojava的安装与调试（Maven+idea）</title>
    <link href="http://yoursite.com/Biojava%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95%EF%BC%88Maven-idea%EF%BC%89/"/>
    <id>http://yoursite.com/Biojava的安装与调试（Maven-idea）/</id>
    <published>2018-10-24T16:09:18.000Z</published>
    <updated>2019-01-30T09:25:10.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很久没有更新博客了，其实还是因为不知道该写点什么，最近跟着一个研究生学长在做项目，压力山大，收获颇丰。在做项目的过程中，我强制自己去看一些英语的论文，看GitHub的文档，Google一些官方API，感觉提升很大。最近会抽时间更新一些文章，一来做为备忘，以便随时回头查看；二来也算整理思路，在做项目时更有条理。</p><a id="more"></a><h2 id="Biojava介绍"><a href="#Biojava介绍" class="headerlink" title="Biojava介绍"></a>Biojava介绍</h2><p><a href="https://biojava.org/" target="_blank" rel="noopener">Biojava官网（英文）</a></p><p>Biojava是一个开源的生物信息学基础库，用于分析和表示生物序列（如DNA、RNA和蛋白质）的基础库。BioJava提供了生物序列处理功能（如转录与翻译）、文件格式转换功能和一些简单的科学计算（如隐马尔科夫模型）。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>Windows10 + JDK8（Biojava官网说明只兼容JDK7或JDK8）</p><p>到我写这篇文章时，Biojava的最新版本号为4.2.0</p><p>根据<a href="https://biojava.org/wiki/BioJava%3ADownload_4.2.0/" target="_blank" rel="noopener">官网介绍</a>，可以使用Maven从Maven Central下载使用</p><h2 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h2><p>Maven是一个开源的Jar包管理工具，因此在安装之前应该确保Java环境（JDK）已安装。</p><p>1、 去<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven官网的下载页面</a>下载最新版本的Maven的<strong>zip压缩包</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apache-maven-3.5.4-bin.zip</span><br></pre></td></tr></table></figure></p><p>2、 在本地解压后，将目录（下文简称 <strong>%PATH%</strong>）新建到系统环境变量MAVEN_HOME中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.g: C:\tools\apache-maven-3.5.4</span><br></pre></td></tr></table></figure><p>在系统环境变量PATH中追加<code>%MAVEN_HOME%\bin</code></p><p>3、 更改maven仓库位置（default：<strong>%USER%.m2\maven_repository</strong>）不想改的转4。</p><p>在目标位置新建文件夹maven_repository，该目录为maven的本地库。打开%PATH%\conf\settings.xml文件，找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure></p><p>将其移动至注释外，并将中间内容改为自定义的maven_repository目录地址。<br>e.g:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;C:\tools\maven_repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure></p><p>4、 添加阿里云的maven镜像源为主镜像。在%PATH%\conf\settings.xml文件中找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/mirrors&gt;</span><br></pre></td></tr></table></figure></p><p>在中间插入以下代码并保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  </span><br><span class="line">    &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;      </span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p>5、 运行DOS命令<code>mvn -v</code>查看maven是否正常安装，<code>mvn help:system</code>在库中自动下载索引文件</p><h2 id="idea中配置"><a href="#idea中配置" class="headerlink" title="idea中配置"></a>idea中配置</h2><p>在setting中找到Build-&gt;Build Tools-&gt;Maven修改Maven home directory和User settings file选项。</p><p><img src="https://cdn.xiaofangdyd.cn/bioJava.png" alt=""></p><p>如果有需要可以在importing-Automatically download:中将Sources和Documentation勾选，方便以后找源码和demo</p><p>然后可以新建一个maven空项目，在Biojava的<a href="https://github.com/biojava/biojava" target="_blank" rel="noopener">GitHub界面</a>中，介绍了快速添加Biojava的方法.</p><p>在项目的pom.xml文件中，加入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.biojava&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;biojava-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- other biojava jars as needed --&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>之后idea会提示更新maven文件，更新完成后就可以使用了。</p><p>在程序编译时，idea可能会报Warning提示：IntelliJ IDEA 源值1.5已过时，将在未来所有版本中删除。</p><p>这是因为IDEA默认把项目的源代码版本设置为jdk1.5，目标代码设置为jdk1.5，最直接的方法是在项目的pom.xml文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line"> &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">  &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>其他方法比如修改setting.xml文件、设置项目的Modules的Language Level 为“8”都可以。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;很久没有更新博客了，其实还是因为不知道该写点什么，最近跟着一个研究生学长在做项目，压力山大，收获颇丰。在做项目的过程中，我强制自己去看一些英语的论文，看GitHub的文档，Google一些官方API，感觉提升很大。最近会抽时间更新一些文章，一来做为备忘，以便随时回头查看；二来也算整理思路，在做项目时更有条理。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="IDEA" scheme="http://yoursite.com/tags/IDEA/"/>
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记1</title>
    <link href="http://yoursite.com/Python%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/Python笔记1/</id>
    <published>2018-06-02T04:31:42.000Z</published>
    <updated>2019-01-30T09:17:15.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>类是抽象的模板，而实例是根据类创建出来的一个个具体的对象，每个对象都拥有相同的方法，但各自的数据可能不同。<br>在python中，定义类是通过<strong>class</strong>关键字：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>class后面跟着的是类名，一般为大写开头的单词，括号中的<strong>object</strong>表示该类是从哪个类继承下来的，默认的为object，这是所有类最终都会继承的类，和Java类似。</p><p>定义好了Student类，就可以根据Student类创建出Student实例，创建实例是通过类名+()实现的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;test = Student()</span><br><span class="line">&gt;&gt;&gt;test</span><br><span class="line">&lt;__main__.Student object at <span class="number">0x10a67a590</span>&gt;</span><br><span class="line">&gt;&gt;&gt;Student</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Student</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以看出，变量test指向的是一个Student实例，后面的十六进制为内存地址，每个object的地址都不一样。</p><p>和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;test1 = Student(&apos;Xiao Fang&apos;, 80)</span><br><span class="line">&gt;&gt;&gt;test2 = Student(&apos;Xiao Ming&apos;, 90)</span><br><span class="line">&gt;&gt;&gt;test1.age = 19</span><br><span class="line">&gt;&gt;&gt;test1.age</span><br><span class="line">19</span><br><span class="line">&gt;&gt;&gt;test2.age</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &apos;Student&apos; object has no attribute &apos;age&apos;</span><br></pre></td></tr></table></figure></p><h3 id="init"><a href="#init" class="headerlink" title="__init__"></a>__init__</h3><p>通过<strong><strong>init</strong></strong>方法，可以在创建实例的时候，把一些必须绑定的属性强制填写进去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure></p><p>其中<strong><strong>init</strong></strong>方法的第一个参数永远是<strong>self</strong>，表示创建的实例本身，因此在<strong><strong>init</strong></strong>方法内部，就可以把各种属性绑定到self。</p><p>有了<strong><strong>init</strong></strong>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<strong>init</strong>方法匹配的函数，但<strong>self</strong>不用传。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;test = Student(<span class="string">'Xiao Fang'</span>, <span class="number">80</span>)</span><br><span class="line">&gt;&gt;&gt;test.name</span><br><span class="line"><span class="string">'Xiao Fang'</span></span><br><span class="line">&gt;&gt;&gt;test.score</span><br><span class="line"><span class="number">80</span></span><br></pre></td></tr></table></figure></p><h3 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h3><p>为了使类的内部属性不被外部访问，可以把属性的名称前加上两个下划线<strong>，在Python中，实例的变量名如果为**</strong>**开头，就变成了一个私有变量（private），只有内部可以访问，外部不可以访问。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: %s'</span> % (self.__name, self.__score))</span><br></pre></td></tr></table></figure></p><p>修改完成后，就不能在外部访问<strong>name</strong>和<strong>score</strong>了。这是因为Python解释器对外把<strong>__name</strong>变量改成了<strong>_Student__name</strong>，所以，仍然可以通过<strong>_Student__name</strong>来访问<strong>__name</strong>变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;test._Student__name</span><br><span class="line">&apos;Xiao Fang&apos;</span><br></pre></td></tr></table></figure></p><p>但Python官方并不建议用户这么做，因为不同版本的Python解释器会把<strong>__name</strong>改成不同的变量名。</p><p>然而，在Python中，变量名类似<strong><strong>xxx</strong></strong>的，为特殊变量，虽然是以双下划线开头，但可以直接访问，不是private变量。</p><p>而以单下划线开头的实例变量名，如<strong>_name</strong>外部是可以访问的，但是按照约定俗成，要将其视为私有变量，不要随意访问。</p><h3 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a>__slots__</h3><p>Python允许用户在创建类的实例后，给该实例绑定任何属性和方法。但给一个实例绑定的方法，对其他实例是不起作用的。<br>为了给所有实例绑定方法，可以直接为class绑定该方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;def set_score(self, score):</span><br><span class="line">...    self.score = score</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;Student.set_score = set_score</span><br></pre></td></tr></table></figure></p><p>这时，所有的以Student类创建的实例都可以调用set_score方法。</p><p>为了限制实例的属性，Python允许在定义class的时候，定义一个特殊的 <strong><strong>slots</strong></strong>变量，来限制该class实例能添加的属性。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span></span></span><br><span class="line">    __slots__ = ('name', 'age')</span><br></pre></td></tr></table></figure></p><p>然后就只能对Student实例添加name和age属性。</p><p>需要注意的是，<strong><strong>slots</strong></strong>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的。除非在子类中也定义<strong><strong>slots</strong></strong>，这样，子类实例允许定义的属性就是自身的<strong><strong>slots</strong></strong>加上父类的<strong><strong>slots</strong></strong>。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><p>当定义一个class时，可以从现有的某个class继承，新的class称为子类，而被继承的class称为父类、基类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animal is running ...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>对于Dog和Cat来说，Animal就是他的父类，对于Animal来说，Dog和Cat都是他的子类。子类可以获得父类的全部功能。由于Animal实现了Run（）方法，因此，Dog和Cat也都自动拥有了Run（）方法。</p><p>为了对Dog和Cat的Run（）方法加以区分，可以对代码进行一点修改。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Dog is running ...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Cat is running ...'</span>)</span><br></pre></td></tr></table></figure></p><p>当父类和子类都存在相同的Run（）方法时，子类的方法会覆盖掉父类的方法。在代码运行时，总会调用子类的Run（）方法。</p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>不同与单一继承的语言（如Java），Python中可以通过多重继承，使一个子类可以同时获得多个父类的全部功能。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runnable</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Running ...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Live</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'living ...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal, Runnable)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="基本方法-1"><a href="#基本方法-1" class="headerlink" title="基本方法"></a>基本方法</h3><p>在说明多态之前，先添加一个函数，这个函数接受一个Animal类型的变量。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Run_twice</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    Animal.Run()</span><br><span class="line">    Animal.Run()</span><br></pre></td></tr></table></figure></p><p>原代码为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animal is running ...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Dog is running ...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Cat is running ...'</span>)</span><br></pre></td></tr></table></figure></p><p>当传入Animal的实例时，Run_twice()就打印出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal is running ...</span><br><span class="line">Animal is running ...</span><br></pre></td></tr></table></figure></p><p>当传入Dog的实例时，Run_twice()就打印出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog is running ...</span><br><span class="line">Dog is running ...</span><br></pre></td></tr></table></figure></p><p>可以看出，对于任何一个Animal的子类，任何依赖Animal作为参数的函数或方法都可以不加修改的正常运行。这就是多态。</p><p>对于一个变量，我们只需要知道它是Animal类型，无需确切知道他的子类型，就可以调用Run（）方法。当我们新增一个Animal的子类时，只要确保Run（）方法编写正确，不用管原来的代码是如何调用的，这样也符合面向对象编程中的开闭原则。（对扩展开放：允许新增Animal子类。对修改封闭：不需要依赖Animal类型的Run_twice()函数）</p><h3 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h3><p>对于静态语言（C++，Java等）来说，如果需要传入Animal类型，则传入的对象就必须是Animal类型或者它的子类，否则将无法调用Run（）方法。<br>对于python来说，不一定需要传入Animal类型，只需要保证传入的对象有一个Run（）方法就可以了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span><span class="params">(object)</span></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">Run</span><span class="params">(self)</span></span></span><br><span class="line"><span class="class">        <span class="title">print</span><span class="params">(<span class="string">'Start ...'</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“<strong>看起来像鸭子，走起路来像鸭子</strong>”，那它就可以被看做是鸭子。</p><p>动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p><p>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</p><p>继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类和对象&quot;&gt;&lt;a href=&quot;#类和对象&quot; class=&quot;headerlink&quot; title=&quot;类和对象&quot;&gt;&lt;/a&gt;类和对象&lt;/h2&gt;&lt;p&gt;类是抽象的模板，而实例是根据类创建出来的一个个具体的对象，每个对象都拥有相同的方法，但各自的数据可能不同。&lt;br&gt;在python中，定义类是通过&lt;strong&gt;class&lt;/strong&gt;关键字：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/tools/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>世界不美丽，但是我爱你</title>
    <link href="http://yoursite.com/%E4%B8%96%E7%95%8C%E4%B8%8D%E7%BE%8E%E4%B8%BD%EF%BC%8C%E4%BD%86%E6%98%AF%E6%88%91%E7%88%B1%E4%BD%A0/"/>
    <id>http://yoursite.com/世界不美丽，但是我爱你/</id>
    <published>2018-05-18T12:42:33.000Z</published>
    <updated>2019-01-30T09:12:07.149Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我本想这个冬日就去死的，可正月里有人送了我一套鼠灰色细条纹的麻质和服作为新年礼物。是适合夏天穿的和服，那我还是先活到夏天吧  ——太宰治《叶》</p></blockquote><a id="more"></a><p>我时常觉得自己没有任何厌世的资格。</p><p>我的家庭和睦，父母没有经常给我不愉快的感受；我家境普通，但也不愁温饱；我有关系很好的朋友，也向往美好真挚的爱情；我从未受过欺凌，也没经历过多么绝望的事；我身体健康，不高不丑不胖不帅；我也像大多数人一样，一路读书读到这里。</p><p>世界待我尚可，我什么也不缺，但也会像什么也没有一样。</p><p>我过着尚可的日子，每天都觉得我用掉的时间，仿佛毫无意义。</p><p>没有经历过救亡图存的爱国热血，没有能力和机遇去做什么伟大的事情，没有世界末日，没有小说里精彩曲折的故事……</p><p>没有疯狂，没有奔跑，没有非如此不可，没有坚定不移的终极目标。</p><p>从我小时候，知道了人是进化出来的动物，知道了人类在宇宙中的渺小后，我就渐渐明白。 “<strong>创造人类的世界，并没有给人类任何意义，一切只是条件的符合而已，人生的意义全部是人类自己定义的。</strong>”</p><p>我开始怀疑一切，怀疑所有正确的答案，怀疑一眼看到头的主流路线……我曾经去看了很多对于人生意义的解释，但几乎全都是自欺欺人之法，直到今天我才明白，接受人生的没有意义，正是可以真正追求意义的第一步。这个世界残酷且黑暗，我们要去热爱它，两者并不矛盾。</p><p><img src="https://cdn.xiaofangdyd.cn/%E4%B8%96%E7%95%8C%E4%B8%8D%E7%BE%8E%E4%B8%BD/1.jpg" alt=""></p><p><strong>世界不美丽，但是我爱你。</strong></p><p>正是因为没有意义，才可以赋予给自己意义。</p><p><img src="https://cdn.xiaofangdyd.cn/%E4%B8%96%E7%95%8C%E4%B8%8D%E7%BE%8E%E4%B8%BD/2.png" alt=""></p><p>世界缓慢而坚定的向前推进，我们在历史的车辙中只是蝼蚁，但历史从来没说过：<strong>蝼蚁不能有自己的快乐。</strong></p><p>自事其心者，哀乐不易施乎前，知其不可奈何而安之若命，德之至也。</p><p><img src="https://cdn.xiaofangdyd.cn/%E4%B8%96%E7%95%8C%E4%B8%8D%E7%BE%8E%E4%B8%BD/3.jpg" alt=""></p><blockquote><p>世人可爱，世事可戏。</p></blockquote><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我本想这个冬日就去死的，可正月里有人送了我一套鼠灰色细条纹的麻质和服作为新年礼物。是适合夏天穿的和服，那我还是先活到夏天吧  ——太宰治《叶》&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>C++中vector的常用方法</title>
    <link href="http://yoursite.com/C-%E4%B8%ADvector%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/C-中vector的常用方法/</id>
    <published>2018-05-14T13:11:44.000Z</published>
    <updated>2019-01-30T09:05:55.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在C++中，vector是一个十分有用的容器。它能像容器一样存放各种类型的对象，简单来说，vector是一个能够<strong>存放任意类型的动态数组</strong>，能够增加和压缩数据。<br>相较链表而言，vector中提供了大量的方法供直接使用，降低了代码复杂度，也提高了易读性。</p><a id="more"></a><p><strong>注意：</strong>vector相较于链表，实现插入和删除操作时效率较低，当动态添加的数据超过系统所分配的默认内存大小时，要进行整体的重新分配、拷贝和释放。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="1-头文件"><a href="#1-头文件" class="headerlink" title="1. 头文件"></a>1. 头文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="2-创建vector对象"><a href="#2-创建vector对象" class="headerlink" title="2. 创建vector对象"></a>2. 创建vector对象</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test;</span><br></pre></td></tr></table></figure><h4 id="3-尾部插入"><a href="#3-尾部插入" class="headerlink" title="3. 尾部插入"></a>3. 尾部插入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">test.push_back(a);</span><br></pre></td></tr></table></figure><h4 id="4-使用下标访问元素"><a href="#4-使用下标访问元素" class="headerlink" title="4. 使用下标访问元素"></a>4. 使用下标访问元素</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test[<span class="number">0</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="5-插入元素"><a href="#5-插入元素" class="headerlink" title="5. 插入元素"></a>5. 插入元素</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.insert(test.begin()+i, a); <span class="comment">//在第i+1个元素前插入a</span></span><br></pre></td></tr></table></figure><h4 id="6-删除元素"><a href="#6-删除元素" class="headerlink" title="6. 删除元素"></a>6. 删除元素</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.erase(test.begin()+<span class="number">3</span>); <span class="comment">//删除第3个元素</span></span><br></pre></td></tr></table></figure><h4 id="7-vector向量大小"><a href="#7-vector向量大小" class="headerlink" title="7. vector向量大小"></a>7. vector向量大小</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.size();</span><br></pre></td></tr></table></figure><h4 id="8-清空"><a href="#8-清空" class="headerlink" title="8. 清空"></a>8. 清空</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.clear();</span><br></pre></td></tr></table></figure><h3 id="begin与end函数、front与back函数的差别"><a href="#begin与end函数、front与back函数的差别" class="headerlink" title="begin与end函数、front与back函数的差别"></a>begin与end函数、front与back函数的差别</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li>begin()：返回当前vector容器内起始元素</li><li>end()：返回当前vector容器内末尾元素</li><li>front()：返回当前vector容器中起始元素的引用</li><li>back()：返回当前vector容器中末尾元素的引用</li></ul><h4 id="e-g"><a href="#e-g" class="headerlink" title="e.g"></a>e.g</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator i1;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator i2;</span><br><span class="line"></span><br><span class="line">    test.push_back(<span class="number">1000</span>);</span><br><span class="line">    test.push_back(<span class="number">1001</span>);</span><br><span class="line">    test.push_back(<span class="number">1010</span>);</span><br><span class="line">    test.push_back(<span class="number">1011</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"front()="</span> &lt;&lt; test.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"back()="</span> &lt;&lt; test.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    i1 = test.begin();</span><br><span class="line">    i2 = test.end()<span class="number">-1</span>; <span class="comment">//end()向的是最后一个元素的下一个位置，因此想要访问最后一个元素的正确操作为：end()-1</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *i1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *i2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><p>front()=1000<br>back()=1011<br>1000<br>1011</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="（1）reverse"><a href="#（1）reverse" class="headerlink" title="（1）reverse"></a>（1）reverse</h4><p>需要头文件：<code> #include<algorithm></algorithm></code><br>用法： <code> reverse(test.begin(), test.end()); </code>将元素翻转，即逆序排列。</p><h4 id="（2）sort"><a href="#（2）sort" class="headerlink" title="（2）sort"></a>（2）sort</h4><p>需要头文件：<code> #include<algorithm></algorithm></code><br>用法 ：<code> sort(test.begin(), test.end());</code>默认为升序排列，即从小到大。<br>用法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmdPaixu</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line">sort(test.begin(), test.end(), cmdPaixu);</span><br></pre></td></tr></table></figure></p><p>重写排序比较函数，实现降序排列。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在C++中，vector是一个十分有用的容器。它能像容器一样存放各种类型的对象，简单来说，vector是一个能够&lt;strong&gt;存放任意类型的动态数组&lt;/strong&gt;，能够增加和压缩数据。&lt;br&gt;相较链表而言，vector中提供了大量的方法供直接使用，降低了代码复杂度，也提高了易读性。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/tools/code/"/>
    
    
      <category term="vector" scheme="http://yoursite.com/tags/vector/"/>
    
  </entry>
  
  <entry>
    <title>我在逛超市，没空想标题</title>
    <link href="http://yoursite.com/%E6%88%91%E5%9C%A8%E9%80%9B%E8%B6%85%E5%B8%82%EF%BC%8C%E6%B2%A1%E7%A9%BA%E6%83%B3%E6%A0%87%E9%A2%98/"/>
    <id>http://yoursite.com/我在逛超市，没空想标题/</id>
    <published>2018-05-10T15:06:51.000Z</published>
    <updated>2019-01-30T08:46:45.252Z</updated>
    
    <content type="html"><![CDATA[<p>小区外面新开了一个超市，名字很古怪，叫“万有市集”。虽然店面很小，但人们总能在里面找到自己想买的东西。</p><p>付款的方式也很特别，用光阴换物品。支付一天寿命可以换一本书，一个月可以换一套好看的衣服，一年能换郊区的一套小小的商品房。</p><a id="more"></a><p>最为奇特的是，店内只有一个常年带着兜帽的店主，但货物总是可以摆放整齐，地面也一直十分洁净。可能因为他总坐在角落里，小区里没人看到过他的脸。</p><p>店铺刚开业时，总有些胆子大的人来尝试。开始只是小打小闹，买一些零食，几条烟，日常的一些蔬菜瓜果。结账时，店主伸出他苍白细长的手指在人们的眉心一点，一点白光闪过后，光阴付款就完成了。当人们拿的东西没多少钱时，店主甚至完全不搭理你，不耐烦的挥手赶你走。</p><p>渐渐的，人们发现自己的身体并没有什么变化，他们开始认为店主在故弄玄虚，是一个疯子。但由于人们总是能找到心心念的商品，小小的“万有市集”开始门庭若市。</p><p>小明在大学毕业后租房在这座小区做起了微商。可惜她并没有那么好运赶上微商的浪潮，只能奋力向前去仰望羡慕那些踏浪前行的弄潮儿。</p><p>看着自己的同行在朋友圈每天都在晒着各种自拍、美食、奢饰品，自己却只能蜷缩在城市郊区的陋巷，为每日的温饱和客户赔笑脸。无名的焦虑感每日都在增强，嫉妒也让她惶惶不可终日。</p><p>她意识到，只有身份才能改变这一切。没有一些背景，也没有很多资产，别人凭什么相信你，凭什么放心把货物让你来代理。只有年轻人才把热情和奋斗当作资本，在别人眼里，这些一文不值。</p><p>下定决心的她，打算玩一票大的。</p><p>万有市集依旧人来人往，人们在觉得店主是疯子后，非但没有同情，反而更加频繁来这里“购买商品”。</p><p>小小的店面里每天都挤满了来抢购的人，可不管人们怎么拿，货物好像都拿不完的样子。人们从未看到过店主进货，也没有见过有人来打扫卫生，但店面每天都整洁如新。</p><p>每一个觉得自己占到便宜的人在走出店门的时候，脸上都挂着灿烂的笑意，可很少有人能注意到笑容的眼角上悄然出现的几条皱纹。也没人注意到人声鼎沸的小店里渐渐有点阴冷起来。</p><p>小明挤进店里，四处闲逛后，看见了一辆豪车的车钥匙，标价10年。这正是她梦寐以求的身份的象征。又挑了一些零食后，小明走向了收银台。</p><p>这是万有市集第一次销售如此巨额的商品，连店主在看到车钥匙的时候都明显愣了一下，抬头看了看小明。这是他第一次抬头看向顾客，可由于光线和兜帽的遮挡，他的脸依然隐藏在黑暗之中，只有猩红色的瞳孔，透漏出狡黠的目光，让小明不寒而栗。</p><p>“一共10年，零头不算了。”</p><p>一点白光闪过，小明明显感到，店主的手指竟多了一点温度，也多了一丝肉色。</p><p>“车子在小区车库里，自己去拿。”说完递给小明一张车库门牌号。</p><p>这就好了？我竟然骗了他一百多万？我要不要去警察局自首？小明做贼心虚般匆匆忙忙离开了小店，“万有市集”这四个大字在她看来是如此的刺眼，可她还未曾发现，招牌下面，还有一行小字……</p><p>“祝贺‘今天要卖货团队’创始人明总，喜提劳斯莱斯。明总加入微商五个月，微商新女性，左手事业，右手家庭……”</p><p>朋友圈里同行的点赞纷至杳来，请她代理的商家也慢慢变多。她的团队再也不是一个人了，她开始招助理，发展下线，甚至为了更大的利益，在违法的边缘试探。</p><p>她并不担心警察来抓她，因为她早已经在万有市集中，花20年的光阴，买下了美国绿卡和旧金山的多处豪宅。</p><p>她渐渐依赖小店了，她觉得不能没有小店，她想从这里榨取更多的利益……就像她第一次提车时那样。</p><p>她开始注重保养皮肤，虽然才30岁，但眼角的皱纹已经怎么也遮不住了。无奈的她只好飞去韩国接受了整形手术。</p><p>直到有一天，质检总局接到举报说小明卖的商品有质量问题。调查组立即开始调查，冻结了小明的所有资金，并限制她购买逃向美国的机票。</p><p>小明迫不得已再一次来到了小店。这里依旧人满为患，只是最开始来买商品的大爷大妈都不见了，店里多了许多陌生的新面孔。</p><p>虽然是盛夏，店里没有空调，却时不时吹出一阵阵冷风，令人毛骨悚然。</p><p>小明看到了她需要的假身份证和机票，又顺手拿了一些奢饰品和几套名贵服装。</p><p>结账的时候，店主看了看小明，说：“对不起，你的余额不足了。” 说完还没等小明回过神来，店主那只比正常人略微修长的手指便点向她的眉心，一阵白光后，小明消失在原地，周围的人却仿佛什么也没有发生过。</p><p>小明只觉得一阵晕眩，接着身体开始透明，她穿过了其他人的身体，她大声哭喊，可没人看得见，也没人听得见，仿佛她被隔绝在了平行宇宙的另一端，除了一个人。</p><p>店主缓缓站起来，摘掉兜帽。</p><p>“你阳寿已尽，黑白无常只会在勾魂簿记载的日子里才能来，这些年你支付的光阴，就在这里工作来偿还吧。”</p><p>小明看向四周，看到了不少熟悉的身影，那是最开始的一群大爷大妈。他们仿佛已经被折磨的失去了灵魂，在小店里默默打扫，摆放货物……</p><p>万有市集依旧开着，人们从五湖四海赶过来，只为了占这必定要还的便宜。</p><p>万有市集招牌下方的小字，鲜有人看到，上面写着</p><p>“一寸光阴一寸金，寸金难买寸光阴。”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小区外面新开了一个超市，名字很古怪，叫“万有市集”。虽然店面很小，但人们总能在里面找到自己想买的东西。&lt;/p&gt;
&lt;p&gt;付款的方式也很特别，用光阴换物品。支付一天寿命可以换一本书，一个月可以换一套好看的衣服，一年能换郊区的一套小小的商品房。&lt;/p&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>八皇后问题（C++）</title>
    <link href="http://yoursite.com/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%EF%BC%88C-%EF%BC%89/"/>
    <id>http://yoursite.com/八皇后问题（C-）/</id>
    <published>2018-04-09T12:34:53.000Z</published>
    <updated>2019-01-30T04:52:15.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是八皇后问题？"><a href="#什么是八皇后问题？" class="headerlink" title="什么是八皇后问题？"></a>什么是八皇后问题？</h2><p>八皇后问题，是一个古老而著名的问题，是<strong>回溯算法</strong>的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：</p><blockquote><p>在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法?<br><a id="more"></a></p></blockquote><h2 id="如何解决八皇后问题？"><a href="#如何解决八皇后问题？" class="headerlink" title="如何解决八皇后问题？"></a>如何解决八皇后问题？</h2><p>解决八皇后问题，核心就在于递归回溯。所谓递归回溯，本质上是一种枚举法。这种方法是从棋盘的第一行开始尝试摆放第一个皇后，排放成功后递归一层；再遵循规则在第二行摆放第二个皇后，如果当前位置无法摆放，则向右一格再次尝试；如果摆放成功，则继续递归一层……</p><p>下面我会用不太抽象的代码详细讲解</p><h2 id="八皇后问题的代码实现"><a href="#八皇后问题的代码实现" class="headerlink" title="八皇后问题的代码实现"></a>八皇后问题的代码实现</h2><p>解决八皇后问题可以分为两个层面：</p><ol><li><strong>找出一种解</strong>，即深度优先遍历。</li><li><strong>找出全部解</strong>，即广度优先遍历。</li></ol><p>这两种方法在代码模块上区别不是很大，只用更改递归回溯的方法即可在上面两个解上切换。</p><p>在写代码之前，我们需要解决几个问题</p><h3 id="1-国际象棋的棋盘怎么表示？"><a href="#1-国际象棋的棋盘怎么表示？" class="headerlink" title="1. 国际象棋的棋盘怎么表示？"></a>1. 国际象棋的棋盘怎么表示？</h3><p>用一个8*8的二维数组表示即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 8 <span class="comment">//棋盘格子的范围</span></span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//解的个数</span></span><br><span class="line"><span class="keyword">int</span> chess[N][N] = &#123;<span class="number">0</span>&#125;; <span class="comment">//棋盘</span></span><br></pre></td></tr></table></figure></p><p>这里使用int数组，初始值为0，当此位置有皇后放置时，对应的元素置1。</p><p>例如： <code>chess<a href="https://www.zhihu.com/question/28543312" target="_blank" rel="noopener">4</a></code>就代表第5行第6列。</p><h3 id="2-如何判断皇后的落点是否符合规则？"><a href="#2-如何判断皇后的落点是否符合规则？" class="headerlink" title="2. 如何判断皇后的落点是否符合规则？"></a>2. 如何判断皇后的落点是否符合规则？</h3><p>可以定义一个check函数，传入皇后的落点，通过对当前行之前的纵向和斜向是否存在其他皇后来判断。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; x-i &gt;= <span class="number">0</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (chess[x-i][y]==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//检查纵向</span></span><br><span class="line">        <span class="keyword">if</span> (y-i &gt;= <span class="number">0</span> &amp;&amp; chess[x-i][y-i]==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//检查左斜向</span></span><br><span class="line">        <span class="keyword">if</span> (y+i &lt;= N &amp;&amp; chess[x-i][y+i]==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//检查右斜向</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-如何将结果输出？"><a href="#3-如何将结果输出？" class="headerlink" title="3. 如何将结果输出？"></a>3. 如何将结果输出？</h3><p>可以定义一个print函数，遍历整个二维数组并输出就可以。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"第"</span> &lt;&lt; count &lt;&lt; <span class="string">"组"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"******************"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; chess[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"******************"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="4-如何进行递归回溯？"><a href="#4-如何进行递归回溯？" class="headerlink" title="4. 如何进行递归回溯？"></a>4. 如何进行递归回溯？</h3><p>递归回溯是这个问题的核心，对于开始提出的两个解，分别应用两种递归思路。</p><h4 id="（1）找出一种解"><a href="#（1）找出一种解" class="headerlink" title="（1）找出一种解"></a>（1）找出一种解</h4><p>递归算法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">settle</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//行数超过，即表明找到正确答案</span></span><br><span class="line">    <span class="keyword">if</span> (x==N) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//遍历当前行，逐一验证</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 为当前行清零，防止出现脏数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            chess[x][j]=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 检查是否合规</span></span><br><span class="line">        <span class="keyword">if</span> (check(x, i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 合规则放置皇后</span></span><br><span class="line">            chess[x][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 进行下一行递归</span></span><br><span class="line">            <span class="keyword">if</span> (settle(x+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>主程序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    settle(<span class="number">0</span>);</span><br><span class="line">    print();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><p><img src="https://cdn.xiaofangdyd.cn/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/1.png" alt=""></p><h4 id="（2）找出所有解"><a href="#（2）找出所有解" class="headerlink" title="（2）找出所有解"></a>（2）找出所有解</h4><p>递归算法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">settle</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 遍历当前行，逐一验证</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 检查是否合规</span></span><br><span class="line">        <span class="keyword">if</span> (check(x,i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 合规则放置皇后</span></span><br><span class="line">            chess[x][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 若为最后一行，则解数加一，打印结果，并清除当前行数据</span></span><br><span class="line">            <span class="keyword">if</span> (x == N<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">                print();</span><br><span class="line">                chess[x][i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若不为最后一行，则进行下一行递归</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                settle(x+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清除脏数据</span></span><br><span class="line">        chess[x][i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>主函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    settle(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"共"</span> &lt;&lt; count &lt;&lt; <span class="string">"组"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果（部分）</p><p><img src="https://cdn.xiaofangdyd.cn/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/2.png" alt=""></p><h2 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h2><p>由结果已知，八皇后问题一共有92种解法，棋盘为正方形，可进行4次90°旋转，所以不重复的解应该有92/4=23种，如果能<strong>用程序找出这23种解法</strong>，并进行4次旋转，时间复杂度会比当前简单很多。</p><p>在查资料的时候，据说使用<strong>位运算</strong>会简单很多，有时间看看。</p><p>附一个有趣的链接：<br><a href="https://www.zhihu.com/question/28543312" target="_blank" rel="noopener">如何用C++在10行内写出八皇后？- 知乎</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是八皇后问题？&quot;&gt;&lt;a href=&quot;#什么是八皇后问题？&quot; class=&quot;headerlink&quot; title=&quot;什么是八皇后问题？&quot;&gt;&lt;/a&gt;什么是八皇后问题？&lt;/h2&gt;&lt;p&gt;八皇后问题，是一个古老而著名的问题，是&lt;strong&gt;回溯算法&lt;/strong&gt;的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法?&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/tools/code/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>长安客</title>
    <link href="http://yoursite.com/%E9%95%BF%E5%AE%89%E5%AE%A2/"/>
    <id>http://yoursite.com/长安客/</id>
    <published>2018-04-06T14:27:51.000Z</published>
    <updated>2019-01-30T04:41:43.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/1.png" alt=""></p><blockquote><p>有多少人和我一样，坐在不足十平米的空间里，看着书里九万五千公里的绚丽。又或是和我一样，拥有一颗比九万五千公里还辽阔的心，却坐在不足一平米的椅子上。——《不去会死》</p></blockquote><a id="more"></a><p>第一次听说长安，是小学在哥哥家看《童话世界》，他们的编辑部就在西安。想着有机会要去亲自拜访，把没有买到的期刊补全，却一直没去。</p><p>后来机缘巧合之下跟着旅行社来到了西安，在兵马俑、华清池、大雁塔兜兜转转，也没有去成《童话世界》的编辑部。待到大些时候，再来西安，却过了那个童话的年纪。</p><p>考到陕西上大学后，每次来西安都有着各种稀奇古怪的事情要办，我好像提前进入了上班族的行列，带着耳机和漠不关己的眼神，匆匆的走在这里，好像要和汽车赛跑，以此来感受城市的快节奏生活。临走前还不忘抱怨：</p><p>“呸，这里真tm冷漠。”</p><p>但这次的西安两日之旅，让我对这座城市的印象大为改观。</p><p>这是一个需要你亲自来体验才懂的城市，这是一座你来了便不会忘了的历史之都。</p><h2 id="小公交"><a href="#小公交" class="headerlink" title="小公交"></a>小公交</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/2.jpg" alt=""></p><p>有人说，到一个地方旅游，重要的不是风景，而是当地的人。景由心生，但人由景生。一方水土养一方人。陕西人的直爽我已经领教了两年，这次来到西安，却发现了西安人独有的好客和热心，在这里，司机不是抢时间而是让着行人的，公交车是不需要喊师傅停车而是每站必停的。可能因为这次是抱着旅游的心态吧，人也由心生。</p><p>但最让我印象深刻的是照片里的这种小公交车，一个只有9个座位的小公交。在引擎的轰鸣下晃晃悠悠的走着，有着和大公交不一样的悠闲和自由。</p><h2 id="大唐芙蓉园"><a href="#大唐芙蓉园" class="headerlink" title="大唐芙蓉园"></a>大唐芙蓉园</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/3.png" alt=""></p><p>著名的景点周围总是不缺乏排队的人群，即使今天是清明。</p><p>小时候也从未见过有哪一个景点的排队人数有如今之多，即使是以前的长城和天安门。可能人们的生活水平真的提高了不少吧。另外，手机在排队中的作用也至关重要。</p><p>小时候人们排队时无外乎聊天和发呆，时间过的很慢，人的耐心总是有限度的，队伍也就长不起来。现在排队的时候大部分人都在低头看手机，一来能排遣无聊的等待时间，二来手机确实很好玩。</p><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/4.png" alt=""></p><p>在芙蓉园中，经常能看到很多现代和古代融合的奇景。钢铁之躯的脚踏船外是木船的装饰、钢筋混凝土的亭台外是仿朱砂的漆、古色古香的阁楼外挂着恢宏的牌匾和同样经历风吹雨打的空调外机。</p><p>人们来到这里，想梦回大唐，却离不开现代科技的便利。匆匆走过各个景点，用自拍杆记录下今昔俊俏的容颜，再配上几句伤感的诗词，我们成功的在各大社交平台梦回“长安”。</p><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/5.png" alt=""></p><p>现在在展出的文物面前停留最多的，不是眼睛，而是镜头和闪光灯。</p><p>科技的进步让我们可以长久保存事物的影像。在景区，博物馆，动物园，人们举着相机，手机疯狂拍摄。有一些人是真的在寻找景物特定的美，而绝大多数人，来到一处，闪光灯一阵乱闪，便匆匆走向下一处，这些照片可能他再也不会看，只有在手机提示内存不足时，“选择”-“删除”-“确定”。</p><p>小时候，老一辈人在聊到一个地方时，他们会说：“这里的XX挺棒的，有XX，XXX……特别好看!”</p><p>当我们聊到一个地方的时候，我们总会兴奋的说：“这里我来过！”接着便掏出手机，迫不及待展示自己行云流水的拍摄成果。</p><p>相比这样，我更热衷于仔细欣赏我喜欢的作品，然后任它们在记忆中被渐渐遗忘。当再次提起时，能留有一份欣赏时的韵味。</p><blockquote><p>说有一位画家，在沙滩上用棍子画了一副惊世之作，接着便欣赏它在涨潮时慢慢消失。<br>《月亮与六便士》中的主人公最后命令也家人烧掉了自己画有传奇作品的屋子。</p></blockquote><p>可以说，艺术的美，就在与它被人们遗忘时的心痛感。</p><p>艺术真残酷。</p><h2 id="曲江书城"><a href="#曲江书城" class="headerlink" title="曲江书城"></a>曲江书城</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/6.png" alt=""></p><p>上一次正儿八经去图书馆看书已经是初中时候了吧，高中无暇看书，偷偷看本读者，心里都美滋滋，哪有功夫看书。</p><p>在大学里，生活上的事情处理的一团遭，忙的焦头烂额，游戏又那么好玩。</p><p>一进门，我的身心都渐渐安静下来，在一排排书中行走，看着琳琅满目的书名，<del>颇有种古代黄帝翻牌子的快感。</del>一时不知道从何下手。</p><p>在电子书大行其道的当日，我们却很少去重复读一本书。匆匆看完后，“唉”一声，又打开了下一本。然而书对于我们这种记忆力正常的人类来说，是需要反复读的，反复读的好处，这里就不过多赘述，自己百度吧。</p><h2 id="永兴坊"><a href="#永兴坊" class="headerlink" title="永兴坊"></a>永兴坊</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/7.png" alt=""></p><p>西安的夜市就属回民街最热闹，然而西安的同学告诉我，那都是你们外地人去的，我们才不去。然后我就来到了本地人去的小吃街。</p><p>可能人们都学聪明了吧，这里的人比起回民街竟然过而不及。在摩肩接踵的人流中，我的腰包竟然也迅速变瘪。我这才发现，明明食物没有多美味，在拥挤的环境中，我不知不觉买了快￥100的小吃，放在外面可能不到￥40，颇有回民街的风采。</p><p>那为什么还有这么多人来？可能是为了图个热闹。</p><p>在人云亦云的环境里，我们要做出自己的判断，真的比想像中还要难。</p><h2 id="长安客和胡辣汤"><a href="#长安客和胡辣汤" class="headerlink" title="长安客和胡辣汤"></a>长安客和胡辣汤</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/8.png" alt=""></p><p>走之前看的几个酒店在中午的时候都被订完了，我们阴差阳错的选择了这个离景点数公里的酒店，条件很棒也不算贵。名字很值得品味，总觉得比什么凯旋酒店之流好上太多，可能是没钱也要鄙视一下的心理在作祟。</p><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/9.png" alt=""></p><p>踏破铁鞋无觅处，柳暗花明又一村。</p><p>早上办理完退房手续，刚出酒店门，就看到了一家正宗的河南胡辣汤店。感动。</p><p>在陕西的两年，我和其他河南人一样，忘不了那一碗胡辣汤。然而这里最多的却是一种叫做：<strong>肉丸胡辣汤</strong>的怪异种。为了那种味道，我找了两年，失望了一次又一次，却在不经意的一次回头，闻到了熟悉又陌生的香味。</p><p>在我每次特别想要一个东西时，好像我在和全世界作对。但世界却时不时把这些东西看似随意的丢给我，好像是我完成某些指定动作的奖励。</p><h2 id="剁椒鱼头"><a href="#剁椒鱼头" class="headerlink" title="剁椒鱼头"></a>剁椒鱼头</h2><p><img src="https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/10.png" alt=""></p><p>在这的最后一顿饭，是西安的同学请客，选的是一家湘菜馆。一道剁椒鱼头吃的我欲罢不能。</p><p>辣椒其实并不是我国的本土作物，据说是在唐宋时期，洋人作为观赏植物朝贡而来。伟大的天朝人民却发现了这种不同寻常的味道可以用来入菜。</p><p>其实辣是一种痛觉。在我看来，流着眼泪也要吃辣是十分伤心时才会做的事，这样就可以让人看不到自己其实是哭出的泪，不然何必要让自己疼呢。就好像杀手就算在白天杀人还要穿黑衣，也是为了不让对方看出自己的伤口。</p><p>其实人们吃辣上瘾是有原因的。人们在受到刺激的时候，会分泌一些物质来自我麻痹进而达到保护自身的目的。这些物质会让人产生一种飘飘欲仙的快感。吃辣刺激了身体进行自我麻痹，从而产生快感。</p><p>不管你是谁，受到刺激的时候身体的第一反应就是逃避。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>旅行让我们明白，原来我们的生活如此可以轻而易举的改变，数天的旅程，来到一个陌生的地方，没人知道你叫什么，好像什么都可以重新开始，陌生给予我们不安而又奇特的安全感。站在人潮涌动的街头，擦肩而过，给予彼此空洞的一瞥，有时却有些莫名的感动。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.xiaofangdyd.cn/%E9%95%BF%E5%AE%89%E5%AE%A2/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有多少人和我一样，坐在不足十平米的空间里，看着书里九万五千公里的绚丽。又或是和我一样，拥有一颗比九万五千公里还辽阔的心，却坐在不足一平米的椅子上。——《不去会死》&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
    
      <category term="游记" scheme="http://yoursite.com/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式（Abstract Factory）</title>
    <link href="http://yoursite.com/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88Abstract-Factory%EF%BC%89/"/>
    <id>http://yoursite.com/抽象工厂模式（Abstract-Factory）/</id>
    <published>2018-04-01T11:47:59.000Z</published>
    <updated>2019-01-30T04:34:37.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>在上文中介绍的工厂方法模式（Factory Method）中，有一些问题尚未解决。</p><ul><li>每次增加一个产品时，都需要增加一个具体类和对象实现工厂。</li></ul><p>而在现实生活中，一个工厂往往要生产很多种类的产品，为了解决上述的问题，我们又使用了一种新的设计模式——<strong>抽象工厂模式（Abstract Factory）</strong>。<br><a id="more"></a></p><blockquote><p>在阅读下文前强烈建议先阅读：<br>设计模式简介<br>简单工厂模式（Simple-Factory）<br>工厂方法模式（Factory Method）</p></blockquote><h2 id="二、-介绍"><a href="#二、-介绍" class="headerlink" title="二、 介绍"></a>二、 介绍</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>抽象工厂（Abstract Factory）模式为创建一组相关或相互依赖的对象提供一个接口，而不需要指出用于创建对象的具体类。</p><h3 id="2-解决的问题"><a href="#2-解决的问题" class="headerlink" title="2. 解决的问题"></a>2. 解决的问题</h3><p>每次增加一个产品时，都需要增加一个具体类和对象实现工厂。（即工厂方法模式的缺点）</p><h3 id="3-和工厂方法模式的对比"><a href="#3-和工厂方法模式的对比" class="headerlink" title="3. 和工厂方法模式的对比"></a>3. 和工厂方法模式的对比</h3><h4 id="1-不同点"><a href="#1-不同点" class="headerlink" title="(1) 不同点"></a>(1) 不同点</h4><table><thead><tr><th style="text-align:left">工厂方法模式</th><th style="text-align:left">抽象工厂模式</th></tr></thead><tbody><tr><td style="text-align:left">针对的是一个产品等级结构</td><td style="text-align:left">针对的是面向多个产品等级结构</td></tr><tr><td style="text-align:left">一个抽象产品类</td><td style="text-align:left">多个抽象产品类</td></tr><tr><td style="text-align:left">可以派生出多个具体产品类</td><td style="text-align:left">每个抽象产品类可以派生出多个具体产品类</td></tr><tr><td style="text-align:left">每个具体工厂类只能创建一个具体产品类的实例</td><td style="text-align:left">每个具体工厂类可以创建多个具体产品类的实例</td></tr></tbody></table><p><strong>最主要的区别：</strong>抽象工厂中每个工厂可以创建多种类的产品；而工厂方法每个工厂只能创建一个种类。</p><h4 id="2-相同点"><a href="#2-相同点" class="headerlink" title="(2) 相同点"></a>(2) 相同点</h4><ol><li>一个抽象工厂类，可以派生出多个具体工厂类</li></ol><h2 id="三、-模式原理"><a href="#三、-模式原理" class="headerlink" title="三、 模式原理"></a>三、 模式原理</h2><h3 id="1-UML类图"><a href="#1-UML类图" class="headerlink" title="1. UML类图"></a>1. UML类图</h3><p><img src="https://cdn.xiaofangdyd.cn/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt="抽象工厂UML类图.png"></p><h3 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h3><ol><li>创建<strong>抽象工厂类</strong>，定义具体工厂的公共接口；</li><li>创建<strong>抽象产品族类</strong> ，定义抽象产品的公共接口；</li><li>创建<strong>抽象产品类</strong> （继承抽象产品族类），定义具体产品的公共接口；</li><li>创建<strong>具体产品类</strong>（继承抽象产品类） ，定义生产的具体产品；</li><li>创建<strong>具体工厂类</strong>（继承抽象工厂类），定义创建对应具体产品实例的方法；</li><li>客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例。<h2 id="四、-实例-amp-代码"><a href="#四、-实例-amp-代码" class="headerlink" title="四、 实例&amp;代码"></a>四、 实例&amp;代码</h2><h3 id="1-基本情况"><a href="#1-基本情况" class="headerlink" title="1. 基本情况"></a>1. 基本情况</h3></li></ol><ul><li>背景：小X有<strong>两间塑料加工厂</strong>（A厂仅生产容器类产品；B厂仅生产模具类产品）；随着客户需求的变化，A厂也需要生产模具类产品，B厂也需要生产容器类产品。</li><li>冲突：没有资源（资金+租位）在当地分别开设多一家注塑分厂（<strong>无法使用工厂方法模式</strong>）</li><li>解决方案：在原有的两家塑料厂里增设生产需求的功能，即<strong>A厂能生产容器+模具产品；B厂间能生产模具+容器产品</strong>。<h3 id="2-使用步骤-1"><a href="#2-使用步骤-1" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h3><h4 id="1-创建抽象工厂类，定义具体工厂的公共接口"><a href="#1-创建抽象工厂类，定义具体工厂的公共接口" class="headerlink" title="(1) 创建抽象工厂类，定义具体工厂的公共接口"></a>(1) 创建<strong>抽象工厂类</strong>，定义具体工厂的公共接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">ManufactureContainer</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">ManufactureMould</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-创建抽象产品族类-，定义抽象产品的公共接口"><a href="#2-创建抽象产品族类-，定义抽象产品的公共接口" class="headerlink" title="(2) 创建抽象产品族类 ，定义抽象产品的公共接口"></a>(2) 创建<strong>抽象产品族类</strong> ，定义抽象产品的公共接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建抽象产品类-，定义具体产品的公共接口"><a href="#3-创建抽象产品类-，定义具体产品的公共接口" class="headerlink" title="(3) 创建抽象产品类 ，定义具体产品的公共接口"></a>(3) 创建<strong>抽象产品类</strong> ，定义具体产品的公共接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器产品抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerProduct</span> <span class="keyword">extends</span> <span class="title">AbstractProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MouldProduct</span> <span class="keyword">extends</span> <span class="title">AbstractProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-创建具体产品类（继承抽象产品类），-定义生产的具体产品"><a href="#4-创建具体产品类（继承抽象产品类），-定义生产的具体产品" class="headerlink" title="(4) 创建具体产品类（继承抽象产品类）， 定义生产的具体产品"></a>(4) 创建<strong>具体产品类</strong>（继承抽象产品类）， 定义生产的具体产品</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器产品A类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContainerProductA</span> <span class="keyword">extends</span> <span class="title">ContainerProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了容器产品A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器产品B类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContainerProductB</span> <span class="keyword">extends</span> <span class="title">ContainerProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了容器产品B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品A类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouldProductA</span> <span class="keyword">extends</span> <span class="title">MouldProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了模具产品A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品B类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouldProductB</span> <span class="keyword">extends</span> <span class="title">MouldProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了模具产品B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法"><a href="#5-创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法" class="headerlink" title="(5) 创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法"></a>(5) 创建<strong>具体工厂类</strong>（继承抽象工厂类），定义创建对应具体产品实例的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A厂 - 生产模具+容器产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">ManufactureContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ContainerProductA();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">ManufactureMould</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MouldProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B厂 - 生产模具+容器产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryB</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">ManufactureContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ContainerProductB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">ManufactureMould</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MouldProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例"><a href="#6-客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例" class="headerlink" title="(6) 客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例"></a>(6) 客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生产工作流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        FactoryA mFactoryA = <span class="keyword">new</span> FactoryA();</span><br><span class="line">        FactoryB mFactoryB = <span class="keyword">new</span> FactoryB();</span><br><span class="line">        <span class="comment">//A厂当地客户需要容器产品A</span></span><br><span class="line">        mFactoryA.ManufactureContainer().Show();</span><br><span class="line">        <span class="comment">//A厂当地客户需要模具产品A</span></span><br><span class="line">        mFactoryA.ManufactureMould().Show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//B厂当地客户需要容器产品B</span></span><br><span class="line">        mFactoryB.ManufactureContainer().Show();</span><br><span class="line">        <span class="comment">//B厂当地客户需要模具产品B</span></span><br><span class="line">        mFactoryB.ManufactureMould().Show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-结果"><a href="#7-结果" class="headerlink" title="(7)结果"></a>(7)结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">生产出了容器产品A</span><br><span class="line">生产出了模具产品A</span><br><span class="line">生产出了容器产品B</span><br><span class="line">生产出了模具产品B</span><br></pre></td></tr></table></figure><h2 id="五、-优缺点"><a href="#五、-优缺点" class="headerlink" title="五、 优缺点"></a>五、 优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h3><ol><li>降低耦合。抽象工厂模式将<strong>具体产品</strong>的创建延迟到子类<strong>具体工厂</strong>中，这样将对象的创建封装起来，可以减少客<strong>户端与具体产品类</strong>之间的依赖，从而使系统耦合度低，这样更有利于后期的维护和扩展。</li><li>抽象工厂模式隔离了具体类的生成。由于这种隔离，更换一个<strong>具体工厂</strong>就变得相对容易，所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。</li><li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用<strong>同一个产品族</strong>中的对象。</li><li>更符合<strong>开放封闭原则</strong>。新增一种<strong>产品族</strong>时，只需要增加相应的<strong>具体产品类</strong>和相应的<strong>工厂子类</strong>即可。<h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h3></li></ol><ul><li>抽象工厂模式很难支持新种类产品的变化。</li></ul><p>这是因为抽象工厂接口中已经确定了<strong>可以被创建的产品集合</strong>，如果需要添加新产品，此时就必须去修改抽象层的代码，这样就涉及到抽象工厂类的以及所有子类的改变，这样也就违背了<strong>开放封闭原则</strong>。</p><blockquote><p>也就是说：在抽象工厂模式中，增加新的产品族很方便，但是增加新的产品等级结构很麻烦，抽象工厂模式的这种性质称为<strong>开放封闭原则的倾斜性</strong>。</p></blockquote><h2 id="六、-应用场景"><a href="#六、-应用场景" class="headerlink" title="六、 应用场景"></a>六、 应用场景</h2><ol><li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是很重要的，<strong>用户无须关心对象的创建过程</strong>。</li><li>系统<strong>中有多于一个的产品族，而每次只使用其中某一产品族</strong>。可以通过配置文件等方式来使得用户可以动态改变产品族，也可以很方便地增加新的产品族。</li><li><strong>产品等级结构稳定</strong>，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-前言&quot;&gt;&lt;a href=&quot;#一、-前言&quot; class=&quot;headerlink&quot; title=&quot;一、 前言&quot;&gt;&lt;/a&gt;一、 前言&lt;/h2&gt;&lt;p&gt;在上文中介绍的工厂方法模式（Factory Method）中，有一些问题尚未解决。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次增加一个产品时，都需要增加一个具体类和对象实现工厂。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而在现实生活中，一个工厂往往要生产很多种类的产品，为了解决上述的问题，我们又使用了一种新的设计模式——&lt;strong&gt;抽象工厂模式（Abstract Factory）&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="OOAD" scheme="http://yoursite.com/categories/tools/OOAD/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法模式（Factory Method）</title>
    <link href="http://yoursite.com/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%EF%BC%88Factory-Method%EF%BC%89/"/>
    <id>http://yoursite.com/工厂方法模式（Factory-Method）/</id>
    <published>2018-03-31T03:43:00.000Z</published>
    <updated>2019-01-30T04:34:20.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>在上文中介绍的简单工厂模式（Simple-Factory）中，有一些问题尚未解决。</p><ol><li>工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响。</li><li>违背开放封闭原则，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。</li></ol><p>为了解决这些问题，需要使用一种新的设计模式————<strong>工厂方法模式（Factory Method）</strong>。<br><a id="more"></a></p><blockquote><p>在阅读下文前强烈建议先阅读<br>设计模式简介<br>简单工厂模式（Simple-Factory）</p></blockquote><h2 id="二、-介绍"><a href="#二、-介绍" class="headerlink" title="二、 介绍"></a>二、 介绍</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>通过定义一个用于创建对象的接口，让子类决定具体实例化哪个产品类，工厂模式使其创建过程延迟到子类进行。工厂方法模式又称为：工厂模式(Factory Pattern)、虚拟构造器模式(Virtual Constructor Pattern)、多态工厂模式(Polymorphic Factory Pattern)等。</p><h3 id="2-解决的问题"><a href="#2-解决的问题" class="headerlink" title="2. 解决的问题"></a>2. 解决的问题</h3><p>解决了工厂一旦需要生产新产品就需要修改工厂类的方法逻辑，遵守了“<strong>开放封闭原则</strong>”。</p><blockquote><p>之所以能解决简单工厂的问题，是因为工厂方法把具体产品的创建推迟到工厂的子类（具体工厂）中，此时工厂类不再负责所有产品的创建，而只给出具体工厂必须实现的接口，符合开放封闭原则。</p></blockquote><h2 id="三、-模式原理"><a href="#三、-模式原理" class="headerlink" title="三、 模式原理"></a>三、 模式原理</h2><h3 id="1-UML类图"><a href="#1-UML类图" class="headerlink" title="1. UML类图"></a>1. UML类图</h3><p><img src="https://cdn.xiaofangdyd.cn/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png" alt=""></p><h3 id="2-模式组成"><a href="#2-模式组成" class="headerlink" title="2. 模式组成"></a>2. 模式组成</h3><table><thead><tr><th style="text-align:left">组成（角色）</th><th style="text-align:left">关系</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">抽象产品（Product）</td><td style="text-align:left">具体产品的父类</td><td style="text-align:left">描述具体产品的公共接口</td></tr><tr><td style="text-align:left">具体产品（Concrete Product）</td><td style="text-align:left">抽象产品的子类；工厂类创建的目标类</td><td style="text-align:left">描述生产的具体产品</td></tr><tr><td style="text-align:left">抽象工厂（Creator）</td><td style="text-align:left">具体工厂的父类</td><td style="text-align:left">描述具体工厂的公共接口</td></tr><tr><td style="text-align:left">具体工厂（Concrete Creator）</td><td style="text-align:left">抽象工厂的子类；被外界调用</td><td style="text-align:left">描述具体工厂；实现FactoryMethod工厂方法创建产品的实例</td></tr></tbody></table><h2 id="四、-实例-amp-代码"><a href="#四、-实例-amp-代码" class="headerlink" title="四、 实例&amp;代码"></a>四、 实例&amp;代码</h2><h3 id="1-基本情况"><a href="#1-基本情况" class="headerlink" title="1. 基本情况"></a>1. 基本情况</h3><ul><li>背景：小X有一个塑料加工厂（仅生产A类产品）；随着客户需求变化，需要生产B类产品。</li><li>冲突：改变原有塑料加工厂的配置和变化非常困难，假设下一次客户需要再发生变化，再次改变将增大非常大的成本。</li><li>解决方案：小X决定置办塑料分厂B来生产B类产品；<h3 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h3><h4 id="1-创建抽象工厂类，定义具体工厂的公共接口"><a href="#1-创建抽象工厂类，定义具体工厂的公共接口" class="headerlink" title="(1) 创建抽象工厂类，定义具体工厂的公共接口"></a>(1) 创建<strong>抽象工厂类</strong>，定义具体工厂的公共接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abstract class Factory&#123;</span><br><span class="line">    public abstract Product Manufacture();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-创建抽象产品类-，定义具体产品的公共接口"><a href="#2-创建抽象产品类-，定义具体产品的公共接口" class="headerlink" title="(2) 创建抽象产品类 ，定义具体产品的公共接口"></a>(2) 创建<strong>抽象产品类</strong> ，定义具体产品的公共接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abstract class Product&#123;</span><br><span class="line">    public abstract void Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建具体产品类（继承抽象产品类），-定义生产的具体产品"><a href="#3-创建具体产品类（继承抽象产品类），-定义生产的具体产品" class="headerlink" title="(3) 创建具体产品类（继承抽象产品类）， 定义生产的具体产品"></a>(3) 创建<strong>具体产品类</strong>（继承抽象产品类）， 定义生产的具体产品</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//具体产品A类</span><br><span class="line">class  ProductA extends  Product&#123;</span><br><span class="line">    public void Show() &#123;</span><br><span class="line">        System.out.println(&quot;生产出了产品A&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//具体产品B类</span><br><span class="line">class  ProductB extends  Product&#123;</span><br><span class="line">    public void Show() &#123;</span><br><span class="line">        System.out.println(&quot;生产出了产品B&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法"><a href="#4-创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法" class="headerlink" title="(4) 创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法"></a>(4) 创建<strong>具体工厂类</strong>（继承抽象工厂类），定义创建对应具体产品实例的方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//工厂A类 - 生产A类产品</span><br><span class="line">class  FactoryA extends Factory&#123;</span><br><span class="line">    public Product Manufacture() &#123;</span><br><span class="line">        return new ProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//工厂B类 - 生产B类产品</span><br><span class="line">class  FactoryB extends Factory&#123;</span><br><span class="line">    public Product Manufacture() &#123;</span><br><span class="line">        return new ProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例"><a href="#5-外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例" class="headerlink" title="(5) 外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例"></a>(5) 外界通过调用具体工厂类的方法，从而创建<strong>不同具体产品类的实例</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//生产工作流程</span><br><span class="line">public class FactoryPattern &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        //客户要产品A</span><br><span class="line">        FactoryA mFactoryA = new FactoryA();</span><br><span class="line">        mFactoryA.Manufacture().Show();</span><br><span class="line"></span><br><span class="line">        //客户要产品B</span><br><span class="line">        FactoryB mFactoryB = new FactoryB();</span><br><span class="line">        mFactoryB.Manufacture().Show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-结果"><a href="#6-结果" class="headerlink" title="(6)结果"></a>(6)结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生产出了产品A</span><br><span class="line">生产出了产品B</span><br></pre></td></tr></table></figure><h2 id="五、-优缺点"><a href="#五、-优缺点" class="headerlink" title="五、 优缺点"></a>五、 优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h3><ul><li>屏蔽产品的具体实现，调用者只关心产品的接口。</li><li>更符合开放封闭原则</li><li>每个具体工厂只负责创建对应的产品，符合接口隔离原则</li><li>扩展性高。<h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h3></li><li>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。<h2 id="六、-应用场景"><a href="#六、-应用场景" class="headerlink" title="六、 应用场景"></a>六、 应用场景</h2>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是<strong>复杂对象适合使用工厂模式</strong>，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会<strong>增加系统的复杂度</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-前言&quot;&gt;&lt;a href=&quot;#一、-前言&quot; class=&quot;headerlink&quot; title=&quot;一、 前言&quot;&gt;&lt;/a&gt;一、 前言&lt;/h2&gt;&lt;p&gt;在上文中介绍的简单工厂模式（Simple-Factory）中，有一些问题尚未解决。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响。&lt;/li&gt;
&lt;li&gt;违背开放封闭原则，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了解决这些问题，需要使用一种新的设计模式————&lt;strong&gt;工厂方法模式（Factory Method）&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="OOAD" scheme="http://yoursite.com/categories/tools/OOAD/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂模式（Simple Factory）</title>
    <link href="http://yoursite.com/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88Simple-Factory%EF%BC%89/"/>
    <id>http://yoursite.com/简单工厂模式（Simple-Factory）/</id>
    <published>2018-03-30T14:32:41.000Z</published>
    <updated>2019-01-30T04:35:04.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>工厂模式主要是为创建对象提供过度接口，以便将创建对象的具体过程隔离屏蔽起来，达到提高灵活性的目的。</p><p>工厂模式可以分为三类：<strong>简单工厂模式（Simple Factory）、工厂方法模式（Factory Method）、抽象工厂模式（Abstract Factory）。</strong>这三种模式从前到后逐步抽象，并且更具一般性。<br><a id="more"></a><br>本文会简单概述开发中最常用的设计模式 - 简单工厂模式。</p><blockquote><p>在阅读下文前强烈建议先阅读<br>设计模式简介</p></blockquote><h2 id="二、含义"><a href="#二、含义" class="headerlink" title="二、含义"></a>二、含义</h2><p>简单工厂模式又称静态工厂方法模式（因为工厂类定义了一个静态方法）。在现实生活中，工厂是负责生产产品的；同样在设计模式中，简单工厂模式我们可以理解为负责生产对象的一个类，称为“工厂类”。</p><p>它存在的目的很简单：<strong>定义一个用于创建对象的接口。</strong></p><h2 id="三、解决的问题"><a href="#三、解决的问题" class="headerlink" title="三、解决的问题"></a>三、解决的问题</h2><p>将“类实例化的操作”与“使用对象的操作”分开，让使用者不用知道具体参数就可以实例化出所需要的“产品”类，从而避免了在客户端代码中显式指定，实现了解耦。<br><strong>即使用者可直接消费产品而不需要知道其生产的细节</strong></p><h2 id="四、-模式原理"><a href="#四、-模式原理" class="headerlink" title="四、 模式原理"></a>四、 模式原理</h2><h3 id="1-模式组成"><a href="#1-模式组成" class="headerlink" title="1. 模式组成"></a>1. 模式组成</h3><table><thead><tr><th style="text-align:left">组成（角色）</th><th style="text-align:left">关系</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">抽象产品（Product）</td><td style="text-align:left">具体产品的父类</td><td style="text-align:left">描述产品的公共接口</td></tr><tr><td style="text-align:left">具体产品（Concrete Product）</td><td style="text-align:left">抽象产品的子类；工厂类创建的目标类</td><td style="text-align:left">描述生产的具体产品</td></tr><tr><td style="text-align:left">工厂（Creator）</td><td style="text-align:left">被外界调用</td><td style="text-align:left">根据传入不同参数从而创建不同具体产品类的实例</td></tr></tbody></table><h3 id="2-UML类图"><a href="#2-UML类图" class="headerlink" title="2. UML类图"></a>2. UML类图</h3><p><img src="https://cdn.xiaofangdyd.cn/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt="UML类图.png"></p><h3 id="3-使用步骤"><a href="#3-使用步骤" class="headerlink" title="3. 使用步骤"></a>3. 使用步骤</h3><ol><li>创建<strong>抽象产品类</strong>&amp;定义具体产品的公共接口。</li><li>创建<strong>具体产品类</strong>（继承抽象产品类） &amp; 定义生产的具体产品。</li><li>创建<strong>工厂类</strong>，通过创建静态方法根据传入不同参数从而创建不同具体产品类的实例。</li><li>外界通过调用工厂类的静态方法，<strong>传入不同参数</strong>从而创建不同<strong>具体产品类的实例</strong>。<h2 id="五、-实例-amp-代码"><a href="#五、-实例-amp-代码" class="headerlink" title="五、 实例&amp;代码"></a>五、 实例&amp;代码</h2><h3 id="1-基本情况"><a href="#1-基本情况" class="headerlink" title="1. 基本情况"></a>1. 基本情况</h3></li></ol><ul><li>背景：小X有一个塑料生产厂，用来做塑料加工生意。</li><li>目的：小X希望通过<strong>简单工厂模式</strong>实现3款产品的生产。<h3 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h3><h4 id="1-创建抽象产品类，定义具体产品的公共接口"><a href="#1-创建抽象产品类，定义具体产品的公共接口" class="headerlink" title="(1) 创建抽象产品类，定义具体产品的公共接口"></a>(1) 创建抽象产品类，定义具体产品的公共接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-创建具体产品类（继承抽象产品类），定义生产的具体产品"><a href="#2-创建具体产品类（继承抽象产品类），定义生产的具体产品" class="headerlink" title="(2) 创建具体产品类（继承抽象产品类），定义生产的具体产品"></a>(2) 创建具体产品类（继承抽象产品类），定义生产的具体产品</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体产品类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ProductA</span> <span class="keyword">extends</span>  <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了产品A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ProductB</span> <span class="keyword">extends</span>  <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了产品C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品类C</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ProductC</span> <span class="keyword">extends</span>  <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了产品C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建工厂类，通过创建静态方法从而根据传入不同参数创建不同具体产品类的实例"><a href="#3-创建工厂类，通过创建静态方法从而根据传入不同参数创建不同具体产品类的实例" class="headerlink" title="(3) 创建工厂类，通过创建静态方法从而根据传入不同参数创建不同具体产品类的实例"></a>(3) 创建工厂类，通过创建静态方法从而根据传入不同参数创建不同具体产品类的实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">Manufacture</span><span class="params">(String ProductName)</span></span>&#123;</span><br><span class="line"><span class="comment">//工厂类里用switch语句控制生产哪种商品；</span></span><br><span class="line"><span class="comment">//使用者只需要调用工厂类的静态方法就可以实现产品类的实例化。</span></span><br><span class="line">        <span class="keyword">switch</span> (ProductName)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductC();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例"><a href="#4-外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例" class="headerlink" title="(4) 外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例"></a>(4) 外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂产品生产流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Factory mFactory = <span class="keyword">new</span> Factory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品A</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用工厂类的静态方法 &amp; 传入不同参数从而创建产品实例</span></span><br><span class="line">            mFactory.Manufacture(<span class="string">"A"</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有这一类产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品B</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFactory.Manufacture(<span class="string">"B"</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有这一类产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品C</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFactory.Manufacture(<span class="string">"C"</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有这一类产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品D</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFactory.Manufacture(<span class="string">"D"</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有这一类产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-输出结果"><a href="#5-输出结果" class="headerlink" title="(5) 输出结果"></a>(5) 输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">生产出了产品A</span><br><span class="line">生产出了产品B</span><br><span class="line">生产出了产品C</span><br><span class="line">没有这一类产品</span><br></pre></td></tr></table></figure><h2 id="六、优缺点"><a href="#六、优缺点" class="headerlink" title="六、优缺点"></a>六、优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h3><ol><li>将创建实例的工作与使用实例的工作分开，<strong>使用者不必关心类对象如何创建</strong>，实现了解耦。</li><li>把初始化实例时的工作放到工厂里进行，使代码更容易维护。 </li><li>更符合面向对象的原则。</li><li><strong>面向接口编程</strong>，而不是面向实现编程。<h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h3></li><li>工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响。</li><li>违背<strong>开放封闭原则</strong>，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。</li><li>简单工厂模式由于使用了静态工厂方法，<strong>静态方法不能被继承和重写</strong>，会造成工厂角色无法形成基于继承的等级结构。<h2 id="七、应用场景"><a href="#七、应用场景" class="headerlink" title="七、应用场景"></a>七、应用场景</h2></li></ol><ul><li>当客户程序不需要知道要使用对象的创建过程。</li><li>客户程序使用的对象存在变动的可能，或者根本就不知道使用哪一个具体的对象。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-前言&quot;&gt;&lt;a href=&quot;#一、-前言&quot; class=&quot;headerlink&quot; title=&quot;一、 前言&quot;&gt;&lt;/a&gt;一、 前言&lt;/h2&gt;&lt;p&gt;工厂模式主要是为创建对象提供过度接口，以便将创建对象的具体过程隔离屏蔽起来，达到提高灵活性的目的。&lt;/p&gt;
&lt;p&gt;工厂模式可以分为三类：&lt;strong&gt;简单工厂模式（Simple Factory）、工厂方法模式（Factory Method）、抽象工厂模式（Abstract Factory）。&lt;/strong&gt;这三种模式从前到后逐步抽象，并且更具一般性。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="OOAD" scheme="http://yoursite.com/categories/tools/OOAD/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>设计模式简介</title>
    <link href="http://yoursite.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/设计模式简介/</id>
    <published>2018-03-29T15:31:50.000Z</published>
    <updated>2019-01-30T04:23:42.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-定义及作用"><a href="#一、-定义及作用" class="headerlink" title="一、 定义及作用"></a>一、 定义及作用</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>设计模式（Design pattern）是软件开发人员在软件开发过程中<strong>面临特定问题设计的解决方案</strong>，这些解决方案是众多开发人员经过相当长一段时间的试验和错误总结出来的。<br><a id="more"></a></p><h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h3><ul><li>提高代码复用率，降低开发成本和周期</li><li>提高代码的可靠性</li><li>让代码更容易被他人理解<h2 id="二、-设计原则"><a href="#二、-设计原则" class="headerlink" title="二、 设计原则"></a>二、 设计原则</h2>在设计模式中，强调如下六大原则：<h3 id="1-开放封闭原则（Open-Close-Principle）"><a href="#1-开放封闭原则（Open-Close-Principle）" class="headerlink" title="1. 开放封闭原则（Open Close Principle）"></a>1. 开放封闭原则（Open Close Principle）</h3><blockquote><p>一个实体（类、函数、模块等）应该<strong>对扩展开放，对修改关闭</strong></p></blockquote></li></ul><ol><li>每次发生变化时，要通过添加新的代码来增强现有类型的行为，而不是修改原有的代码。</li><li>符合开放封闭原则的最好方式是提供一个固有的接口，然后让所有可能发生变化的类实现该接口，让固定的接口与相关对象进行交互。</li><li>可以使程序的扩展性更好，易于维护和升级。</li><li>需要使用接口和抽象类。<h3 id="2-里氏替换原则（Liskov-Substitution-Principle）"><a href="#2-里氏替换原则（Liskov-Substitution-Principle）" class="headerlink" title="2. 里氏替换原则（Liskov Substitution Principle）"></a>2. 里氏替换原则（Liskov Substitution Principle）</h3><blockquote><p>任何基类可以出现的地方，子类一定可以出现。</p></blockquote></li><li>LSP是继承复用的基石。</li><li>在软件开发过程中，子类替换父类后，程序的行为是一样的。 </li><li>只有当子类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而子类也能够在基类的基础上增加新的行为。</li><li>LSP是对开放封闭原则的补充，是对实现开放封闭原则的具体步骤的规范。<h3 id="3-依赖倒置原则（Dependence-Inversion-Principle）"><a href="#3-依赖倒置原则（Dependence-Inversion-Principle）" class="headerlink" title="3. 依赖倒置原则（Dependence Inversion Principle）"></a>3. 依赖倒置原则（Dependence Inversion Principle）</h3><blockquote><p>针对接口编程，依赖于抽象而不依赖于具体。</p></blockquote></li><li>细节应该依赖于抽象，而抽象不应该依赖于细节。</li><li>所谓的 <strong>面向接口编程，而不是面向实现编程</strong> 。这样可以降低客户与具体实现的耦合。<h3 id="4-接口隔离原则（Interface-Segregation-Principle）"><a href="#4-接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="4. 接口隔离原则（Interface Segregation Principle）"></a>4. 接口隔离原则（Interface Segregation Principle）</h3><blockquote><p>使用多个隔离的接口，比使用单个接口要好。</p></blockquote></li><li>不要让一个单一的接口承担过多的职责，而应把每个职责分离到多个专门的接口中，进行接口分离。</li><li>要降低类之间的耦合。</li><li>强调降低依赖，降低耦合。<h3 id="5-迪米特法则（Demeter-Principle）"><a href="#5-迪米特法则（Demeter-Principle）" class="headerlink" title="5. 迪米特法则（Demeter Principle）"></a>5. 迪米特法则（Demeter Principle）</h3><blockquote><p>一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p></blockquote></li><li>又称：<strong>最少知道原则</strong>。</li><li>遵守迪米特法则的模块修改时影响的更少，扩展更加容易。</li><li><strong>外观模式</strong>（Facade Pattern)和<strong>中介者模式</strong>（Mediator Pattern）就使用了迪米特法则。<h3 id="6-合成复用原则（Composite-Reuse-Principle）"><a href="#6-合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6. 合成复用原则（Composite Reuse Principle）"></a>6. 合成复用原则（Composite Reuse Principle）</h3><blockquote><p>尽量使用合成/聚合的方式，而不是使用继承。</p></blockquote><h2 id="三、-设计模式分类"><a href="#三、-设计模式分类" class="headerlink" title="三、 设计模式分类"></a>三、 设计模式分类</h2>设计模式总共分为三大类，共23种设计模式。<br><img src="https://cdn.xiaofangdyd.cn/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B.jpg" alt="设计模式分类.jpg"></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-定义及作用&quot;&gt;&lt;a href=&quot;#一、-定义及作用&quot; class=&quot;headerlink&quot; title=&quot;一、 定义及作用&quot;&gt;&lt;/a&gt;一、 定义及作用&lt;/h2&gt;&lt;h3 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1. 定义&quot;&gt;&lt;/a&gt;1. 定义&lt;/h3&gt;&lt;p&gt;设计模式（Design pattern）是软件开发人员在软件开发过程中&lt;strong&gt;面临特定问题设计的解决方案&lt;/strong&gt;，这些解决方案是众多开发人员经过相当长一段时间的试验和错误总结出来的。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="OOAD" scheme="http://yoursite.com/categories/tools/OOAD/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>阿里云搭建typecho博客平台</title>
    <link href="http://yoursite.com/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAtypecho%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0/"/>
    <id>http://yoursite.com/阿里云搭建typecho博客平台/</id>
    <published>2018-03-29T09:52:32.000Z</published>
    <updated>2019-01-30T04:04:17.200Z</updated>
    
    <content type="html"><![CDATA[<p>经过半年多的折腾，我的博客最终在阿里云的服务器成功落户，中间经历了更换域名，导入ssl证书，更换博客平台，网站迁移，网站备案等一系列事件。在弄这些东西的时候，免不了查询资料，我发现国内的资料要么比较老，要么就不全。这篇博客是我安装的一个记录，也可以算是备份。如果有和我一样情况的，本文也可以是一个参考。</p><a id="more"></a><p>使用本文教程有几个前提要求：</p><ol><li>租用的有服务器，系统为ubuntu16.04（其他系统大同小异）</li><li>购买的有域名且通过工信部icp备案。（未备案的服务器需在中国大陆境外）</li></ol><p>本文分为以下几个部分：<strong>lnmp环境安装、网站部署、部署typecho、备份及迁移后的恢复</strong></p><h2 id="一、lnmp环境安装"><a href="#一、lnmp环境安装" class="headerlink" title="一、lnmp环境安装"></a>一、lnmp环境安装</h2><p>lnmp在网上有很多安装方法，需要输入大量的命令，这里取最简单的<a href="https://lnmp.org" target="_blank" rel="noopener">lnmp一键安装包</a></p><h3 id="1-登录服务器"><a href="#1-登录服务器" class="headerlink" title="1. 登录服务器"></a>1. 登录服务器</h3><p>使用xshell或类似的SSH工具登录服务器，<br>登录后运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S lnmp</span><br></pre></td></tr></table></figure></p><p>如果提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen:commend not found</span><br></pre></td></tr></table></figure></p><p>可以先安装screen后再执行。<br>使用screen的目的在于防止安装中途ssh由于长时间未通信而断开链接，导致安装程序中断。如果实在不想弄可以跳过。</p><h3 id="2-下载并安装lnmp一键安装包"><a href="#2-下载并安装lnmp一键安装包" class="headerlink" title="2. 下载并安装lnmp一键安装包"></a>2. 下载并安装lnmp一键安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://soft.vpser.net/lnmp/lnmp1.4.tar.gz &amp;&amp; tar zxf lnmp1.4.tar.gz &amp;&amp; cd lnmp1.4 &amp;&amp; ./install.sh lnmp</span><br></pre></td></tr></table></figure><p>安装过程在官方说明中已经很详细指出：<a href="https://lnmp.org/install.html" target="_blank" rel="noopener">官方安装说明</a><br>最简单的教程就是除了提示<strong>输入MySql密码</strong>时，其他一路回车选默认值就好。</p><p><img src="https://cdn.xiaofangdyd.cn/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAtypecho.png" alt=""></p><h2 id="二、-网站部署"><a href="#二、-网站部署" class="headerlink" title="二、 网站部署"></a>二、 网站部署</h2><h3 id="1-添加网站"><a href="#1-添加网站" class="headerlink" title="1. 添加网站"></a>1. 添加网站</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lnmp vhost add</span><br></pre></td></tr></table></figure><p>步骤同样可以在官方说明中找到：<a href="https://lnmp.org/faq/lnmp-vhost-add-howto.html" target="_blank" rel="noopener">添加网站说明</a><br>需要注意的是</p><ol><li>网站的目录最好设置为<code>/home/wwwroot/default</code>这样方便我们以后添加数据库管理界面。</li><li>提示是否启动伪静态<strong>Allow Rewrite rule? (y/n)</strong>时，输入<strong>y</strong>，并在选择配置文件时，输入<strong>typecho</strong>。</li><li>其他的看个人需求添加，懒得看的全部回车就好。<h3 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2. 域名解析"></a>2. 域名解析</h3>去域名注册商把网站解析到服务器ip上。此过程不再赘述。<h3 id="3-添加ssl证书"><a href="#3-添加ssl证书" class="headerlink" title="3. 添加ssl证书"></a>3. 添加ssl证书</h3>在这里我使用的是阿里云Symantec免费SSL证书，申请方法自行百度。<br>将适用于Nginx的证书文件下载下来。<br>在<strong>/usr/local/nginx</strong>目录下新建<strong>cert</strong>目录，并将下载的两个文件放到cert目录下，并分别命名为<strong>ssl.pem; ssl.key</strong>。<br>之后将<strong>nginx中对应域名的conf文件</strong>（一般位于”/usr/local/nginx/conf/vhost”中）先备份，之后将80端口部分修改为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server </span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    #listen [::]:80;\</span><br><span class="line">    server_name your_server_name; </span><br><span class="line">    index index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">    root /home/wwwroot/default;</span><br><span class="line">    include typecho.conf;</span><br><span class="line">    include enable-php-pathinfo.conf;</span><br><span class="line">    ##强制把http请求跳转到https请求</span><br><span class="line">    return 301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>添加443端口部分:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name your_server_name;</span><br><span class="line">    ssl on;</span><br><span class="line">    root html;</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    ssl_certificate /usr/local/nginx/cert/ssl.pem;</span><br><span class="line">    ssl_certificate_key /usr/local/nginx/cert/ssl.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    include typecho.conf;</span><br><span class="line">    include enable-php-pathinfo.conf;</span><br><span class="line"></span><br><span class="line">    location /nginx_status</span><br><span class="line">    &#123;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">    &#123;</span><br><span class="line">        expires 30d;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(js|css)?$</span><br><span class="line">    &#123;</span><br><span class="line">        expires 12h;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ /\.</span><br><span class="line">    &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    access_log /home/wwwlogs/access.log; &#125;</span><br></pre></td></tr></table></figure></p><p>完成后重启nginx服务<code>nginx -s reload</code></p><p><strong>注意：</strong>在此conf文件中，我默认开启了<strong>http强制跳转https</strong>，并解决了typecho在lnmp一键安装包中<strong>由于伪静态导致的后台无法访问</strong>的问题。有其他需要可以自行改动。</p><h2 id="三、-部署typecho"><a href="#三、-部署typecho" class="headerlink" title="三、 部署typecho"></a>三、 部署typecho</h2><h3 id="1-上传typecho到网站目录"><a href="#1-上传typecho到网站目录" class="headerlink" title="1. 上传typecho到网站目录"></a>1. 上传typecho到网站目录</h3><p>先从官网下载安装包，再上传到<strong>/home/wwwroot</strong>文件夹下。<br>使用tar zxvf解压缩后，将老default文件夹改为old，将解压出的build文件夹命名为default。<br>给新default文件夹操作权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 default</span><br></pre></td></tr></table></figure></p><h3 id="2-添加数据库"><a href="#2-添加数据库" class="headerlink" title="2. 添加数据库"></a>2. 添加数据库</h3><p>由于上一步替换掉了之前的default文件夹，因此phpmyadmin这个在线数据库管理系统需要从新安装。<br>进入~/lnmp1.4目录，执行 <code>./upgrade.sh phpmyadmin</code>输入<strong>4.6.6</strong>即可。<br>之后访问<code>服务器ip/phpmyadmin</code>用root登录后新建typecho数据库。</p><h3 id="3-安装typecho"><a href="#3-安装typecho" class="headerlink" title="3. 安装typecho"></a>3. 安装typecho</h3><p>直接访问网站即可跳到typecho的安装界面，按步骤安装完成后即可使用。<br>如果提示无法创建文件xxx，请手动创建xxx，是因为在1中未给文件夹操作权限。</p><h2 id="四、-备份及迁移后的恢复"><a href="#四、-备份及迁移后的恢复" class="headerlink" title="四、 备份及迁移后的恢复"></a>四、 备份及迁移后的恢复</h2><h3 id="1-备份"><a href="#1-备份" class="headerlink" title="1. 备份"></a>1. 备份</h3><p>在博客的日常使用中，建议至少每一个月备份一次。由于typecho自带的备份不能备份主题，图片和插件，因此如果使用了第三方主题、上传了插件或在博客中上传了图片，都需要将default/usr下的<strong>plugins、themes、uploads</strong>三个文件夹进行备份，下载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#压缩命令</span><br><span class="line">tar zcvf beifen.tar.gz /home/wwwroot/default/usr</span><br></pre></td></tr></table></figure></p><p>之后可以把压缩包保存到本地。</p><h3 id="2-恢复"><a href="#2-恢复" class="headerlink" title="2. 恢复"></a>2. 恢复</h3><p>在进行服务器迁移时，安装完typecho后，可以先恢复typecho自带的备份，恢复完成后会发现文章中的图片全都打不开，之后就可以将备份好的usr上传到服务器，解压后移动到相应的位置即可。</p><h2 id="五、-注意事项"><a href="#五、-注意事项" class="headerlink" title="五、 注意事项"></a>五、 注意事项</h2><ol><li>typecho部署在阿里云上的话，上传图片会被防火墙拦截，需要在控制台防火墙中将ftp的21端口打开。</li><li>有更新今后会补充。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过半年多的折腾，我的博客最终在阿里云的服务器成功落户，中间经历了更换域名，导入ssl证书，更换博客平台，网站迁移，网站备案等一系列事件。在弄这些东西的时候，免不了查询资料，我发现国内的资料要么比较老，要么就不全。这篇博客是我安装的一个记录，也可以算是备份。如果有和我一样情况的，本文也可以是一个参考。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="typecho" scheme="http://yoursite.com/tags/typecho/"/>
    
  </entry>
  
  <entry>
    <title>同步和异步，阻塞和非阻塞</title>
    <link href="http://yoursite.com/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%EF%BC%8C%E9%98%BB%E5%A1%9E%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
    <id>http://yoursite.com/同步和异步，阻塞和非阻塞/</id>
    <published>2018-03-25T14:53:20.000Z</published>
    <updated>2019-01-30T03:43:29.475Z</updated>
    
    <content type="html"><![CDATA[<p>在学习计算机操作系统的时候，经常会听老师讲到<strong>同步(Sync)/异步(Async)、阻塞(Block)/非阻塞(Unblock)</strong>四种调用方式，并且这些概念经常会搞混，下面说说我个人的理解过程。<br><a id="more"></a></p><h2 id="1-同步和异步"><a href="#1-同步和异步" class="headerlink" title="1. 同步和异步"></a>1. 同步和异步</h2><ul><li>同步：所谓同步，就是在发出一个功能调用之后，在没有得到结果之前，该调用就不返回。按照这个定义，其实绝大部分函数都是同步调用。</li><li>异步：就是在发出一个功能调用之后，调用返回。被调用的部件在完成后，通过状态、通知或回调来通知调用者。</li></ul><p>在程序里，同步和异步，是从程序通信过程来定义的。同步过程发起请求后，等到结果再返回；异步过程发起请求后立即返回，后续有事件通知。<br>即<strong>调用的结果是调用者主动去获取的</strong>（比如一直等待recvfrom或者设置超时等待的select），则为同步。而<strong>调用结果是被调用者在完成后通知调用者的</strong>（比如Windows的IOCP），则为异步。</p><h2 id="2-阻塞和非阻塞"><a href="#2-阻塞和非阻塞" class="headerlink" title="2. 阻塞和非阻塞"></a>2. 阻塞和非阻塞</h2><ul><li>阻塞：阻塞调用是指调用结果返回之前，当前进程被挂起（线程进入非可执行状态，在这个状态下，cpu不会给线程分配时间片，当I/O操作结束，该线程阻塞状态解除，重新变为活动线程）。函数只有在得到结果之后才会返回。</li><li>非阻塞：和阻塞的概念相对，指在不能立即得到结果之前，该函数不会阻塞当前的线程，而会立刻返回，线程处于活跃状态。</li></ul><p>在程序里，阻塞和非阻塞，是针对<strong>调用者所在线程是否在调用后主动挂起</strong>来说的。即如果在线程中调用者发出调用后，在被调用者返回之前，<strong>该线程主动挂起</strong>，则为阻塞。若<strong>线程不主动挂起，而继续向下执行</strong>，则为非阻塞。</p><h2 id="3-四者的联系和区别"><a href="#3-四者的联系和区别" class="headerlink" title="3. 四者的联系和区别"></a>3. 四者的联系和区别</h2><p>我之前经常把同步和阻塞搞混，认为是等同的。<strong>其实根本不一样</strong>，对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。</p><p>在这里我将列举一个找资料过程中看到的例子来说明同步和异步、阻塞和非阻塞之间的联系和区别。</p><p>老张用两个水壶烧水（普通水壶和响水壶）。</p><ol><li>同步阻塞：老张把普通水壶放到火上，站着等待，每隔一段时间看看水开没开。</li><li>同步非阻塞：老张把普通水壶放到火上，然后去做别的事，同样每隔一段时间看看水开没开。</li><li>异步阻塞：老张把响水壶放到火上，站着等待，水烧开时水壶呜呜响，从而知道水开了。</li><li>异步非阻塞：老张把响水壶放到火上，然后去做别的事，水烧开时水壶呜呜响，从而知道水开了。</li></ol><p>所谓同步异步，只是对于水壶而言。</p><ul><li>普通水壶：同步；</li><li>响水壶：异步。</li></ul><p>所谓阻塞非阻塞，只是针对老张而言。</p><ul><li>站着等待的老张：阻塞；</li><li>做别的事的老张：非阻塞。</li></ul><p>情况1、3中的老张就是阻塞的，在等待的时候，别人喊他是不会应答的。虽然3中响水壶是异步的，但对于阻塞的老张没有太大意义。</p><p>所以一般<strong>异步是配合非阻塞</strong>来使用的，这样才能发挥异步的作用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习计算机操作系统的时候，经常会听老师讲到&lt;strong&gt;同步(Sync)/异步(Async)、阻塞(Block)/非阻塞(Unblock)&lt;/strong&gt;四种调用方式，并且这些概念经常会搞混，下面说说我个人的理解过程。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="idea" scheme="http://yoursite.com/categories/tools/idea/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>生活中的算法</title>
    <link href="http://yoursite.com/%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/生活中的算法/</id>
    <published>2018-03-17T07:05:40.000Z</published>
    <updated>2019-01-30T03:41:41.496Z</updated>
    
    <content type="html"><![CDATA[<p>前几天梦见幼儿园排队，想到了冒泡排序，抖个机灵发朋友圈里了，还说要总结生活里的算法……这几天一直在想，先把目前能想到的写出来吧，以后再补充。（以后再也不乱立flag了）</p><a id="more"></a><ul><li>程序员穿袜子</li></ul><p>这是一个程序员圈子里很经典的一个梗。从名字中就散发出生活的清香。</p><blockquote><p>程序员把他所有的袜子都放在卧室的地板上，摆成一个实心三角形（小顶堆）。每天下班回家就把袜子放在最后面，也就是堆的末尾。然后每次拿起两双袜子放在鼻子下闻闻，把相对较臭的放在后面，不断向前调整袜子在三角形中的位置，直到下面的都比上面的臭为止。这样，程序员每天出门就能方便的选出一双最不臭的袜子。</p></blockquote><p>在这个梗里，程序员使用的是堆排序，这是一个有味道的算法……</p><ul><li>二分找肉法</li></ul><p>吃串串香的时候，串特别长，一段串着肉，但有的店家没弄好，煮一会儿后肉全掉汤里了。</p><p>假设我手中有32根串，但末端只有一片牛肚。如果我一根一根找，那么在最坏的情况下，我需要O（n），也就是32次挑选才能选出那根有肉的串。</p><p>于是我发明了二分找肉法，首先把手里的串分成等量的两份，然后再对有肉的一份进行同样的操作，直到n=1为止。</p><p>复杂度从O（n）降为O（logn），只需要5次挑选。</p><p>在我发明算法并找到牛肚的时间里，汤里的31串牛肚估计已经老了。</p><ul><li>衣柜算法</li></ul><p>在家里的时候，衣服分门别类放成几摞，大的衣服还能挂起来，找衣服是很轻松的，近似于O（1）的复杂度，可以看作实现了哈希字典。</p><p>在寝室里衣柜基本只够将所有的衣服叠在一起放几摞（这里为了说明方便，按1摞处理）。要找一件不起眼的衣服，需要遍历一整叠，找到后还需要先把上层的衣服pop出来，取衣服过后再push进去……差不多就是一个stack栈，非常不适合查找的一种数据结构（手动再见）</p><ul><li>课堂算法</li></ul><p>高中上课，语数外理化生每节课40分钟，一般不会连上，体育音乐之类一周一节，还时常被抢占，处于饥饿状态，这里使用的是多级反馈时间片轮转调度算法。</p><p>上大学后，一节课50分钟，还是两节连着上，时间片边长了，也没了抢占，这就是基本的时间片轮转调度算法。</p><p>寒暑假在家，想学习劳逸结合，也运用时间片轮转调度算法。睡觉一片，吃饭一片，看视频一片，吃鸡一片，吃鸡一片，吃鸡一片，然后没时间学习了……</p><p>想想真是佩服自己高中时候，上节课刚考完数学休息几分钟马上就能写一篇作文，几门课切换自如，寄存器如此强大，现在它已经快废了吧╮(╯▽╰)╭</p><ul><li>课文索引</li></ul><p>以前语文课老师要求我们一人读一段课文，快到我的时候，我快速浏览全文，建立起跳转索引，然后仔细听前面同学读的内容，迅速匹配到相应的字符串。</p><ul><li>查字典</li></ul><p>小学查字典时会用trie树（在索引上找），初中以后就直接哈希（翻首字母）+ 二分（胡翻）了。</p><ul><li>杂七杂八的一些小算法（合起来写）</li></ul><p>幼儿园老师按高低个排队，“高的站后面，小的站前面”、“你们俩换一下”，这是对基本有序数组的冒泡排序。</p><p>忘记密码锁密码的时候，一个一个试，穷举。<br>这局打完我再去上课，贪心算法。<br>各种心里推断题，1、你开心吗？A、开心，去第2题。B、不开心，去第3题。有向图。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天梦见幼儿园排队，想到了冒泡排序，抖个机灵发朋友圈里了，还说要总结生活里的算法……这几天一直在想，先把目前能想到的写出来吧，以后再补充。（以后再也不乱立flag了）&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/tools/code/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>诸事皆宜，百无禁忌</title>
    <link href="http://yoursite.com/%E8%AF%B8%E4%BA%8B%E7%9A%86%E5%AE%9C%EF%BC%8C%E7%99%BE%E6%97%A0%E7%A6%81%E5%BF%8C/"/>
    <id>http://yoursite.com/诸事皆宜，百无禁忌/</id>
    <published>2018-03-10T16:58:14.000Z</published>
    <updated>2019-01-30T03:37:42.553Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.xiaofangdyd.cn/%E8%AF%B8%E4%BA%8B%E7%9A%86%E5%AE%9C_%E7%99%BE%E6%97%A0%E7%A6%81%E5%BF%8C/1.jpg" alt=""></p><p>以前觉得这个世界是讲道理的，其实不是。</p><p>勤勤恳恳做一些我认为对的事情，为了某个目标倾尽所有，<strong>我相信只要自己足够真诚，就一定可以得到这个世界的认可。</strong></p><p>可这个世界残酷就残酷在存在太多太多的事与愿违。</p><p><strong>我所有的只能让自己安心，除此之外并不一定就能够被承认。</strong><br><a id="more"></a><br><img src="https://cdn.xiaofangdyd.cn/%E8%AF%B8%E4%BA%8B%E7%9A%86%E5%AE%9C_%E7%99%BE%E6%97%A0%E7%A6%81%E5%BF%8C/2.jpeg" alt=""><br>比如认真念书，到头来也没能有什么好成绩; 我拿出来全部的真诚，也没能处理好人与人之间的关系。我以为自己努力不犯错，就不会不被爱，不会被曲解，不会被拋弃。</p><p>其实不是的。<strong>世界是冷漠的</strong>，它不在乎你付出多少，也不讲人情，不存在因果报应，也没什么合理不合理的。</p><blockquote><p>我所得到的都是侥幸，所失去的才是人生。</p></blockquote><p>这样的心态真的是很棒啊。</p><p><img src="https://cdn.xiaofangdyd.cn/%E8%AF%B8%E4%BA%8B%E7%9A%86%E5%AE%9C_%E7%99%BE%E6%97%A0%E7%A6%81%E5%BF%8C/3.jpeg" alt=""></p><p>我当然相信这个世界上有真正热爱生活的人，但一定也会有不少人，能够心平气和地面对得失，放弃该放弃的，控制能控制的，在深不见底的绝望里冷漠走过，生出更高级的热爱。</p><p>于是结果啊过程啊都没那么重要了，关键还是看自己的态度。尽人事听天命大概就是这么一个道理。</p><p>已经无所谓这个世界讲不讲道理了，<strong>无愧于心</strong>，就是我现在最大的追求。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.xiaofangdyd.cn/%E8%AF%B8%E4%BA%8B%E7%9A%86%E5%AE%9C_%E7%99%BE%E6%97%A0%E7%A6%81%E5%BF%8C/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以前觉得这个世界是讲道理的，其实不是。&lt;/p&gt;
&lt;p&gt;勤勤恳恳做一些我认为对的事情，为了某个目标倾尽所有，&lt;strong&gt;我相信只要自己足够真诚，就一定可以得到这个世界的认可。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可这个世界残酷就残酷在存在太多太多的事与愿违。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我所有的只能让自己安心，除此之外并不一定就能够被承认。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>《2018刑侦科推理试题》详解</title>
    <link href="http://yoursite.com/%E3%80%8A2018%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98%E3%80%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/《2018刑侦科推理试题》详解/</id>
    <published>2018-03-02T15:47:00.000Z</published>
    <updated>2019-01-29T15:44:41.376Z</updated>
    
    <content type="html"><![CDATA[<p>最近江苏网警的一篇《2018刑侦科推理试题》养活了很多自媒体朋友，我最初了解的渠道是在qq看点……据报道，有网友晒出解题过程要满满好几页稿纸，有人用电脑软件计算竟然花了<strong>近半小时</strong>……我按自己的思路走一遍发现还不算太难，是不是媒体故意夸大其词来博眼球？老一辈教导我们：“不要听风就是雨，将来报道出了偏差，是要负责任的。”本着马列唯物主义的质疑精神，我写出了自己的解题过程，<strong>只有6行</strong>；电脑模拟基本秒出答案，为了增强真实性，本文附带模拟源代码。</p><a id="more"></a><ul><li>首先亮题：</li></ul><p><img src="https://cdn.xiaofangdyd.cn/2018%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98/1.png" alt=""></p><ul><li>再亮答案：</li></ul><p><img src="https://cdn.xiaofangdyd.cn/2018%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98/2.jpg" alt=""></p><ul><li>思路（非代码相关人士可以跳两段再看）</li></ul><p>说实话，看到这题的时候我是懵逼的，但只要读懂题意，完全不需要动脑子推理，不需要切入点，编好程序瞎鸡儿运行就好。</p><p>我记得有人曾跟我说过，你们敲代码的是不是计算能力都特好，其实说实话，如果有手机，2位数+2位数我都懒得算，能用机器准确得出结果，为什么要费脑子。</p><p>回归本题，用C++编程，暴力列举出所有的情况，再一一验证条件，运行。</p><ul><li><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> answer[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> count[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max, min;</span><br><span class="line">    max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max_order = <span class="number">0</span>;</span><br><span class="line">    min=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> min_order = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> test=<span class="string">'A'</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">        answer[i] = <span class="number">0</span>;</span><br><span class="line">        b[i]=<span class="number">0</span>;</span><br><span class="line">        count[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"test\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(b[<span class="number">0</span>]=<span class="number">0</span>; b[<span class="number">0</span>]&lt;<span class="number">4</span>; b[<span class="number">0</span>]++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(b[<span class="number">1</span>]=<span class="number">0</span>; b[<span class="number">1</span>]&lt;<span class="number">4</span>; b[<span class="number">1</span>]++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(b[<span class="number">2</span>]=<span class="number">0</span>; b[<span class="number">2</span>]&lt;<span class="number">4</span>; b[<span class="number">2</span>]++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(b[<span class="number">3</span>]=<span class="number">0</span>; b[<span class="number">3</span>]&lt;<span class="number">4</span>; b[<span class="number">3</span>]++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(b[<span class="number">4</span>]=<span class="number">0</span>; b[<span class="number">4</span>]&lt;<span class="number">4</span>; b[<span class="number">4</span>]++)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(b[<span class="number">5</span>]=<span class="number">0</span>; b[<span class="number">5</span>]&lt;<span class="number">4</span>; b[<span class="number">5</span>]++)&#123;</span><br><span class="line">                            <span class="keyword">for</span>(b[<span class="number">6</span>]=<span class="number">0</span>; b[<span class="number">6</span>]&lt;<span class="number">4</span>; b[<span class="number">6</span>]++)&#123;</span><br><span class="line">                                <span class="keyword">for</span>(b[<span class="number">7</span>]=<span class="number">0</span>; b[<span class="number">7</span>]&lt;<span class="number">4</span>; b[<span class="number">7</span>]++)&#123;</span><br><span class="line">                                    <span class="keyword">for</span>(b[<span class="number">8</span>]=<span class="number">0</span>; b[<span class="number">8</span>]&lt;<span class="number">4</span>; b[<span class="number">8</span>]++)&#123;</span><br><span class="line">                                        <span class="keyword">for</span>(b[<span class="number">9</span>]=<span class="number">0</span>; b[<span class="number">9</span>]&lt;<span class="number">4</span>; b[<span class="number">9</span>]++)&#123;</span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">1</span>]&lt;<span class="number">2</span>)&#123; <span class="keyword">if</span>(b[<span class="number">4</span>]!=(b[<span class="number">1</span>]+<span class="number">2</span>)) <span class="keyword">continue</span>;&#125;</span><br><span class="line">                                            <span class="keyword">else</span> &#123;<span class="keyword">if</span>(b[<span class="number">4</span>]!=(b[<span class="number">1</span>]<span class="number">-2</span>)) <span class="keyword">continue</span>;&#125;</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">2</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">5</span>]!=b[<span class="number">1</span>]) || (b[<span class="number">1</span>]!=b[<span class="number">3</span>]) ||(b[<span class="number">5</span>]!=b[<span class="number">3</span>])|| (b[<span class="number">2</span>]==b[<span class="number">5</span>]) || (b[<span class="number">2</span>]==b[<span class="number">1</span>] ) || (b[<span class="number">2</span>]==b[<span class="number">3</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b[<span class="number">2</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">2</span>]!=b[<span class="number">1</span>]) || (b[<span class="number">1</span>]!=b[<span class="number">3</span>]) ||(b[<span class="number">2</span>]!=b[<span class="number">3</span>])|| (b[<span class="number">2</span>]==b[<span class="number">5</span>]) || (b[<span class="number">5</span>]==b[<span class="number">1</span>] ) || (b[<span class="number">5</span>]==b[<span class="number">3</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(b[<span class="number">2</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">5</span>]!=b[<span class="number">2</span>]) || (b[<span class="number">5</span>]!=b[<span class="number">3</span>]) ||(b[<span class="number">2</span>]!=b[<span class="number">3</span>])|| (b[<span class="number">2</span>]==b[<span class="number">1</span>]) || (b[<span class="number">5</span>]==b[<span class="number">1</span>] ) || (b[<span class="number">1</span>]==b[<span class="number">3</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">5</span>]!=b[<span class="number">1</span>]) || (b[<span class="number">1</span>]!=b[<span class="number">2</span>]) ||(b[<span class="number">5</span>]!=b[<span class="number">2</span>])|| (b[<span class="number">3</span>]==b[<span class="number">5</span>]) || (b[<span class="number">3</span>]==b[<span class="number">1</span>] ) || (b[<span class="number">2</span>]==b[<span class="number">3</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">3</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">0</span>] != b[<span class="number">4</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">3</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">1</span>] != b[<span class="number">6</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">3</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">0</span>] != b[<span class="number">8</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">5</span>] != b[<span class="number">9</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">4</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">7</span>] != b[<span class="number">4</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">4</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">4</span>] != b[<span class="number">3</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">4</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">4</span>] != b[<span class="number">8</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(b[<span class="number">4</span>] != b[<span class="number">6</span>] ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">5</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">7</span>] != b[<span class="number">1</span>]) || (b[<span class="number">7</span>]!=b[<span class="number">3</span>] ) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">5</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">7</span>] != b[<span class="number">0</span>]) || (b[<span class="number">7</span>]!=b[<span class="number">5</span>] ) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">5</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">7</span>] != b[<span class="number">2</span>]) || (b[<span class="number">7</span>]!=b[<span class="number">9</span>] ) ) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">7</span>] != b[<span class="number">4</span>]) || (b[<span class="number">7</span>]!=b[<span class="number">8</span>] ) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)&#123;</span><br><span class="line">                                                count[j]=<span class="number">0</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++)&#123;</span><br><span class="line">                                                count[b[j]]++;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            max = <span class="number">0</span>;</span><br><span class="line">                                            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                                                <span class="keyword">if</span> (count[j] &gt; max) &#123;max = count[j]; max_order = j;&#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                            min = <span class="number">10</span>;</span><br><span class="line">                                            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                                                <span class="keyword">if</span> (count[j] &lt; min) &#123;min = count[j]; min_order = j;&#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">6</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(( min_order != <span class="number">2</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">6</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(( min_order != <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">6</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(( min_order != <span class="number">0</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(( min_order != <span class="number">3</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">7</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(<span class="built_in">abs</span>((b[<span class="number">6</span>]-b[<span class="number">0</span>]))==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">7</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>(<span class="built_in">abs</span>((b[<span class="number">4</span>]-b[<span class="number">0</span>]))==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">7</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(<span class="built_in">abs</span>((b[<span class="number">1</span>]-b[<span class="number">0</span>]))==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(<span class="built_in">abs</span>((b[<span class="number">9</span>]-b[<span class="number">0</span>]))==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">8</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">0</span>]==b[<span class="number">5</span>]) == (b[<span class="number">4</span>]==b[<span class="number">5</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">8</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">0</span>]==b[<span class="number">5</span>]) == (b[<span class="number">4</span>]==b[<span class="number">9</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">8</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">0</span>]==b[<span class="number">5</span>]) == (b[<span class="number">4</span>]==b[<span class="number">1</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((b[<span class="number">0</span>]==b[<span class="number">5</span>]) == (b[<span class="number">4</span>]==b[<span class="number">8</span>]) ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line"></span><br><span class="line">                                            <span class="keyword">if</span>(b[<span class="number">9</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((max-min)!=<span class="number">3</span> ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">9</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">                                                <span class="keyword">if</span>((max-min)!=<span class="number">2</span> ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">9</span>]==<span class="number">2</span>) &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((max-min)!=<span class="number">4</span> ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">if</span>((max-min)!=<span class="number">1</span> ) <span class="keyword">continue</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                            <span class="comment">//printf("%d, %d, %d , %d ,max %c : %d ;  min %c : %d\n", count[0], count[1], count[2], count[3],max_order+test, max, min_order+test, min );</span></span><br><span class="line">                                            <span class="built_in">printf</span>(<span class="string">"final answer is :\n"</span>);</span><br><span class="line">                                            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">                                                <span class="built_in">printf</span>(<span class="string">"%c "</span>, (<span class="keyword">char</span>)(b[j]+test));</span><br><span class="line">                                            &#125;</span><br><span class="line">                                            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">                                            <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)&#123;</span><br><span class="line">                                                count[j]=<span class="number">0</span>;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>正常解题思路</p></li></ul><p>本解法不需要高深的数学基础，不需要编程知识，只要能读懂题意，抓对方法，解题其实很快。<br>整个题干虽然都很虚，但巧妙利用阅读理解，可以推出很多信息。<br><img src="https://cdn.xiaofangdyd.cn/2018%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98/3.png" alt=""></p><p><strong>条件1：</strong>从第三题可以得出，2、3、4、6题里面，有3题的答案是相同的。<br><strong>条件2：</strong>从第10题可以得出，本试卷答案最多的字母，数字也不会超过5，且本试卷答案最少的字母，肯定小于2（为1或者0）（要想明白这个道理需要一定的逻辑能力）</p><p>这种逻辑题，一旦知道了3题的答案，极大概率就能推出其他答案。鉴于单选题的性质，挨个尝试就可以了。</p><p>1、若3选A，则2、4、6选项相同且不为A，条件1、2满足。<br>1.1、若2、4、6选B，进而推出5、7为D，不满足条件2，错。<br>1.2、若2、4、6选C，由2知5为A，由6知3、8、10为A，条件1、2满足。<br>1.2.1、由8知2、5、10与1答案字母相邻，2为C，5为A，10为A，所以1为B，条件1、2满足。<br>1.2.1.1、理到现在，只有7、9未知，由已知答案可得9为B，条件1、2满足。<br>1.2.1.1.1、最后，7选D，条件1、2满足。</p><p><strong>所以最终答案为：</strong><br><img src="https://cdn.xiaofangdyd.cn/2018%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98/4.png" alt=""></p><ul><li>总结：</li></ul><ol><li>不要相信无良媒体满嘴跑火车，天文科普就是被这群智障媒体弄得一直没起色。</li><li>要培养良好的阅读和推理能力。</li><li>要认识到这不是分散的10道选择题，而是1道整体的推理题。</li><li>一张纸，一只笔，解答事半功倍。</li><li>程序还有优化空间，比如可以把简单的if判断放前面，快速排查掉一些无用的条件。</li></ol><p>所以，@江苏网警，贵单位的刑侦科报道处怎么走？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近江苏网警的一篇《2018刑侦科推理试题》养活了很多自媒体朋友，我最初了解的渠道是在qq看点……据报道，有网友晒出解题过程要满满好几页稿纸，有人用电脑软件计算竟然花了&lt;strong&gt;近半小时&lt;/strong&gt;……我按自己的思路走一遍发现还不算太难，是不是媒体故意夸大其词来博眼球？老一辈教导我们：“不要听风就是雨，将来报道出了偏差，是要负责任的。”本着马列唯物主义的质疑精神，我写出了自己的解题过程，&lt;strong&gt;只有6行&lt;/strong&gt;；电脑模拟基本秒出答案，为了增强真实性，本文附带模拟源代码。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/tools/code/"/>
    
    
  </entry>
  
  <entry>
    <title>《新东方快车谋杀案》一部画面比剧情好看的推理电影</title>
    <link href="http://yoursite.com/%E3%80%8A%E6%96%B0%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%88%E3%80%8B%E4%B8%80%E9%83%A8%E7%94%BB%E9%9D%A2%E6%AF%94%E5%89%A7%E6%83%85%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%8E%A8%E7%90%86%E7%94%B5%E5%BD%B1/"/>
    <id>http://yoursite.com/《新东方快车谋杀案》一部画面比剧情好看的推理电影/</id>
    <published>2018-02-14T15:23:48.000Z</published>
    <updated>2019-01-29T15:39:57.963Z</updated>
    
    <content type="html"><![CDATA[<p>在去年的朋友圈中，我才知道了这个广为人知的故事，这个曾经有过一版堪称经典的电影。直到今天，我才想起来欣赏。说实话，我之前并没有刻意搜索过这个故事，所以我会以一个新人的角度来欣赏这部作品。</p><a id="more"></a><p>在电影的开场，波洛吃早餐量鸡蛋，接着双脚踩屎，再后面用拐杖放倒逃犯，这一切都是在塑造波洛严苛到极致的形象，这种巧妙的安排让我们初识的观众可以很轻松的认识波洛。</p><p><img src="https://cdn.xiaofangdyd.cn/%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%881.jpg" alt="东方快车谋杀案1.jpg"></p><p>当本剧唯一大反派卡塞蒂变成盒子的时候，我才发现他是上了火车的杰克船长。在他被捅死之后，我还下意识觉得他会手上夹着一枚金币，突然跳起来说：“<strong>女士们先生们，你们将永远记住这一天，因为你们差点就捅死了杰克.斯派洛船长。</strong>”</p><p><img src="https://cdn.xiaofangdyd.cn/%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%882.jpg" alt="东方快车谋杀案2.jpg"></p><p>在中间的问询阶段，电影显得略显沉闷。尽管导演采用平行剪辑的手法加快节奏，刻意去增加的剧情的刺激性，但还是处理偏颇。<br><br><br>直到最后的揭秘，电影让所有人走出车厢，在隧道入口排一张长桌，十二名乘客齐聚，呈现《最后的晚餐》之态。晶莹白雪和幽邃黑洞之间，昏黄的灯火下，12名装作不认识的凶手。画面十分美好，可是在剧情上不是特别理想，感觉有点像为了实现《最后的晚餐》的镜头，又受制于车厢空间太小，而做出的无奈之举。</p><p><img src="https://cdn.xiaofangdyd.cn/%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%883.jpeg" alt="东方快车谋杀案3.jpeg"></p><p>最后波洛在说出了12人联合复仇的真相之后，掏出枪放在桌上说：“<strong>你们现在唯一的选择是杀了我，把我扔在冰湖里，因为我不会说谎。</strong>”然后女话剧演员不愿为了掩盖罪行而杀一个无辜的人，拿起枪自杀，发现枪里没子弹……这点我在思考很久后才明白，这是波洛给他们的一个测试。虽然他们杀的是一个十恶不赦的罪犯，但在侦探眼中，他们都参与了杀人，也应该为自己的行为承担责任，不然法律的威严何在？而女话剧演员自杀，让波洛知道，<strong>他们在自己生命受到威胁时，仍然不愿意为了掩盖罪行而杀掉一个无辜的人</strong>。这个举动才是波洛违背自己原则放过所有人的原因。</p><ul><li>脑洞</li></ul><p>最后波洛准备走出车厢时，电影的旁白说：“阿姆斯特朗少校，我终于可以给你回信了……“我忽然觉得<strong>波洛才是本案真正的幕后推手</strong>，为了确保谋杀可以顺利执行，波洛放下偏执和一个花花公子为友，才搭乘上这班列车。他亲临现场，每一个步骤后都开门检查走廊，用自己的推理，演出了戏中戏，为整个案情上了双保险，即使其他人搞砸了，有他最著名侦探的头衔在，最后也可以顺利圆回来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在去年的朋友圈中，我才知道了这个广为人知的故事，这个曾经有过一版堪称经典的电影。直到今天，我才想起来欣赏。说实话，我之前并没有刻意搜索过这个故事，所以我会以一个新人的角度来欣赏这部作品。&lt;/p&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
      <category term="电影" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="电影" scheme="http://yoursite.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>《月亮和六便士》----是否有个魔鬼抓住了他的灵魂？</title>
    <link href="http://yoursite.com/%E3%80%8A%E6%9C%88%E4%BA%AE%E5%92%8C%E5%85%AD%E4%BE%BF%E5%A3%AB%E3%80%8B-%E6%98%AF%E5%90%A6%E6%9C%89%E4%B8%AA%E9%AD%94%E9%AC%BC%E6%8A%93%E4%BD%8F%E4%BA%86%E4%BB%96%E7%9A%84%E7%81%B5%E9%AD%82%EF%BC%9F/"/>
    <id>http://yoursite.com/《月亮和六便士》-是否有个魔鬼抓住了他的灵魂？/</id>
    <published>2018-01-27T03:25:03.000Z</published>
    <updated>2019-01-29T15:35:53.979Z</updated>
    
    <content type="html"><![CDATA[<p>啃完了《月亮与六便士》，有种当头一棒的痛感。总是渴望找到一项东西，然后为之不管不顾、 为之疯狂。一潭死水的生活最是让人窒息 。最痛苦的事不是平衡地上的六便士和天上月亮的关系，而是当你想仰望，却压根没找到天上的月亮。<br><a id="more"></a></p><h4 id="摘录："><a href="#摘录：" class="headerlink" title="摘录："></a>摘录：</h4><ul><li><p>说这些豪言壮语的人可能还觉得他们在说一些前人未曾道过的真理，但是实际上连他们说话的腔调前人也已经用过一百次，而且丝毫也没有变化。钟摆摆过来又荡过去，这一旅程永远反复循环。</p></li><li><p>在那个时代谈话仍然被看作是一种需要下功夫陶冶的艺术，一句巧妙的对答比锅子底下噼啪爆响的荆棘更受人赏识，格言警句当时还不是痴笨的人利用来冒充聪敏的工具，</p></li><li><p>同情体贴本是一种很难得的本领，但是却常常被那些知道自己有这种本领的人滥用了。他们一看到自己的朋友有什么不幸就恶狠狠地扑到人们身上，把自己的全部才能施展出来，这就未免太可怕了<br>它使人想到一条平静的小河，蜿蜒流过绿茸茸的牧场，与郁郁的树荫交相掩映，直到最后泻入烟波浩渺的大海中。但是大海却总是那么平静，总是沉默无言、声色不动，你会突然感到一种莫名的不安。</p></li><li><p>有些人的生活只是社会有机体的一部分，他们只能生活在这个有机体内，也只能依靠它而生活，这种人总是给人以虚幻的感觉；</p></li><li><p>我决定第二天晚上再去找思特里克兰德，因为我本能地觉得，必须细致盘算，并选定这一时间去。如果想从感情上说动一个人，在午饭以前是很少会成功的。</p></li><li><p>只有诗人同圣徒才能坚信，在沥青路面上辛勤浇水会培植出百合花来。</p></li><li><p>有人说灾难不幸可以使人性高贵，这句话并不对；叫人做出高尚行动的有时候反而是幸福得意，灾难不幸在大多数情况下只能使人们变得心胸狭小、报复心更强。</p></li><li><p>他非常重感情，但是在他那很容易就被打动的感情里面却含有某种愚蠢的东西，让你接受了他好心肠的帮助却丝毫没有感激之情。向他借钱就好象从小孩儿手里抢东西一样；因为他太好欺侮，你反而有点儿看不起他。</p></li><li><p>有时候一个人的外貌同他的灵魂这么不相称，这实在是一件苦不堪言的事。</p></li><li><p>如果灵魂真能出窍的话，不论出什么代价我也得试一次；只有这样我才能在画室里看到他俩私下如何过活，才能听到他们交谈些什么。总之一句话，我没有可以供我的幻想力发挥作用的最小依据。</p></li><li><p>女人们不断为了爱情而自寻短见，但是一般说来她们总是做得很小心，不让自杀成为事实。通常这只是为了引起她们情人的怜悯或者恐怖而作的一个姿态。</p></li><li><p>护士用她那双宁静、慈祥的眼睛望着戴尔克，这双眼睛曾经看到过人世的一切恐怖和痛苦，但是因为那里面装的是一个没有罪恶的世界的幻景，所以她的目光是清澈的。</p></li><li><p>我们非常可怜地想把自己心中的财富传送给别人，但是他们却没有接受这些财富的能力。因此我们只能孤独地行走，尽管身体互相依傍却并不在一起，既不了解别的人也不能为别人所了解。</p></li><li><p>他的思想这时会平静地飘浮在九天之上，他对那个女人感到又嫌恶又可怕，也许那感觉就象一只翩翩飞舞于花丛中的蝴蝶，见到它胜利地蜕身出来的肮脏的蛹壳一样。</p></li><li><p>小丑的嘴唇在微笑，他的笑话越来越滑稽，因为在他逗人发笑的时候他更加感到自己无法忍受的孤独。</p></li><li><p>上帝的磨盘转动很慢，但是却磨得很细。</p></li></ul><h4 id="感想："><a href="#感想：" class="headerlink" title="感想："></a>感想：</h4><p>月亮代表高高在上的理想，而六便士代表平凡的现实。理想可能是遥不可及的悬在空中的月亮，而世俗的名誉财富却像六便士一样只要老老实实遵守社会规范努力工作，都是唾手可得的。主人公为了追求画画的理想而放弃了现实的世俗生活，虽然穷困潦倒几次濒临死亡，仍然不忘初心，最终虽然少有人见证到，但还是创造出了传世之作。<br>主人公本来是一个老实体面的经济工作者，有着稳定充足的收入，有幸福的家庭；但突然有一天，他决定放弃这种生活，去追寻自己的艺术。这种转折是毫无征兆的，他就像豁然开朗一般，无所顾忌地抛弃世俗的一切，去追寻自己的艺术理想。</p><blockquote><p>“我怀疑他的灵魂里是否深埋着某种创作本能，那种本能虽然受他的生活环境所抑制，却像肿瘤在活体器官中膨胀那样顽强地生长着，最终控制了他整个人，迫使他不由自主地采取行动。” </p></blockquote><p>前段时间一直在想，我们是不是真的能够看清自己内心所想所盼。我们所成为的人，到底是灵魂的决定还是外界的推动。生活在人群当中，不得不重视别人的看法和评价，不得不在心中住进一个卫兵，当有其他与普世价值相违背的想法冒出，卫兵本能的将其砍掉。可惜，抽刀断水，也许我不明白有什么不对，但始终觉得意难平。<br>我忽然想到了顺治，万里河山，说走就走。</p><p> 连最至高无上的权利，都阻挡不了内心的渴望。</p><p> 尼采为什么会疯</p><p> 梵高为什么割掉耳朵</p><p> 海明威为什么自杀</p><p> 追逐梦想就是追逐自己的厄运，在满地都是六便士的街上，他抬起头看到了月光。可能他想通了这一切，才能踩在六便士上，赏着月光，衣衫褴褛，食不果腹。    </p><p> 是否有个魔鬼抓住了他的灵魂？让他只能俯首称臣。     </p><p> 那些命中注定的狂热，对抗卫兵的勇气，最终让他内心安宁。</p><p> 所有的热爱，在投身于其中的时候，已经得到了最大的报酬，而是否有所认可与收获，都应当处之泰然。</p><p> 主人公为什么最后选择烧掉他那画有惊世之作的屋子，因为最丰腴的愉悦感，已经在创作的时候产生，任他人看与不看，都与我何干？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啃完了《月亮与六便士》，有种当头一棒的痛感。总是渴望找到一项东西，然后为之不管不顾、 为之疯狂。一潭死水的生活最是让人窒息 。最痛苦的事不是平衡地上的六便士和天上月亮的关系，而是当你想仰望，却压根没找到天上的月亮。&lt;br&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
