<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>万有笔记</title>
  
  <subtitle>诸事皆宜，百无禁忌</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-22T03:59:26.066Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Fanghl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hello, Hexo</title>
    <link href="http://yoursite.com/2019/01/22/hello-Hexo/"/>
    <id>http://yoursite.com/2019/01/22/hello-Hexo/</id>
    <published>2019-01-22T03:59:26.000Z</published>
    <updated>2019-01-22T03:59:26.066Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2进制转高进制压缩长度--《天才枪手》观后感</title>
    <link href="http://yoursite.com/2017/12/10/2%E8%BF%9B%E5%88%B6%E8%BD%AC%E9%AB%98%E8%BF%9B%E5%88%B6%E5%8E%8B%E7%BC%A9%E9%95%BF%E5%BA%A6-%E3%80%8A%E5%A4%A9%E6%89%8D%E6%9E%AA%E6%89%8B%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>http://yoursite.com/2017/12/10/2进制转高进制压缩长度-《天才枪手》观后感/</id>
    <published>2017-12-10T15:16:24.000Z</published>
    <updated>2019-01-29T15:12:22.271Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.xiaofangdyd.cn/tiancaiqiangshou1.png" alt="天才枪手"><br>天才枪手这部剧中，女主角提到的stic考试作弊计划之所以要引入“班克”参加，说是因为她背不下来50多道选择题，可以说间接导致了整个计划的失败。但是我突然想到，如果将ABCD四个选项整合为2进制，用00,01,10,11来代替，这样50多道选择题就会变成一个100多位由0和1组成的数。然后我们对这组数进行压缩处理，就会使长度逐渐变小，最终会相对容易记住并且被发现也基本不会被认为是在传答案。<br><a id="more"></a><br>例如，我可以将4位2进制数分为一组，可以对应一个16进制的数（0-g），这样相当于，每两个答案可以合并为一个数字或字母，这样50多个答案会被压缩为20-30位字符，相当于将长度压缩为原来的1/2。女主正好可以记下。并且，在进行短暂的练习之后，可以保证看见两个选项立即写出对应的16进制字符（我就可以，hhhhh）。<br>为什么不转换为更高位数的数字，我的解释是，效率不高。简而言之就是，转换为更高的位数并不能对字符的长度进行更加高效的压缩。2个选项有16种变化正好对应16个字符，而3个选项有64种变化，与之对应的是64进制，64进制包括了26个字母的大小写和0-9十个数字，以及“+”和“/”两个符号，转换的过程会花费大量的时间，并且字母的大小写记忆起来并不容易。<br>我在开始想这个问题的时候，写了2转10再转36进制的字符位数，可以看出，最后依然为20多位，并且转换的过程相当复杂，并不适合考试这种环境。<br>我可以对这100多位2进制数分组，每12个数为一组，将其转换为10进制，就会得到一个4位数（都选D时最大为4095），这样进行一次压缩之后，100多位数会变为30多位十进制的数，再将十进制的数字转换为36进制，以26个大写英文字母及0-9十个数字代替，每三组4位数为一大组转换为一个8位数（最大值为58523YLR），这样50多道选择题会被压缩为一个20位左右的数字加字母的组合。<br>至于为什么这种方法没有比16进制取得更好的压缩效果，我的想法是：在这个举例中，并没有很好的利用进制内的所有数字，例如，在10进制中，最大只用到了4095，还有一大半的数字没有用上，在36进制中，更有6/7的排列没有用上，导致了压缩效率低下。如果按照上文充分利用高进制的排列组合，使用64进制，50多个选项就可以被压缩为17位左右。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>2进制数转高进制压缩时，要尽量多利用到高进制中的排列顺序，这样的压缩效率才会提高。</li><li>在计算机中，存在将2进制数压缩为64进制的形式，称为base64编码，Base64是网络上最常见的用于传输8Bit字节码的编码方式之一。</li><li>考试作弊是不对的。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.xiaofangdyd.cn/tiancaiqiangshou1.png&quot; alt=&quot;天才枪手&quot;&gt;&lt;br&gt;天才枪手这部剧中，女主角提到的stic考试作弊计划之所以要引入“班克”参加，说是因为她背不下来50多道选择题，可以说间接导致了整个计划的失败。但是我突然想到，如果将ABCD四个选项整合为2进制，用00,01,10,11来代替，这样50多道选择题就会变成一个100多位由0和1组成的数。然后我们对这组数进行压缩处理，就会使长度逐渐变小，最终会相对容易记住并且被发现也基本不会被认为是在传答案。&lt;br&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
      <category term="电影" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="天才枪手" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%89%8D%E6%9E%AA%E6%89%8B/"/>
    
      <category term="base64编码" scheme="http://yoursite.com/tags/base64%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>在ubuntu16.04的vps上安装搭建ftp</title>
    <link href="http://yoursite.com/2017/12/02/%E5%9C%A8ubuntu16-04%E7%9A%84vps%E4%B8%8A%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAftp/"/>
    <id>http://yoursite.com/2017/12/02/在ubuntu16-04的vps上安装搭建ftp/</id>
    <published>2017-12-01T17:01:46.000Z</published>
    <updated>2019-01-29T15:06:01.495Z</updated>
    
    <content type="html"><![CDATA[<p>由于身边设备包含种类过多，有Windows、Ubuntu、Android、iOS，有时候想要在四台设备间同步ppt，pdf，或者在Windows和Ubuntu上切换编译环境时用u盘拷贝文件步骤过于繁琐，且现有的一台服务器还没能充分利用资源，便萌生了在vps上再搭建一个ftp服务器的想法。<br>我对于ftp服务器的要求就是：有一定安全性，禁止匿名访问，尽量走加密通道传输，使用账户密码登录<br>然而百度上的教程经过我的测试大都不靠谱，于是自己Google摸索了一晚，找到了适合自己的搭建ftp的方法，在此分享并作为自己的备份。<br><a id="more"></a></p><h2 id="1、安装vsftpd软件"><a href="#1、安装vsftpd软件" class="headerlink" title="1、安装vsftpd软件"></a>1、安装vsftpd软件</h2><p>流行的FTP服务器端软件有：PureFTP，vsftpd,ProFTPD。考虑到租的服务器性能不高，我采用了轻量并且坑少的vsftpd。命令如下：<br><code>sudo apt update<br>sudo apt install vsftpd</code><br>安装完成后，需要对其进行一定的设置来使用。<br><figure class="highlight plain"><figcaption><span>vi</span><a href="/etc/vsftpd.conf```">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">取消下列行首的#注释</span><br><span class="line">```write_enable=YES```（允许用户在ftp中的写入操作）</span><br><span class="line">```local_umask=022```（为用户增加相应的读写权限）</span><br><span class="line">```chroot_local_user=yes```（阻止访问除了用户文件夹意外的文件夹）</span><br><span class="line">在文件的末尾添加下列语句来开启消极模式：</span><br><span class="line">&lt;code&gt;</span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line">pasv_enable-YES</span><br><span class="line">pasv_min_port=40000</span><br><span class="line">pasv_max_port=40100&lt;/code&gt;</span><br><span class="line">之后保存退出编辑，重启vsftpd服务</span><br><span class="line">```service vsftpd restart</span><br></pre></td></tr></table></figure></p><p>这时，ftp服务器就可以使用了，但是在21端口使用ftp登录是非常危险的，即使使用了账户密码，但传输文件很容易会被劫持，因此我在Google之后选择使用更为安全的sftp。</p><h2 id="2、安装配置sftp"><a href="#2、安装配置sftp" class="headerlink" title="2、安装配置sftp"></a>2、安装配置sftp</h2><p>sftp使用的是ssh文件传输协议，需要安装openssh-server,一般的vps服务器都预先安装过。安装过就可以跳过这一步。安装命令如下：<br><figure class="highlight plain"><figcaption><span>apt install openssh-server```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">安装完成之后我们需要为ftp新建一个用户。</span><br><span class="line">为了以后可能会添加用户，这里就创建一个ftpaccess用户组。</span><br><span class="line">```sudo groupadd ftpaccess</span><br></pre></td></tr></table></figure></p><p>然后需要在/etc/ssh/sshd_config中修改一些参数。<br><figure class="highlight plain"><figcaption><span>vi</span><a href="/etc/ssh/sshd_config```">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">找到 **PasswordAuthentication**参数，若其=no，则将其注释掉，若为yes，就不用管。</span><br><span class="line">找到 **Subsystem sftp /usr/lib/openssh/sftp-server**将其注释掉。</span><br><span class="line">在文件最后添加下列语句：</span><br><span class="line">&lt;code&gt;Subsystem sftp internal-sftp</span><br><span class="line">Match group ftpaccess</span><br><span class="line">ChrootDirectory %h</span><br><span class="line">X11Forwarding no</span><br><span class="line">AllowTcpForwarding no</span><br><span class="line">ForceCommand internal-sftp</span><br><span class="line">&lt;/code&gt;</span><br><span class="line">之后重启ssh服务</span><br><span class="line">```service ssh restart</span><br></pre></td></tr></table></figure></p><p>下面开始创建访问sftp服务的用户<br>创建用户xiaofangdyd,属于ftpaccess组<br><code>sudo useradd -m xiaofangdyd -g ftpaccess -s /usr/bin/nologin</code><br>(其中使用/usr/bin/nologin脚本来阻止ftp用户访问bash脚本，增加安全性)<br><code>sudo passwd xiaofangdyd</code><br>(设置密码)<br><code>sudo chown root /home/xiaofangdyd</code><br>(为相应文件夹赋予root权限)<br>开启nologin脚本的开机访问<br><code>sudo vi /etc/shells</code><br>在最后添加如下行：<br><code>/usr/bin/nologin</code><br>最后在home文件夹创建一个用于下入文件的文件夹，并修改文件夹的所有者<br><code>mkdir /home/xiaofangdyd/files<br>sudo chown xiaofangdyd:ftpaccess /home/xiaofangdyd/files</code><br>现在就可以通过sftp来向files文件夹上传并下载文件了。</p><p>在Windows和Linux操作端，推荐使用<strong>filezilla客户端版</strong>（filezilla Client）对ftp服务器进行访问。因为首先fz提供了对sftp登录的支持，最重要的是，由于简体中文版的Windows系统因为国家规定使用的是GBK字符编码，在ubuntu服务器以及linux上，默认使用的是utf-8全球通用编码，编码不同会导致中文文件名乱码。因此需要在fz中开启强制使用utf-8编码，才能保证文件之间的稳定传输。<br>在iOS上，我使用的是FtpManager，同样使用sftp登录，强制使用utf-8字符编码。<br>在Android上,我使用的是AndFTP，设置同上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于身边设备包含种类过多，有Windows、Ubuntu、Android、iOS，有时候想要在四台设备间同步ppt，pdf，或者在Windows和Ubuntu上切换编译环境时用u盘拷贝文件步骤过于繁琐，且现有的一台服务器还没能充分利用资源，便萌生了在vps上再搭建一个ftp服务器的想法。&lt;br&gt;我对于ftp服务器的要求就是：有一定安全性，禁止匿名访问，尽量走加密通道传输，使用账户密码登录&lt;br&gt;然而百度上的教程经过我的测试大都不靠谱，于是自己Google摸索了一晚，找到了适合自己的搭建ftp的方法，在此分享并作为自己的备份。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="ftp" scheme="http://yoursite.com/tags/ftp/"/>
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>2017.11.26今天要考线代</title>
    <link href="http://yoursite.com/2017/11/26/2017-11-26%E4%BB%8A%E5%A4%A9%E8%A6%81%E8%80%83%E7%BA%BF%E4%BB%A3/"/>
    <id>http://yoursite.com/2017/11/26/2017-11-26今天要考线代/</id>
    <published>2017-11-25T17:36:29.000Z</published>
    <updated>2019-01-29T15:02:32.062Z</updated>
    
    <content type="html"><![CDATA[<p>昨天是星期六，心中怀揣着对线性代数的恐惧和室友泡了一天的图书馆……下午一个人出来的时候突然觉得好冷，好像每次从图书馆走出来都是这样的吧。</p><p>吃完饭回图书馆之前，溜去校外买了一杯抹茶，旁边的小女孩看着我和大人说：“他在一个人买奶茶。”瞬间觉得抹茶好苦啊。</p><p>可能每个人一生中都会有那么一段，需要一个人度过的时光，在这段时光里，我们会学会与自己相处，去了解自己，认识自己，认识这个世界。</p><a id="more"></a><p>路上看到夕阳和一棵树共同构成了一幅异常和谐的场面，兴高采烈想要分享出去，打好了字配好了图，在打算发送状态的那一刻，又退出了状态发送。就当没看到过这棵树吧。</p><p>走在路上发现，听歌时没谁可想，空空落落的，也不是件好事。</p><p>现在想想，为什么上了大学，人们开始拼命寻找恋人，拉帮结派，还不是因为大家都孤独。</p><p>我走到阳台，吸着雾霾看天。<br>繁星漫天，远处零散的几处霓虹灯。<br>我想着自己，突然有点想哭。<br>又过了一会，一阵风吹来。<br>吹来一大片云，关掉了天上的星灯。<br>学校的路灯早已熄灭，漆黑的夜里更加漆黑。<br>也许它认为城市应该睡觉了，但是我还醒着。<br><img src="https://cdn.xiaofangdyd.cn/xiandai1.gif" alt="alone.gif"></p><p>在微博上看到这张图片，刚开始觉得这真是一个热爱生活自娱自乐的狗子。<br>但细想这不就是孤独吗，一个人扮演两个人角色。<br>现实有很多人跟这只狗狗一样，狗狗表现在肢体，我们表演在内心。</p><p>站在汹涌的人群中，看着人家两人嬉闹打笑。<br>我捂着嘴巴看完，生怕发出一声狗叫。<br>窗内灯光柔软 爱意浓浓， 窗外寒风凌厉，形单影只。<br>外面太冷了，衣服有点单薄，我想回家了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天是星期六，心中怀揣着对线性代数的恐惧和室友泡了一天的图书馆……下午一个人出来的时候突然觉得好冷，好像每次从图书馆走出来都是这样的吧。&lt;/p&gt;
&lt;p&gt;吃完饭回图书馆之前，溜去校外买了一杯抹茶，旁边的小女孩看着我和大人说：“他在一个人买奶茶。”瞬间觉得抹茶好苦啊。&lt;/p&gt;
&lt;p&gt;可能每个人一生中都会有那么一段，需要一个人度过的时光，在这段时光里，我们会学会与自己相处，去了解自己，认识自己，认识这个世界。&lt;/p&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
    
      <category term="线性代数" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>排序算法--睡眠排序、面条排序、猴子排序 (非常严肃)</title>
    <link href="http://yoursite.com/2017/11/24/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F%E3%80%81%E9%9D%A2%E6%9D%A1%E6%8E%92%E5%BA%8F%E3%80%81%E7%8C%B4%E5%AD%90%E6%8E%92%E5%BA%8F-%E9%9D%9E%E5%B8%B8%E4%B8%A5%E8%82%83/"/>
    <id>http://yoursite.com/2017/11/24/排序算法-睡眠排序、面条排序、猴子排序-非常严肃/</id>
    <published>2017-11-23T16:37:00.000Z</published>
    <updated>2019-01-29T15:02:53.348Z</updated>
    
    <content type="html"><![CDATA[<p>常见的排序算法–诸如快排、堆排或归并等——都是基于比较的，除了这种正统意义上的排序算法，最近了解了几种令人啼笑皆非的排序算法，与大家分享一下。<br><a id="more"></a></p><h2 id="1、睡眠排序（sleep-sort）"><a href="#1、睡眠排序（sleep-sort）" class="headerlink" title="1、睡眠排序（sleep sort）"></a>1、睡眠排序（sleep sort）</h2><p>这个算法可以说算是最强大的排序算法，他的时间复杂度为O(n)，空间复杂度为0 ！时间复杂度完爆了quick sort，空间复杂度完爆了hash，而且还是稳定的。<br>c代码实现如下：<br><img src="https://cdn.xiaofangdyd.cn/paixu1.jpeg" alt="sleep_sort.jpeg"><br>原理主要是利用多线程，把接受的每一个参数分别放在不同的线程里面并在每个线程同时使用sleep函数，sleep的时间就是参数的值，这样的话利用“数值大的参数的线程sleep的时间更长”这个事实，数字小的值就被先打印出来了，从而达到从小到大排序的目的。简单来说就是对于[1,3,6,10]这个数组，让计算机在第1s输出1，在第3s输出3，第6s输出6，第10s输出10。<br>不过这个方法有个致命的缺点，就是如果被排序的数字很大的话，花的时间也比较多。以提供的代码为例，如果参数是3, 1, 10000的话，那么输出结果在第一秒会输出1，第三秒会输出3，但是要在10000秒时才能输出10000。为了提高速度可以按比例缩短时间，比如把sleep那句改成sleep(this/10000)，但是也不能无限制缩小时间，<strong>当睡眠时间小于开启多线程的时间时</strong>，就会出现乱序。<br>当然上面这段代码很粗略，有很多问题还没解决。比如：</p><ol><li><del>搞不定负数</del>。（可以用一个恒正的函数将输入映射成时间）</li><li><del>输入相近的数会有误差</del>。（可以乘个适当的系数，放大数据间的差）</li><li>当输入的数据很多时，这些线程不能看作是同时启动的等等。</li></ol><h2 id="2、面条排序（Spaghetti-Sort）"><a href="#2、面条排序（Spaghetti-Sort）" class="headerlink" title="2、面条排序（Spaghetti Sort）"></a>2、面条排序（Spaghetti Sort）</h2><p>意大利面条排序(Spaghetti Sort)的思路是，将输入分别对应到不同长度的面条上，每根面条的长度即为对应的数字的大小。比如，对于[1, 4, 2, 8, 9]这个输入，则分别做出长度为1cm、4cm、2cm、8cm、9cm的面条。然后，将这些面条的一头对齐，用手抓住，另一头向下。然后慢慢地将手向下垂直下降，第一个触碰到桌面的面条对应的数字则为最大的数字，第二个触碰到的就是第二大的，依次类推，代码没找到…看起来挺简单的，和睡眠排序差别不大，就不写了….</p><h2 id="3、猴子排序（Bogo-Sort）"><a href="#3、猴子排序（Bogo-Sort）" class="headerlink" title="3、猴子排序（Bogo Sort）"></a>3、猴子排序（Bogo Sort）</h2><p>如下关于猴子排序(Bogo Sort)的描述摘自维基百科：</p><blockquote><p>在计算机科学中，Bogo排序（Bogo-Sort）是个既不实用又原始的排序算法，其原理等同将一堆卡片抛起，落在桌上后检查卡片是否已整齐排列好，若非就再抛一次。其名字源自Quantum bogodynamics，又称bozo sort、blort sort或猴子排序（参见无限猴子定理）。</p></blockquote><p>所谓无限猴子定理，即是：让一只猴子在打字机上随机地按键，当按键时间达到无穷时，几乎必然能够打出任何给定的文字，比如莎士比亚的全套著作。</p><p>猴子排序也是一样，原理就是随机打乱数组，检查是否排好序，若是，则输出，否则再次打乱，再检查……最佳情况的复杂度为O(n)，平均O(n*n!)，最坏可执行到世界末日。<br>c++代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;//random需要的头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">103</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Ordered</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!Ordered()) &#123;</span><br><span class="line">        random_shuffle(a, a + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，这种排序算法，基本大家就在吹牛的时候说说就好了，写在代码里，基本上就是分分钟被打死的后果。</p><h3 id="3-1、量子猴排-Quantum-Bogo-Sort"><a href="#3-1、量子猴排-Quantum-Bogo-Sort" class="headerlink" title="3.1、量子猴排(Quantum Bogo Sort)"></a>3.1、量子猴排(Quantum Bogo Sort)</h3><p>量子猴排可以算是概念上对猴子排序的一种优化：洗牌的时候，使用量子化随机排列。这样的话，我们在观测这组数之前，这组数的状态是叠加的，参照薛定谔的猫。通过这种量子化随机排列，我们划分出来了个平行宇宙。接下来，在某个宇宙A中，观测一下这组数，发现运气不好，没有排序好，那么我们就销毁掉这个宇宙。然后再看看其他宇宙的运气怎么样。终于，在一个宇宙Z中，发现刚好是排好序的数组。那么我们就保留这个宇宙。最后，没有被销毁的宇宙中，数组都是恰好一次被排好序的。<br><img src="https://cdn.xiaofangdyd.cn/paixu2.jpg" alt="量子猴排.jpg"><br>对了，量子猴排的时间复杂度是O(n)！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的排序算法–诸如快排、堆排或归并等——都是基于比较的，除了这种正统意义上的排序算法，最近了解了几种令人啼笑皆非的排序算法，与大家分享一下。&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="http://yoursite.com/categories/code/"/>
    
    
      <category term="排序算法" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
      <category term="睡眠排序" scheme="http://yoursite.com/tags/%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>在服务器端使用一键安装ss脚本及线路优化</title>
    <link href="http://yoursite.com/2017/11/21/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85ss%E8%84%9A%E6%9C%AC%E5%8F%8A%E7%BA%BF%E8%B7%AF%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2017/11/21/在服务器端使用一键安装ss脚本及线路优化/</id>
    <published>2017-11-21T15:35:45.000Z</published>
    <updated>2019-01-29T13:37:32.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h2><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">常规版Windows客户端</a></p><p><a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases" target="_blank" rel="noopener">ShadowsocksR版Windows客户端</a></p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p>为了能有一个稳定的上网环境，以及某件事情的影响，萌生了想自己搭梯子的想法。最近的一个月一直在恶补这方面的知识，并自己动手实践，对shadowsocks的使用才初步入门，知道了在服务器端安装ss客户端的方法，总结下来，最为简单易用的是秋水逸冰的一键安装脚本<br><a id="more"></a><br>本脚本适用于CentOS 6，7，Debian，Ubuntu系统，ss客户端对硬件资源的要求并不高，因此在选择服务器时如果没有其他需求的话，只用考虑网络带宽以及流量问题，这里需要注意的是，搭建的服务器相当于是本地访问和网站之间的桥梁，网站的数据包会先下载到服务器上，然后由服务器上传到本地客户端中，因此，<strong>服务器端使用的流量是本地流量的2倍</strong>，就好比你在购买服务器时，网站提示一个月有1000g的流量限制，当你在youtube上看500g的视频后，你的服务器端1000g流量其实已经用完了。<br>服务器的购买并没有固定的推荐，每个地区的网络不同，运营商不同都会导致网速的差异，因此选择一个好的服务器很重要。我所在的西安电信使用digitalocean上提供的sfo的ubuntu服务器实测下载峰值可以达到2m/s，其他地区未知。购买及连接方法日后再谈，今天主要想记录下服务器的配置及优化。<br>本文使用的是秋水逸冰的一键安装脚本，当在本地使用ssh命令（linux及mac os）或者xshell5（windows）连接上服务器的root用户后，依次运行以下3条命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure></p><p>之后脚本便自动执行，首先选择安装shadowsocks的版本，默认的1是常规，还有一个shadowsocksR版可供选择。<br>然后脚本会提示进行shadowsocks的基本参数设置<br>第一次是设置密码（如不设定，默认为 teddysun.com）<br>然后是服务器端口（如不设定，默认为 8989）<br>最后是选择加密方式（如不设定，默认为 aes-256-gcm）<br>加密方式我一般选择为第7个 aes-256-cfb（因为其支持的客户端相对较多一点）<br>安装完成后，脚本会提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, Shadowsocks-python server install completed!</span><br><span class="line">Your Server IP :your_server_ip</span><br><span class="line">Your Server Port :your_server_port</span><br><span class="line">Your Password :your_password</span><br><span class="line">Your Encryption Method:your_encryption_method</span><br><span class="line"></span><br><span class="line">Welcome to visit:https://teddysun.com/342.html</span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><p>这时可以记下ip 远程端口 和密码在shadowsocks客户端上使用了。<br>为了充分发挥服务器的网络性能，就需要对服务器的网络进行优化，最近Google 开源了其TCP BBR拥塞控制算法，并提交到了Linux内核。从4.9开始，Linux 内核已经用上了该算法。经过上机测试，有些机器的网速甚至可以提升好几个数量级。本次更新内核及开启bbr算法依旧使用的是秋水逸冰的脚本。<br>在服务器root用户下，使用命令：</p><figure class="highlight plain"><figcaption><span>--no-check-certificate</span><a href="https://github.com/teddysun/across/raw/master/bbr.sh" target="_blank" rel="noopener">&& chmod +x bbr.sh && ./bbr.sh```</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。</span><br><span class="line">重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：</span><br><span class="line">```uname -r</span><br></pre></td></tr></table></figure><p>查看内核版本，如果显示在4.13及以上说明ok了。这时服务器端的ss已经配置优化完成，<strong>脚本默认开启了ss的开机启动</strong>，因此服务器重启也不会有影响。</p><h2 id="卸载："><a href="#卸载：" class="headerlink" title="卸载："></a>卸载：</h2><p>在root用户下，使用命令<br><figure class="highlight plain"><figcaption><span>uninstall```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 使用命令：</span><br><span class="line">启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</span><br><span class="line">Shadowsocks-Python 版：</span><br><span class="line">```/etc/init.d/shadowsocks-python start | stop | restart | status</span><br></pre></td></tr></table></figure></p><p>ShadowsocksR 版：<br><figure class="highlight plain"><figcaption><span>start | stop | restart | status```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Shadowsocks-Go 版：</span><br><span class="line">```/etc/init.d/shadowsocks-go start | stop | restart | status</span><br></pre></td></tr></table></figure></p><p>Shadowsocks-libev 版：<br><figure class="highlight plain"><figcaption><span>start | stop | restart | status```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">各版本默认配置文件位置</span><br><span class="line">Shadowsocks-Python 版：</span><br><span class="line">```/etc/shadowsocks-python/config.json</span><br></pre></td></tr></table></figure></p><p>ShadowsocksR 版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Shadowsocks-Go 版：</span><br><span class="line">```/etc/shadowsocks-go/config.json</span><br></pre></td></tr></table></figure></p><p>Shadowsocks-libev 版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">多用户多端口配置方法</span><br><span class="line">在root用户下，使用命令</span><br><span class="line">```vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p><p>e.g:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">&quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">&quot;local_port&quot;:1080,</span><br><span class="line">&quot;port_password&quot;:&#123;</span><br><span class="line">&quot;8989&quot;:&quot;password0&quot;,</span><br><span class="line">&quot;9001&quot;:&quot;password1&quot;,</span><br><span class="line">&quot;9002&quot;:&quot;password2&quot;,</span><br><span class="line">&quot;9003&quot;:&quot;password3&quot;,</span><br><span class="line">&quot;9004&quot;:&quot;password4&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;timeout&quot;:300,</span><br><span class="line">&quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class="line">&quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://teddysun.com/342.html" target="_blank" rel="noopener">https://teddysun.com/342.html</a><br><a href="https://teddysun.com/489.html" target="_blank" rel="noopener">https://teddysun.com/489.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载：&quot;&gt;&lt;a href=&quot;#下载：&quot; class=&quot;headerlink&quot; title=&quot;下载：&quot;&gt;&lt;/a&gt;下载：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-windows/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;常规版Windows客户端&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ShadowsocksR版Windows客户端&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装：&quot;&gt;&lt;a href=&quot;#安装：&quot; class=&quot;headerlink&quot; title=&quot;安装：&quot;&gt;&lt;/a&gt;安装：&lt;/h2&gt;&lt;p&gt;为了能有一个稳定的上网环境，以及某件事情的影响，萌生了想自己搭梯子的想法。最近的一个月一直在恶补这方面的知识，并自己动手实践，对shadowsocks的使用才初步入门，知道了在服务器端安装ss客户端的方法，总结下来，最为简单易用的是秋水逸冰的一键安装脚本&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="shadowsocks" scheme="http://yoursite.com/tags/shadowsocks/"/>
    
      <category term="Google BBR" scheme="http://yoursite.com/tags/Google-BBR/"/>
    
  </entry>
  
  <entry>
    <title>常用网址查询</title>
    <link href="http://yoursite.com/2017/11/21/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2017/11/21/常用网址查询/</id>
    <published>2017-11-21T15:33:23.000Z</published>
    <updated>2019-01-29T13:11:57.918Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://210.27.80.195:8001/" target="_blank" rel="noopener">校园卡转账（校园网）</a><br><a href="http://aaa2.nwsuaf.edu.cn:8080/selfservice/" target="_blank" rel="noopener">西农校园网自助服务系统（校园网）</a><br><a href="http://219.245.196.72" target="_blank" rel="noopener">英语视听说网址（校园网）</a><br><a href="https://odv.xiaofangdyd.cn" target="_blank" rel="noopener">万有仓库</a><br><a href="http://code.xiaofangdyd.cn/" target="_blank" rel="noopener">代码托管平台</a><br><a href="http://pt.nwsuaf6.edu.cn/index.php" target="_blank" rel="noopener">麦田pt的ipv6网址（需要ipv6网）</a><br><a href="https://movie.douban.com/top250" target="_blank" rel="noopener">豆瓣电影 Top 250</a><br><a href="https://go.microsoft.com/fwlink/p/?LinkId=248256" target="_blank" rel="noopener">onedrive客户端（Windows7及以下）</a><br><a href="https://code.visualstudio.com/docs/?dv=win64" target="_blank" rel="noopener">Visual Studio Code下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://210.27.80.195:8001/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;校园卡转账（校园网）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://aaa2.nwsuaf.edu.cn:8080/selfservice
      
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
    
      <category term="学校" scheme="http://yoursite.com/tags/%E5%AD%A6%E6%A0%A1/"/>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
