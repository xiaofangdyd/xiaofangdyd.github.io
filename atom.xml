<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>万有笔记</title>
  
  <subtitle>诸事皆宜，百无禁忌</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-22T03:59:26.066Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Fanghl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hello, Hexo</title>
    <link href="http://yoursite.com/2019/01/22/hello-Hexo/"/>
    <id>http://yoursite.com/2019/01/22/hello-Hexo/</id>
    <published>2019-01-22T03:59:26.000Z</published>
    <updated>2019-01-22T03:59:26.066Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《新东方快车谋杀案》一部画面比剧情好看的推理电影</title>
    <link href="http://yoursite.com/2018/02/14/%E3%80%8A%E6%96%B0%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%88%E3%80%8B%E4%B8%80%E9%83%A8%E7%94%BB%E9%9D%A2%E6%AF%94%E5%89%A7%E6%83%85%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%8E%A8%E7%90%86%E7%94%B5%E5%BD%B1/"/>
    <id>http://yoursite.com/2018/02/14/《新东方快车谋杀案》一部画面比剧情好看的推理电影/</id>
    <published>2018-02-14T15:23:48.000Z</published>
    <updated>2019-01-29T15:39:57.963Z</updated>
    
    <content type="html"><![CDATA[<p>在去年的朋友圈中，我才知道了这个广为人知的故事，这个曾经有过一版堪称经典的电影。直到今天，我才想起来欣赏。说实话，我之前并没有刻意搜索过这个故事，所以我会以一个新人的角度来欣赏这部作品。</p><a id="more"></a><p>在电影的开场，波洛吃早餐量鸡蛋，接着双脚踩屎，再后面用拐杖放倒逃犯，这一切都是在塑造波洛严苛到极致的形象，这种巧妙的安排让我们初识的观众可以很轻松的认识波洛。</p><p><img src="https://cdn.xiaofangdyd.cn/%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%881.jpg" alt="东方快车谋杀案1.jpg"></p><p>当本剧唯一大反派卡塞蒂变成盒子的时候，我才发现他是上了火车的杰克船长。在他被捅死之后，我还下意识觉得他会手上夹着一枚金币，突然跳起来说：“<strong>女士们先生们，你们将永远记住这一天，因为你们差点就捅死了杰克.斯派洛船长。</strong>”</p><p><img src="https://cdn.xiaofangdyd.cn/%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%882.jpg" alt="东方快车谋杀案2.jpg"></p><p>在中间的问询阶段，电影显得略显沉闷。尽管导演采用平行剪辑的手法加快节奏，刻意去增加的剧情的刺激性，但还是处理偏颇。<br><br><br>直到最后的揭秘，电影让所有人走出车厢，在隧道入口排一张长桌，十二名乘客齐聚，呈现《最后的晚餐》之态。晶莹白雪和幽邃黑洞之间，昏黄的灯火下，12名装作不认识的凶手。画面十分美好，可是在剧情上不是特别理想，感觉有点像为了实现《最后的晚餐》的镜头，又受制于车厢空间太小，而做出的无奈之举。</p><p><img src="https://cdn.xiaofangdyd.cn/%E4%B8%9C%E6%96%B9%E5%BF%AB%E8%BD%A6%E8%B0%8B%E6%9D%80%E6%A1%883.jpeg" alt="东方快车谋杀案3.jpeg"></p><p>最后波洛在说出了12人联合复仇的真相之后，掏出枪放在桌上说：“<strong>你们现在唯一的选择是杀了我，把我扔在冰湖里，因为我不会说谎。</strong>”然后女话剧演员不愿为了掩盖罪行而杀一个无辜的人，拿起枪自杀，发现枪里没子弹……这点我在思考很久后才明白，这是波洛给他们的一个测试。虽然他们杀的是一个十恶不赦的罪犯，但在侦探眼中，他们都参与了杀人，也应该为自己的行为承担责任，不然法律的威严何在？而女话剧演员自杀，让波洛知道，<strong>他们在自己生命受到威胁时，仍然不愿意为了掩盖罪行而杀掉一个无辜的人</strong>。这个举动才是波洛违背自己原则放过所有人的原因。</p><ul><li>脑洞</li></ul><p>最后波洛准备走出车厢时，电影的旁白说：“阿姆斯特朗少校，我终于可以给你回信了……“我忽然觉得<strong>波洛才是本案真正的幕后推手</strong>，为了确保谋杀可以顺利执行，波洛放下偏执和一个花花公子为友，才搭乘上这班列车。他亲临现场，每一个步骤后都开门检查走廊，用自己的推理，演出了戏中戏，为整个案情上了双保险，即使其他人搞砸了，有他最著名侦探的头衔在，最后也可以顺利圆回来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在去年的朋友圈中，我才知道了这个广为人知的故事，这个曾经有过一版堪称经典的电影。直到今天，我才想起来欣赏。说实话，我之前并没有刻意搜索过这个故事，所以我会以一个新人的角度来欣赏这部作品。&lt;/p&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
      <category term="电影" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="电影" scheme="http://yoursite.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>《月亮和六便士》----是否有个魔鬼抓住了他的灵魂？</title>
    <link href="http://yoursite.com/2018/01/27/%E3%80%8A%E6%9C%88%E4%BA%AE%E5%92%8C%E5%85%AD%E4%BE%BF%E5%A3%AB%E3%80%8B-%E6%98%AF%E5%90%A6%E6%9C%89%E4%B8%AA%E9%AD%94%E9%AC%BC%E6%8A%93%E4%BD%8F%E4%BA%86%E4%BB%96%E7%9A%84%E7%81%B5%E9%AD%82%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/01/27/《月亮和六便士》-是否有个魔鬼抓住了他的灵魂？/</id>
    <published>2018-01-27T03:25:03.000Z</published>
    <updated>2019-01-29T15:35:53.979Z</updated>
    
    <content type="html"><![CDATA[<p>啃完了《月亮与六便士》，有种当头一棒的痛感。总是渴望找到一项东西，然后为之不管不顾、 为之疯狂。一潭死水的生活最是让人窒息 。最痛苦的事不是平衡地上的六便士和天上月亮的关系，而是当你想仰望，却压根没找到天上的月亮。<br><a id="more"></a></p><h4 id="摘录："><a href="#摘录：" class="headerlink" title="摘录："></a>摘录：</h4><ul><li><p>说这些豪言壮语的人可能还觉得他们在说一些前人未曾道过的真理，但是实际上连他们说话的腔调前人也已经用过一百次，而且丝毫也没有变化。钟摆摆过来又荡过去，这一旅程永远反复循环。</p></li><li><p>在那个时代谈话仍然被看作是一种需要下功夫陶冶的艺术，一句巧妙的对答比锅子底下噼啪爆响的荆棘更受人赏识，格言警句当时还不是痴笨的人利用来冒充聪敏的工具，</p></li><li><p>同情体贴本是一种很难得的本领，但是却常常被那些知道自己有这种本领的人滥用了。他们一看到自己的朋友有什么不幸就恶狠狠地扑到人们身上，把自己的全部才能施展出来，这就未免太可怕了<br>它使人想到一条平静的小河，蜿蜒流过绿茸茸的牧场，与郁郁的树荫交相掩映，直到最后泻入烟波浩渺的大海中。但是大海却总是那么平静，总是沉默无言、声色不动，你会突然感到一种莫名的不安。</p></li><li><p>有些人的生活只是社会有机体的一部分，他们只能生活在这个有机体内，也只能依靠它而生活，这种人总是给人以虚幻的感觉；</p></li><li><p>我决定第二天晚上再去找思特里克兰德，因为我本能地觉得，必须细致盘算，并选定这一时间去。如果想从感情上说动一个人，在午饭以前是很少会成功的。</p></li><li><p>只有诗人同圣徒才能坚信，在沥青路面上辛勤浇水会培植出百合花来。</p></li><li><p>有人说灾难不幸可以使人性高贵，这句话并不对；叫人做出高尚行动的有时候反而是幸福得意，灾难不幸在大多数情况下只能使人们变得心胸狭小、报复心更强。</p></li><li><p>他非常重感情，但是在他那很容易就被打动的感情里面却含有某种愚蠢的东西，让你接受了他好心肠的帮助却丝毫没有感激之情。向他借钱就好象从小孩儿手里抢东西一样；因为他太好欺侮，你反而有点儿看不起他。</p></li><li><p>有时候一个人的外貌同他的灵魂这么不相称，这实在是一件苦不堪言的事。</p></li><li><p>如果灵魂真能出窍的话，不论出什么代价我也得试一次；只有这样我才能在画室里看到他俩私下如何过活，才能听到他们交谈些什么。总之一句话，我没有可以供我的幻想力发挥作用的最小依据。</p></li><li><p>女人们不断为了爱情而自寻短见，但是一般说来她们总是做得很小心，不让自杀成为事实。通常这只是为了引起她们情人的怜悯或者恐怖而作的一个姿态。</p></li><li><p>护士用她那双宁静、慈祥的眼睛望着戴尔克，这双眼睛曾经看到过人世的一切恐怖和痛苦，但是因为那里面装的是一个没有罪恶的世界的幻景，所以她的目光是清澈的。</p></li><li><p>我们非常可怜地想把自己心中的财富传送给别人，但是他们却没有接受这些财富的能力。因此我们只能孤独地行走，尽管身体互相依傍却并不在一起，既不了解别的人也不能为别人所了解。</p></li><li><p>他的思想这时会平静地飘浮在九天之上，他对那个女人感到又嫌恶又可怕，也许那感觉就象一只翩翩飞舞于花丛中的蝴蝶，见到它胜利地蜕身出来的肮脏的蛹壳一样。</p></li><li><p>小丑的嘴唇在微笑，他的笑话越来越滑稽，因为在他逗人发笑的时候他更加感到自己无法忍受的孤独。</p></li><li><p>上帝的磨盘转动很慢，但是却磨得很细。</p></li></ul><h4 id="感想："><a href="#感想：" class="headerlink" title="感想："></a>感想：</h4><p>月亮代表高高在上的理想，而六便士代表平凡的现实。理想可能是遥不可及的悬在空中的月亮，而世俗的名誉财富却像六便士一样只要老老实实遵守社会规范努力工作，都是唾手可得的。主人公为了追求画画的理想而放弃了现实的世俗生活，虽然穷困潦倒几次濒临死亡，仍然不忘初心，最终虽然少有人见证到，但还是创造出了传世之作。<br>主人公本来是一个老实体面的经济工作者，有着稳定充足的收入，有幸福的家庭；但突然有一天，他决定放弃这种生活，去追寻自己的艺术。这种转折是毫无征兆的，他就像豁然开朗一般，无所顾忌地抛弃世俗的一切，去追寻自己的艺术理想。</p><blockquote><p>“我怀疑他的灵魂里是否深埋着某种创作本能，那种本能虽然受他的生活环境所抑制，却像肿瘤在活体器官中膨胀那样顽强地生长着，最终控制了他整个人，迫使他不由自主地采取行动。” </p></blockquote><p>前段时间一直在想，我们是不是真的能够看清自己内心所想所盼。我们所成为的人，到底是灵魂的决定还是外界的推动。生活在人群当中，不得不重视别人的看法和评价，不得不在心中住进一个卫兵，当有其他与普世价值相违背的想法冒出，卫兵本能的将其砍掉。可惜，抽刀断水，也许我不明白有什么不对，但始终觉得意难平。<br>我忽然想到了顺治，万里河山，说走就走。</p><p> 连最至高无上的权利，都阻挡不了内心的渴望。</p><p> 尼采为什么会疯</p><p> 梵高为什么割掉耳朵</p><p> 海明威为什么自杀</p><p> 追逐梦想就是追逐自己的厄运，在满地都是六便士的街上，他抬起头看到了月光。可能他想通了这一切，才能踩在六便士上，赏着月光，衣衫褴褛，食不果腹。    </p><p> 是否有个魔鬼抓住了他的灵魂？让他只能俯首称臣。     </p><p> 那些命中注定的狂热，对抗卫兵的勇气，最终让他内心安宁。</p><p> 所有的热爱，在投身于其中的时候，已经得到了最大的报酬，而是否有所认可与收获，都应当处之泰然。</p><p> 主人公为什么最后选择烧掉他那画有惊世之作的屋子，因为最丰腴的愉悦感，已经在创作的时候产生，任他人看与不看，都与我何干？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啃完了《月亮与六便士》，有种当头一棒的痛感。总是渴望找到一项东西，然后为之不管不顾、 为之疯狂。一潭死水的生活最是让人窒息 。最痛苦的事不是平衡地上的六便士和天上月亮的关系，而是当你想仰望，却压根没找到天上的月亮。&lt;br&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello Typecho!</title>
    <link href="http://yoursite.com/2018/01/25/Hello-Typecho/"/>
    <id>http://yoursite.com/2018/01/25/Hello-Typecho/</id>
    <published>2018-01-25T02:29:58.000Z</published>
    <updated>2019-01-29T15:28:50.659Z</updated>
    
    <content type="html"><![CDATA[<p>这是由Typecho创建的文章！<br>当然这是一篇初始页，也代表着我的博客迎来了一次翻天覆地的改变，虽然以前的博客已经 <del>迁移到<a href="http://xiaofangdyd.tech" target="_blank" rel="noopener">xiaofangdyd.tech</a>上</del> 关闭，就让那些过去的就过去吧！<br>更新记录：</p><ul><li>博客迁移至<del>洛杉矶、北京</del>Github服务器。（2019.01.29）</li><li>使用七牛oss托管图床（2019.01.29）</li><li>域名备案</li><li><del>博客程序从Wordpress更换为Typecho轻量级博客框架。</del></li><li>博客采用hexo框架</li><li>尽量用Markdown格式将之前的文章转移过来。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是由Typecho创建的文章！&lt;br&gt;当然这是一篇初始页，也代表着我的博客迎来了一次翻天覆地的改变，虽然以前的博客已经 &lt;del&gt;迁移到&lt;a href=&quot;http://xiaofangdyd.tech&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xia
      
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="typecho" scheme="http://yoursite.com/tags/typecho/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>《雪国列车》--很多精彩，很多遗憾</title>
    <link href="http://yoursite.com/2018/01/22/%E3%80%8A%E9%9B%AA%E5%9B%BD%E5%88%97%E8%BD%A6%E3%80%8B-%E5%BE%88%E5%A4%9A%E7%B2%BE%E5%BD%A9%EF%BC%8C%E5%BE%88%E5%A4%9A%E9%81%97%E6%86%BE/"/>
    <id>http://yoursite.com/2018/01/22/《雪国列车》-很多精彩，很多遗憾/</id>
    <published>2018-01-22T15:53:37.000Z</published>
    <updated>2019-01-29T15:24:17.281Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.xiaofangdyd.cn/%E9%9B%AA%E5%9B%BD%E5%88%97%E8%BD%A6.jpeg" alt="雪国列车.jpeg"><br>《雪国列车》是我非常喜欢的一部电影，将人类文明史浓缩在一节节车厢里面，凭依上帝视角进行审视。<br><a id="more"></a></p><ul><li>列车<ol><li>尾部车厢，象征着阶级社会最底层的劳动者，最为凄惨。</li><li>蛋白质块生产车厢，象征着给底层社会提供生活最低保障品的最下服务阶层。</li><li>维护列车秩序的军队，象征着国家的暴力机器，他们在最底层的边缘。</li><li>植物区，水族馆等，象征着技术劳动者的中间阶层，相对于底层而言待遇稍好，但对社会变革无所适从，他们既服从于统治阶层的权威，又对底层劳动者怀有同情与恐惧。</li><li>高级乘客车厢，象征着腐朽的统治阶级，越往车头走，堕落的越彻底。</li><li>引擎车厢，象征着阶级社会的最高统治者，一直控制着人类社会方向的最少数人。</li></ol></li></ul><p><strong>“车就是世界，我们就是全人类。”</strong></p><ul><li>电影中，人们藏起武器，害怕给小孩不良的印象；而和蔼可亲的怀孕女老师，却当着学生的面悍然拔枪杀人，分发新年礼物貌似慈善的仆人，其实是大屠杀的执行者，隐喻的意思不言自明。</li><li>电影中，儿童象征着人类的未来。有三种儿童，一种是底层劳动者中倔强生存的儿童；一种是权贵阶层被深度洗脑的儿童；第三种是最终被当成列车零件，机械化地维护阶级社会秩序的儿童。这也正象征着人类的三种未来。</li><li>火在电影中有许多次应用。一次是照亮黑暗的火炬，一次是点燃炸药的火种。《无人区》的一句话特别适合用在这里<br>“我认为人类和动物的区别不是放弃自私，而是人类会使用火”</li><li>虽然整部电影的剧情匪夷所思，但最终火车还是被炸掉了，大家一起翘辫子了。自由和平等的代价是巨大的，不自由毋宁死，要死也要一起死。</li><li>整个影片结束了，据说这个片子赞颂了革命精神，弘扬了马列主义价值观，可我看到的却是一群阶级底层人民的不满，不满是由于物质的分配不均，分配不均是因为阶级产生，阶级产生是由于人的控制欲和占有欲，因为人有欲望，每个人都会对自身所拥有的不满。</li><li>叔本华曾经说过，人得到了就空虚，人得不到就痛苦，人一生就生活在空虚和痛苦之中。尽管物质的丰富只能带来暂时的快乐，这道理人人都懂，但却总忍不住想要得到更多，因为这种欲望是与生俱来的，不去占有更多物质的人早就在远古时期就已经灭绝了，所有生存至今的人类，基因代码里就写下了一句话：“我要得到更多”。</li><li>说到底，一句话“因乘客对列车食品不满，酿成火车出轨特大事故”。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.xiaofangdyd.cn/%E9%9B%AA%E5%9B%BD%E5%88%97%E8%BD%A6.jpeg&quot; alt=&quot;雪国列车.jpeg&quot;&gt;&lt;br&gt;《雪国列车》是我非常喜欢的一部电影，将人类文明史浓缩在一节节车厢里面，凭依上帝视角进行审视。&lt;br&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
      <category term="电影" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/%E7%94%B5%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>Java中的100 = 100，但1000≠1000？</title>
    <link href="http://yoursite.com/2018/01/12/Java%E4%B8%AD%E7%9A%84100-100%EF%BC%8C%E4%BD%861000%E2%89%A01000%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/01/12/Java中的100-100，但1000≠1000？/</id>
    <published>2018-01-12T14:36:20.000Z</published>
    <updated>2019-01-29T15:34:18.405Z</updated>
    
    <content type="html"><![CDATA[<p>如果我们在Java中运行一段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">100</span>, b = <span class="number">100</span>;</span><br><span class="line">System.out.println(a == b);</span><br><span class="line">Integer c = <span class="number">1000</span>, d = <span class="number">1000</span>;</span><br><span class="line">System.out.println(c == d);</span><br></pre></td></tr></table></figure></p><p>你会得到：<br><code>true<br>false</code><br><a id="more"></a><br>首先，先说明，Java是面向对象的编程语言，一切都是对象，但是为了编程的方便还是引入了基本数据类型，为了能够将这些基本数据类型当成对象操作，Java为每一个基本数据类型都引入了对应的包装类型（wrapper class），int的包装类就是Integer，从Java 5开始引入了自动装箱/拆箱机制，使得二者可以相互转换，对应如下：</p><table><thead><tr><th>原始类型</th><th>boolean</th><th>char</th><th>byte</th><th>short</th><th>int</th><th>long</th><th>float</th><th>double</th></tr></thead><tbody><tr><td>包装类型</td><td>Boolean</td><td>Character</td><td>Byte</td><td>Short</td><td>Integer</td><td>Long</td><td>Float</td><td>Double</td></tr></tbody></table><p><strong>所以最根本的一点区别就是</strong>：int的初始值是0，integer的初始值是null；<br>其他还有一些显著的区别就是：</p><ul><li>Integer变量必须实例化后才能使用，而int变量不需要。</li><li>Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值 。</li></ul><p>下面再看几个例子来说明两者的区别：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">128</span>;</span><br><span class="line">Integer i2 = <span class="keyword">new</span> Integer(<span class="number">128</span>);</span><br><span class="line">Integer i3 = <span class="number">128</span>;</span><br><span class="line">System.out.println(i1 == i2);</span><br><span class="line">System.out.println(i1 == i3);</span><br></pre></td></tr></table></figure></p><p><strong>结果均为true</strong>，因为包装类Integer在和int进行比较时，无论Integer变量是否为new生成，Integer会自动拆箱成int类型，变成两个int类型比较，所以只要两者数值相等，结果都为true。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i3 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">Integer i4 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">System.out.println(i3 == i4);</span><br></pre></td></tr></table></figure></p><p><strong>结果为false</strong>，我们知道，如果两个引用指向同一个对象，用 = =表示他们是相等的；如果两个引用指向不同的对象，即使他们内容相同，但用= =表示他们是不相等的。由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i5 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">Integer i6 = <span class="number">100</span>;</span><br><span class="line">System.out.println(i5 == i6);</span><br></pre></td></tr></table></figure></p><p><strong>结果为false</strong>，因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同。</p><p>对于非new生成的Integer变量，编译时会调用valueOf()函数,例如：<br><code>Integer i = 100;</code><br>编译时就会被翻译成：<code>Integer i = Integer.valueOf(100)</code></p><p>而Java API中对Integer类型的valueOf定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)&#123;</span><br><span class="line"><span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>java对于<strong>-128</strong>到<strong>127</strong>之间的数，会进行缓存，Integer i = 127时，会将127进行缓存，下次再写Integer j = 127时，就会直接从缓存中取，就不会new了。</p><p>最后再回到开始的那个代码中，a,b的值为100，在-128到127之间，因此它们指向了同一个对象，结果就为true；<br>c,d的值在-128到127的范围之外，编译时依然调用的是new Integer()，但存放在常量池（方法区）中，因此结果就为false。</p><p>至于为什么需要缓存，理由就是，在此范围内的“小”整数使用率比范围外的“大”整数要高，因此，使用相同的底层对象是有价值的，可以减少潜在的内存占用。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>无论如何，Integer与new Integer不会相等。不会经历拆箱过程，new出来的对象存放在堆，而非new的Integer常量则在常量池（在方法区），他们的内存地址不一样，所以为false。</li><li>两个都是非new出来的Integer，如果数在-128到127之间，则是true,否则为false。因为java在编译Integer i2 = 128的时候,被翻译成：Integer i2 = Integer.valueOf(128);而valueOf()函数会对-128到127之间的数进行缓存。</li><li>两个都是new出来的,都为false。因为内存地址不一样。</li><li>int和Integer(无论new否)比，只要数值相同，结果都为true，因为会把Integer自动拆箱为int再去比。</li></ol><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://blog.csdn.net/chenliguan/article/details/53888018" target="_blank" rel="noopener">Java基础之int和Integer有什么区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果我们在Java中运行一段代码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Integer a = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, b = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(a == b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Integer c = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, d = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(c == d);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你会得到：&lt;br&gt;&lt;code&gt;true&lt;br&gt;false&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/tools/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Integer" scheme="http://yoursite.com/tags/Integer/"/>
    
  </entry>
  
  <entry>
    <title>优雅过生活</title>
    <link href="http://yoursite.com/2018/01/01/%E4%BC%98%E9%9B%85%E8%BF%87%E7%94%9F%E6%B4%BB/"/>
    <id>http://yoursite.com/2018/01/01/优雅过生活/</id>
    <published>2018-01-01T03:16:51.000Z</published>
    <updated>2019-01-29T15:17:56.855Z</updated>
    
    <content type="html"><![CDATA[<p>对我而言，我所向往的大学生活就是：</p><p>该上课就去上课，想逃课也可以逃课；<br>该吃饭就去吃饭，想打球就去打球；<br>该学习就学习，该聊天就聊天；<br>爱睡懒觉就睡懒觉，决定早起就早起。</p><p>面对每一件事，在某种法律规则之内，不管喜不喜欢，强不强迫，<strong>专心的投入的出色的做</strong>。<br><a id="more"></a><br>而不是<br>上课的时候听不进去，想逃课又怕老师点名，只能趴在桌子上玩游戏；<br>逃课的时候担心老师点名，陪着笑脸发讯息给朋友“老师点名了帮我签到啊，谢谢。”<br>该吃饭的时候，放不下手中正忙的事，等忙完之后，匆匆跑去食堂只有剩饭剩菜；<br>想吃零食吃辣条又担心长痘和地沟油，吃完以后喝一缸水排毒；<br>想谈恋爱又开不了口，等着对方先说，结果刷微博发现对方发了一条和别人在一起的消息，只能握着屏幕咬碎钢牙点一个赞；<br>学习的时候想着刷朋友圈刷微博，想着晚上玩什么游戏怎么玩，一下午看几页书，还是绪论；<br>聊天和社团活动的时候心里想的是这话唠净浪费我时间，给我两个小时我都能复习完半本书了。</p><p>很多事情做不好的根源，在于“分心”二字，所谓分心，就是</p><blockquote><p>时时刻刻，希望以最短的时间，博取最多的存在感，优越感和自我认同。 ————张佳玮</p></blockquote><p>也就是“浮躁”。</p><p>我想，在正确的时间里，用正确的方法，专心投入地做正确的事，大学生活已经算是十分优雅了。<br><img src="https://cdn.xiaofangdyd.cn/%E4%BC%98%E9%9B%85%E8%BF%87%E7%94%9F%E6%B4%BB.jpg" alt="优雅过生活.JPG"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对我而言，我所向往的大学生活就是：&lt;/p&gt;
&lt;p&gt;该上课就去上课，想逃课也可以逃课；&lt;br&gt;该吃饭就去吃饭，想打球就去打球；&lt;br&gt;该学习就学习，该聊天就聊天；&lt;br&gt;爱睡懒觉就睡懒觉，决定早起就早起。&lt;/p&gt;
&lt;p&gt;面对每一件事，在某种法律规则之内，不管喜不喜欢，强不强迫，&lt;strong&gt;专心的投入的出色的做&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
    
      <category term="专心" scheme="http://yoursite.com/tags/%E4%B8%93%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>2进制转高进制压缩长度--《天才枪手》观后感</title>
    <link href="http://yoursite.com/2017/12/10/2%E8%BF%9B%E5%88%B6%E8%BD%AC%E9%AB%98%E8%BF%9B%E5%88%B6%E5%8E%8B%E7%BC%A9%E9%95%BF%E5%BA%A6-%E3%80%8A%E5%A4%A9%E6%89%8D%E6%9E%AA%E6%89%8B%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>http://yoursite.com/2017/12/10/2进制转高进制压缩长度-《天才枪手》观后感/</id>
    <published>2017-12-10T15:16:24.000Z</published>
    <updated>2019-01-29T15:12:22.271Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.xiaofangdyd.cn/tiancaiqiangshou1.png" alt="天才枪手"><br>天才枪手这部剧中，女主角提到的stic考试作弊计划之所以要引入“班克”参加，说是因为她背不下来50多道选择题，可以说间接导致了整个计划的失败。但是我突然想到，如果将ABCD四个选项整合为2进制，用00,01,10,11来代替，这样50多道选择题就会变成一个100多位由0和1组成的数。然后我们对这组数进行压缩处理，就会使长度逐渐变小，最终会相对容易记住并且被发现也基本不会被认为是在传答案。<br><a id="more"></a><br>例如，我可以将4位2进制数分为一组，可以对应一个16进制的数（0-g），这样相当于，每两个答案可以合并为一个数字或字母，这样50多个答案会被压缩为20-30位字符，相当于将长度压缩为原来的1/2。女主正好可以记下。并且，在进行短暂的练习之后，可以保证看见两个选项立即写出对应的16进制字符（我就可以，hhhhh）。<br>为什么不转换为更高位数的数字，我的解释是，效率不高。简而言之就是，转换为更高的位数并不能对字符的长度进行更加高效的压缩。2个选项有16种变化正好对应16个字符，而3个选项有64种变化，与之对应的是64进制，64进制包括了26个字母的大小写和0-9十个数字，以及“+”和“/”两个符号，转换的过程会花费大量的时间，并且字母的大小写记忆起来并不容易。<br>我在开始想这个问题的时候，写了2转10再转36进制的字符位数，可以看出，最后依然为20多位，并且转换的过程相当复杂，并不适合考试这种环境。<br>我可以对这100多位2进制数分组，每12个数为一组，将其转换为10进制，就会得到一个4位数（都选D时最大为4095），这样进行一次压缩之后，100多位数会变为30多位十进制的数，再将十进制的数字转换为36进制，以26个大写英文字母及0-9十个数字代替，每三组4位数为一大组转换为一个8位数（最大值为58523YLR），这样50多道选择题会被压缩为一个20位左右的数字加字母的组合。<br>至于为什么这种方法没有比16进制取得更好的压缩效果，我的想法是：在这个举例中，并没有很好的利用进制内的所有数字，例如，在10进制中，最大只用到了4095，还有一大半的数字没有用上，在36进制中，更有6/7的排列没有用上，导致了压缩效率低下。如果按照上文充分利用高进制的排列组合，使用64进制，50多个选项就可以被压缩为17位左右。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>2进制数转高进制压缩时，要尽量多利用到高进制中的排列顺序，这样的压缩效率才会提高。</li><li>在计算机中，存在将2进制数压缩为64进制的形式，称为base64编码，Base64是网络上最常见的用于传输8Bit字节码的编码方式之一。</li><li>考试作弊是不对的。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.xiaofangdyd.cn/tiancaiqiangshou1.png&quot; alt=&quot;天才枪手&quot;&gt;&lt;br&gt;天才枪手这部剧中，女主角提到的stic考试作弊计划之所以要引入“班克”参加，说是因为她背不下来50多道选择题，可以说间接导致了整个计划的失败。但是我突然想到，如果将ABCD四个选项整合为2进制，用00,01,10,11来代替，这样50多道选择题就会变成一个100多位由0和1组成的数。然后我们对这组数进行压缩处理，就会使长度逐渐变小，最终会相对容易记住并且被发现也基本不会被认为是在传答案。&lt;br&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
      <category term="电影" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="天才枪手" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%89%8D%E6%9E%AA%E6%89%8B/"/>
    
      <category term="base64编码" scheme="http://yoursite.com/tags/base64%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>在ubuntu16.04的vps上安装搭建ftp</title>
    <link href="http://yoursite.com/2017/12/02/%E5%9C%A8ubuntu16-04%E7%9A%84vps%E4%B8%8A%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAftp/"/>
    <id>http://yoursite.com/2017/12/02/在ubuntu16-04的vps上安装搭建ftp/</id>
    <published>2017-12-01T17:01:46.000Z</published>
    <updated>2019-01-29T15:06:01.495Z</updated>
    
    <content type="html"><![CDATA[<p>由于身边设备包含种类过多，有Windows、Ubuntu、Android、iOS，有时候想要在四台设备间同步ppt，pdf，或者在Windows和Ubuntu上切换编译环境时用u盘拷贝文件步骤过于繁琐，且现有的一台服务器还没能充分利用资源，便萌生了在vps上再搭建一个ftp服务器的想法。<br>我对于ftp服务器的要求就是：有一定安全性，禁止匿名访问，尽量走加密通道传输，使用账户密码登录<br>然而百度上的教程经过我的测试大都不靠谱，于是自己Google摸索了一晚，找到了适合自己的搭建ftp的方法，在此分享并作为自己的备份。<br><a id="more"></a></p><h2 id="1、安装vsftpd软件"><a href="#1、安装vsftpd软件" class="headerlink" title="1、安装vsftpd软件"></a>1、安装vsftpd软件</h2><p>流行的FTP服务器端软件有：PureFTP，vsftpd,ProFTPD。考虑到租的服务器性能不高，我采用了轻量并且坑少的vsftpd。命令如下：<br><code>sudo apt update<br>sudo apt install vsftpd</code><br>安装完成后，需要对其进行一定的设置来使用。<br><figure class="highlight plain"><figcaption><span>vi</span><a href="/etc/vsftpd.conf```">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">取消下列行首的#注释</span><br><span class="line">```write_enable=YES```（允许用户在ftp中的写入操作）</span><br><span class="line">```local_umask=022```（为用户增加相应的读写权限）</span><br><span class="line">```chroot_local_user=yes```（阻止访问除了用户文件夹意外的文件夹）</span><br><span class="line">在文件的末尾添加下列语句来开启消极模式：</span><br><span class="line">&lt;code&gt;</span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line">pasv_enable-YES</span><br><span class="line">pasv_min_port=40000</span><br><span class="line">pasv_max_port=40100&lt;/code&gt;</span><br><span class="line">之后保存退出编辑，重启vsftpd服务</span><br><span class="line">```service vsftpd restart</span><br></pre></td></tr></table></figure></p><p>这时，ftp服务器就可以使用了，但是在21端口使用ftp登录是非常危险的，即使使用了账户密码，但传输文件很容易会被劫持，因此我在Google之后选择使用更为安全的sftp。</p><h2 id="2、安装配置sftp"><a href="#2、安装配置sftp" class="headerlink" title="2、安装配置sftp"></a>2、安装配置sftp</h2><p>sftp使用的是ssh文件传输协议，需要安装openssh-server,一般的vps服务器都预先安装过。安装过就可以跳过这一步。安装命令如下：<br><figure class="highlight plain"><figcaption><span>apt install openssh-server```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">安装完成之后我们需要为ftp新建一个用户。</span><br><span class="line">为了以后可能会添加用户，这里就创建一个ftpaccess用户组。</span><br><span class="line">```sudo groupadd ftpaccess</span><br></pre></td></tr></table></figure></p><p>然后需要在/etc/ssh/sshd_config中修改一些参数。<br><figure class="highlight plain"><figcaption><span>vi</span><a href="/etc/ssh/sshd_config```">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">找到 **PasswordAuthentication**参数，若其=no，则将其注释掉，若为yes，就不用管。</span><br><span class="line">找到 **Subsystem sftp /usr/lib/openssh/sftp-server**将其注释掉。</span><br><span class="line">在文件最后添加下列语句：</span><br><span class="line">&lt;code&gt;Subsystem sftp internal-sftp</span><br><span class="line">Match group ftpaccess</span><br><span class="line">ChrootDirectory %h</span><br><span class="line">X11Forwarding no</span><br><span class="line">AllowTcpForwarding no</span><br><span class="line">ForceCommand internal-sftp</span><br><span class="line">&lt;/code&gt;</span><br><span class="line">之后重启ssh服务</span><br><span class="line">```service ssh restart</span><br></pre></td></tr></table></figure></p><p>下面开始创建访问sftp服务的用户<br>创建用户xiaofangdyd,属于ftpaccess组<br><code>sudo useradd -m xiaofangdyd -g ftpaccess -s /usr/bin/nologin</code><br>(其中使用/usr/bin/nologin脚本来阻止ftp用户访问bash脚本，增加安全性)<br><code>sudo passwd xiaofangdyd</code><br>(设置密码)<br><code>sudo chown root /home/xiaofangdyd</code><br>(为相应文件夹赋予root权限)<br>开启nologin脚本的开机访问<br><code>sudo vi /etc/shells</code><br>在最后添加如下行：<br><code>/usr/bin/nologin</code><br>最后在home文件夹创建一个用于下入文件的文件夹，并修改文件夹的所有者<br><code>mkdir /home/xiaofangdyd/files<br>sudo chown xiaofangdyd:ftpaccess /home/xiaofangdyd/files</code><br>现在就可以通过sftp来向files文件夹上传并下载文件了。</p><p>在Windows和Linux操作端，推荐使用<strong>filezilla客户端版</strong>（filezilla Client）对ftp服务器进行访问。因为首先fz提供了对sftp登录的支持，最重要的是，由于简体中文版的Windows系统因为国家规定使用的是GBK字符编码，在ubuntu服务器以及linux上，默认使用的是utf-8全球通用编码，编码不同会导致中文文件名乱码。因此需要在fz中开启强制使用utf-8编码，才能保证文件之间的稳定传输。<br>在iOS上，我使用的是FtpManager，同样使用sftp登录，强制使用utf-8字符编码。<br>在Android上,我使用的是AndFTP，设置同上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于身边设备包含种类过多，有Windows、Ubuntu、Android、iOS，有时候想要在四台设备间同步ppt，pdf，或者在Windows和Ubuntu上切换编译环境时用u盘拷贝文件步骤过于繁琐，且现有的一台服务器还没能充分利用资源，便萌生了在vps上再搭建一个ftp服务器的想法。&lt;br&gt;我对于ftp服务器的要求就是：有一定安全性，禁止匿名访问，尽量走加密通道传输，使用账户密码登录&lt;br&gt;然而百度上的教程经过我的测试大都不靠谱，于是自己Google摸索了一晚，找到了适合自己的搭建ftp的方法，在此分享并作为自己的备份。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="ftp" scheme="http://yoursite.com/tags/ftp/"/>
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>2017.11.26今天要考线代</title>
    <link href="http://yoursite.com/2017/11/26/2017-11-26%E4%BB%8A%E5%A4%A9%E8%A6%81%E8%80%83%E7%BA%BF%E4%BB%A3/"/>
    <id>http://yoursite.com/2017/11/26/2017-11-26今天要考线代/</id>
    <published>2017-11-25T17:36:29.000Z</published>
    <updated>2019-01-29T15:02:32.062Z</updated>
    
    <content type="html"><![CDATA[<p>昨天是星期六，心中怀揣着对线性代数的恐惧和室友泡了一天的图书馆……下午一个人出来的时候突然觉得好冷，好像每次从图书馆走出来都是这样的吧。</p><p>吃完饭回图书馆之前，溜去校外买了一杯抹茶，旁边的小女孩看着我和大人说：“他在一个人买奶茶。”瞬间觉得抹茶好苦啊。</p><p>可能每个人一生中都会有那么一段，需要一个人度过的时光，在这段时光里，我们会学会与自己相处，去了解自己，认识自己，认识这个世界。</p><a id="more"></a><p>路上看到夕阳和一棵树共同构成了一幅异常和谐的场面，兴高采烈想要分享出去，打好了字配好了图，在打算发送状态的那一刻，又退出了状态发送。就当没看到过这棵树吧。</p><p>走在路上发现，听歌时没谁可想，空空落落的，也不是件好事。</p><p>现在想想，为什么上了大学，人们开始拼命寻找恋人，拉帮结派，还不是因为大家都孤独。</p><p>我走到阳台，吸着雾霾看天。<br>繁星漫天，远处零散的几处霓虹灯。<br>我想着自己，突然有点想哭。<br>又过了一会，一阵风吹来。<br>吹来一大片云，关掉了天上的星灯。<br>学校的路灯早已熄灭，漆黑的夜里更加漆黑。<br>也许它认为城市应该睡觉了，但是我还醒着。<br><img src="https://cdn.xiaofangdyd.cn/xiandai1.gif" alt="alone.gif"></p><p>在微博上看到这张图片，刚开始觉得这真是一个热爱生活自娱自乐的狗子。<br>但细想这不就是孤独吗，一个人扮演两个人角色。<br>现实有很多人跟这只狗狗一样，狗狗表现在肢体，我们表演在内心。</p><p>站在汹涌的人群中，看着人家两人嬉闹打笑。<br>我捂着嘴巴看完，生怕发出一声狗叫。<br>窗内灯光柔软 爱意浓浓， 窗外寒风凌厉，形单影只。<br>外面太冷了，衣服有点单薄，我想回家了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天是星期六，心中怀揣着对线性代数的恐惧和室友泡了一天的图书馆……下午一个人出来的时候突然觉得好冷，好像每次从图书馆走出来都是这样的吧。&lt;/p&gt;
&lt;p&gt;吃完饭回图书馆之前，溜去校外买了一杯抹茶，旁边的小女孩看着我和大人说：“他在一个人买奶茶。”瞬间觉得抹茶好苦啊。&lt;/p&gt;
&lt;p&gt;可能每个人一生中都会有那么一段，需要一个人度过的时光，在这段时光里，我们会学会与自己相处，去了解自己，认识自己，认识这个世界。&lt;/p&gt;
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
    
      <category term="线性代数" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>排序算法--睡眠排序、面条排序、猴子排序 (非常严肃)</title>
    <link href="http://yoursite.com/2017/11/24/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F%E3%80%81%E9%9D%A2%E6%9D%A1%E6%8E%92%E5%BA%8F%E3%80%81%E7%8C%B4%E5%AD%90%E6%8E%92%E5%BA%8F-%E9%9D%9E%E5%B8%B8%E4%B8%A5%E8%82%83/"/>
    <id>http://yoursite.com/2017/11/24/排序算法-睡眠排序、面条排序、猴子排序-非常严肃/</id>
    <published>2017-11-23T16:37:00.000Z</published>
    <updated>2019-01-29T15:15:02.102Z</updated>
    
    <content type="html"><![CDATA[<p>常见的排序算法–诸如快排、堆排或归并等——都是基于比较的，除了这种正统意义上的排序算法，最近了解了几种令人啼笑皆非的排序算法，与大家分享一下。<br><a id="more"></a></p><h2 id="1、睡眠排序（sleep-sort）"><a href="#1、睡眠排序（sleep-sort）" class="headerlink" title="1、睡眠排序（sleep sort）"></a>1、睡眠排序（sleep sort）</h2><p>这个算法可以说算是最强大的排序算法，他的时间复杂度为O(n)，空间复杂度为0 ！时间复杂度完爆了quick sort，空间复杂度完爆了hash，而且还是稳定的。<br>c代码实现如下：<br><img src="https://cdn.xiaofangdyd.cn/paixu1.jpeg" alt="sleep_sort.jpeg"><br>原理主要是利用多线程，把接受的每一个参数分别放在不同的线程里面并在每个线程同时使用sleep函数，sleep的时间就是参数的值，这样的话利用“数值大的参数的线程sleep的时间更长”这个事实，数字小的值就被先打印出来了，从而达到从小到大排序的目的。简单来说就是对于[1,3,6,10]这个数组，让计算机在第1s输出1，在第3s输出3，第6s输出6，第10s输出10。<br>不过这个方法有个致命的缺点，就是如果被排序的数字很大的话，花的时间也比较多。以提供的代码为例，如果参数是3, 1, 10000的话，那么输出结果在第一秒会输出1，第三秒会输出3，但是要在10000秒时才能输出10000。为了提高速度可以按比例缩短时间，比如把sleep那句改成sleep(this/10000)，但是也不能无限制缩小时间，<strong>当睡眠时间小于开启多线程的时间时</strong>，就会出现乱序。<br>当然上面这段代码很粗略，有很多问题还没解决。比如：</p><ol><li><del>搞不定负数</del>。（可以用一个恒正的函数将输入映射成时间）</li><li><del>输入相近的数会有误差</del>。（可以乘个适当的系数，放大数据间的差）</li><li>当输入的数据很多时，这些线程不能看作是同时启动的等等。</li></ol><h2 id="2、面条排序（Spaghetti-Sort）"><a href="#2、面条排序（Spaghetti-Sort）" class="headerlink" title="2、面条排序（Spaghetti Sort）"></a>2、面条排序（Spaghetti Sort）</h2><p>意大利面条排序(Spaghetti Sort)的思路是，将输入分别对应到不同长度的面条上，每根面条的长度即为对应的数字的大小。比如，对于[1, 4, 2, 8, 9]这个输入，则分别做出长度为1cm、4cm、2cm、8cm、9cm的面条。然后，将这些面条的一头对齐，用手抓住，另一头向下。然后慢慢地将手向下垂直下降，第一个触碰到桌面的面条对应的数字则为最大的数字，第二个触碰到的就是第二大的，依次类推，代码没找到…看起来挺简单的，和睡眠排序差别不大，就不写了….</p><h2 id="3、猴子排序（Bogo-Sort）"><a href="#3、猴子排序（Bogo-Sort）" class="headerlink" title="3、猴子排序（Bogo Sort）"></a>3、猴子排序（Bogo Sort）</h2><p>如下关于猴子排序(Bogo Sort)的描述摘自维基百科：</p><blockquote><p>在计算机科学中，Bogo排序（Bogo-Sort）是个既不实用又原始的排序算法，其原理等同将一堆卡片抛起，落在桌上后检查卡片是否已整齐排列好，若非就再抛一次。其名字源自Quantum bogodynamics，又称bozo sort、blort sort或猴子排序（参见无限猴子定理）。</p></blockquote><p>所谓无限猴子定理，即是：让一只猴子在打字机上随机地按键，当按键时间达到无穷时，几乎必然能够打出任何给定的文字，比如莎士比亚的全套著作。</p><p>猴子排序也是一样，原理就是随机打乱数组，检查是否排好序，若是，则输出，否则再次打乱，再检查……最佳情况的复杂度为O(n)，平均O(n*n!)，最坏可执行到世界末日。<br>c++代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;//random需要的头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">103</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Ordered</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!Ordered()) &#123;</span><br><span class="line">        random_shuffle(a, a + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，这种排序算法，基本大家就在吹牛的时候说说就好了，写在代码里，基本上就是分分钟被打死的后果。</p><h3 id="3-1、量子猴排-Quantum-Bogo-Sort"><a href="#3-1、量子猴排-Quantum-Bogo-Sort" class="headerlink" title="3.1、量子猴排(Quantum Bogo Sort)"></a>3.1、量子猴排(Quantum Bogo Sort)</h3><p>量子猴排可以算是概念上对猴子排序的一种优化：洗牌的时候，使用量子化随机排列。这样的话，我们在观测这组数之前，这组数的状态是叠加的，参照薛定谔的猫。通过这种量子化随机排列，我们划分出来了个平行宇宙。接下来，在某个宇宙A中，观测一下这组数，发现运气不好，没有排序好，那么我们就销毁掉这个宇宙。然后再看看其他宇宙的运气怎么样。终于，在一个宇宙Z中，发现刚好是排好序的数组。那么我们就保留这个宇宙。最后，没有被销毁的宇宙中，数组都是恰好一次被排好序的。<br><img src="https://cdn.xiaofangdyd.cn/paixu2.jpg" alt="量子猴排.jpg"><br>对了，量子猴排的时间复杂度是O(n)！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的排序算法–诸如快排、堆排或归并等——都是基于比较的，除了这种正统意义上的排序算法，最近了解了几种令人啼笑皆非的排序算法，与大家分享一下。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
      <category term="code" scheme="http://yoursite.com/categories/tools/code/"/>
    
    
      <category term="排序算法" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
      <category term="睡眠排序" scheme="http://yoursite.com/tags/%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>在服务器端使用一键安装ss脚本及线路优化</title>
    <link href="http://yoursite.com/2017/11/21/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85ss%E8%84%9A%E6%9C%AC%E5%8F%8A%E7%BA%BF%E8%B7%AF%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2017/11/21/在服务器端使用一键安装ss脚本及线路优化/</id>
    <published>2017-11-21T15:35:45.000Z</published>
    <updated>2019-01-29T13:37:32.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h2><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">常规版Windows客户端</a></p><p><a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases" target="_blank" rel="noopener">ShadowsocksR版Windows客户端</a></p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p>为了能有一个稳定的上网环境，以及某件事情的影响，萌生了想自己搭梯子的想法。最近的一个月一直在恶补这方面的知识，并自己动手实践，对shadowsocks的使用才初步入门，知道了在服务器端安装ss客户端的方法，总结下来，最为简单易用的是秋水逸冰的一键安装脚本<br><a id="more"></a><br>本脚本适用于CentOS 6，7，Debian，Ubuntu系统，ss客户端对硬件资源的要求并不高，因此在选择服务器时如果没有其他需求的话，只用考虑网络带宽以及流量问题，这里需要注意的是，搭建的服务器相当于是本地访问和网站之间的桥梁，网站的数据包会先下载到服务器上，然后由服务器上传到本地客户端中，因此，<strong>服务器端使用的流量是本地流量的2倍</strong>，就好比你在购买服务器时，网站提示一个月有1000g的流量限制，当你在youtube上看500g的视频后，你的服务器端1000g流量其实已经用完了。<br>服务器的购买并没有固定的推荐，每个地区的网络不同，运营商不同都会导致网速的差异，因此选择一个好的服务器很重要。我所在的西安电信使用digitalocean上提供的sfo的ubuntu服务器实测下载峰值可以达到2m/s，其他地区未知。购买及连接方法日后再谈，今天主要想记录下服务器的配置及优化。<br>本文使用的是秋水逸冰的一键安装脚本，当在本地使用ssh命令（linux及mac os）或者xshell5（windows）连接上服务器的root用户后，依次运行以下3条命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure></p><p>之后脚本便自动执行，首先选择安装shadowsocks的版本，默认的1是常规，还有一个shadowsocksR版可供选择。<br>然后脚本会提示进行shadowsocks的基本参数设置<br>第一次是设置密码（如不设定，默认为 teddysun.com）<br>然后是服务器端口（如不设定，默认为 8989）<br>最后是选择加密方式（如不设定，默认为 aes-256-gcm）<br>加密方式我一般选择为第7个 aes-256-cfb（因为其支持的客户端相对较多一点）<br>安装完成后，脚本会提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, Shadowsocks-python server install completed!</span><br><span class="line">Your Server IP :your_server_ip</span><br><span class="line">Your Server Port :your_server_port</span><br><span class="line">Your Password :your_password</span><br><span class="line">Your Encryption Method:your_encryption_method</span><br><span class="line"></span><br><span class="line">Welcome to visit:https://teddysun.com/342.html</span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><p>这时可以记下ip 远程端口 和密码在shadowsocks客户端上使用了。<br>为了充分发挥服务器的网络性能，就需要对服务器的网络进行优化，最近Google 开源了其TCP BBR拥塞控制算法，并提交到了Linux内核。从4.9开始，Linux 内核已经用上了该算法。经过上机测试，有些机器的网速甚至可以提升好几个数量级。本次更新内核及开启bbr算法依旧使用的是秋水逸冰的脚本。<br>在服务器root用户下，使用命令：</p><figure class="highlight plain"><figcaption><span>--no-check-certificate</span><a href="https://github.com/teddysun/across/raw/master/bbr.sh" target="_blank" rel="noopener">&& chmod +x bbr.sh && ./bbr.sh```</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。</span><br><span class="line">重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：</span><br><span class="line">```uname -r</span><br></pre></td></tr></table></figure><p>查看内核版本，如果显示在4.13及以上说明ok了。这时服务器端的ss已经配置优化完成，<strong>脚本默认开启了ss的开机启动</strong>，因此服务器重启也不会有影响。</p><h2 id="卸载："><a href="#卸载：" class="headerlink" title="卸载："></a>卸载：</h2><p>在root用户下，使用命令<br><figure class="highlight plain"><figcaption><span>uninstall```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 使用命令：</span><br><span class="line">启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</span><br><span class="line">Shadowsocks-Python 版：</span><br><span class="line">```/etc/init.d/shadowsocks-python start | stop | restart | status</span><br></pre></td></tr></table></figure></p><p>ShadowsocksR 版：<br><figure class="highlight plain"><figcaption><span>start | stop | restart | status```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Shadowsocks-Go 版：</span><br><span class="line">```/etc/init.d/shadowsocks-go start | stop | restart | status</span><br></pre></td></tr></table></figure></p><p>Shadowsocks-libev 版：<br><figure class="highlight plain"><figcaption><span>start | stop | restart | status```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">各版本默认配置文件位置</span><br><span class="line">Shadowsocks-Python 版：</span><br><span class="line">```/etc/shadowsocks-python/config.json</span><br></pre></td></tr></table></figure></p><p>ShadowsocksR 版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Shadowsocks-Go 版：</span><br><span class="line">```/etc/shadowsocks-go/config.json</span><br></pre></td></tr></table></figure></p><p>Shadowsocks-libev 版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">多用户多端口配置方法</span><br><span class="line">在root用户下，使用命令</span><br><span class="line">```vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p><p>e.g:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">&quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">&quot;local_port&quot;:1080,</span><br><span class="line">&quot;port_password&quot;:&#123;</span><br><span class="line">&quot;8989&quot;:&quot;password0&quot;,</span><br><span class="line">&quot;9001&quot;:&quot;password1&quot;,</span><br><span class="line">&quot;9002&quot;:&quot;password2&quot;,</span><br><span class="line">&quot;9003&quot;:&quot;password3&quot;,</span><br><span class="line">&quot;9004&quot;:&quot;password4&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;timeout&quot;:300,</span><br><span class="line">&quot;method&quot;:&quot;your_encryption_method&quot;,</span><br><span class="line">&quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://teddysun.com/342.html" target="_blank" rel="noopener">https://teddysun.com/342.html</a><br><a href="https://teddysun.com/489.html" target="_blank" rel="noopener">https://teddysun.com/489.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载：&quot;&gt;&lt;a href=&quot;#下载：&quot; class=&quot;headerlink&quot; title=&quot;下载：&quot;&gt;&lt;/a&gt;下载：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-windows/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;常规版Windows客户端&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ShadowsocksR版Windows客户端&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装：&quot;&gt;&lt;a href=&quot;#安装：&quot; class=&quot;headerlink&quot; title=&quot;安装：&quot;&gt;&lt;/a&gt;安装：&lt;/h2&gt;&lt;p&gt;为了能有一个稳定的上网环境，以及某件事情的影响，萌生了想自己搭梯子的想法。最近的一个月一直在恶补这方面的知识，并自己动手实践，对shadowsocks的使用才初步入门，知道了在服务器端安装ss客户端的方法，总结下来，最为简单易用的是秋水逸冰的一键安装脚本&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="shadowsocks" scheme="http://yoursite.com/tags/shadowsocks/"/>
    
      <category term="Google BBR" scheme="http://yoursite.com/tags/Google-BBR/"/>
    
  </entry>
  
  <entry>
    <title>常用网址查询</title>
    <link href="http://yoursite.com/2017/11/21/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2017/11/21/常用网址查询/</id>
    <published>2017-11-21T15:33:23.000Z</published>
    <updated>2019-01-29T13:11:57.918Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://210.27.80.195:8001/" target="_blank" rel="noopener">校园卡转账（校园网）</a><br><a href="http://aaa2.nwsuaf.edu.cn:8080/selfservice/" target="_blank" rel="noopener">西农校园网自助服务系统（校园网）</a><br><a href="http://219.245.196.72" target="_blank" rel="noopener">英语视听说网址（校园网）</a><br><a href="https://odv.xiaofangdyd.cn" target="_blank" rel="noopener">万有仓库</a><br><a href="http://code.xiaofangdyd.cn/" target="_blank" rel="noopener">代码托管平台</a><br><a href="http://pt.nwsuaf6.edu.cn/index.php" target="_blank" rel="noopener">麦田pt的ipv6网址（需要ipv6网）</a><br><a href="https://movie.douban.com/top250" target="_blank" rel="noopener">豆瓣电影 Top 250</a><br><a href="https://go.microsoft.com/fwlink/p/?LinkId=248256" target="_blank" rel="noopener">onedrive客户端（Windows7及以下）</a><br><a href="https://code.visualstudio.com/docs/?dv=win64" target="_blank" rel="noopener">Visual Studio Code下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://210.27.80.195:8001/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;校园卡转账（校园网）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://aaa2.nwsuaf.edu.cn:8080/selfservice
      
    
    </summary>
    
      <category term="方方说" scheme="http://yoursite.com/categories/%E6%96%B9%E6%96%B9%E8%AF%B4/"/>
    
    
      <category term="学校" scheme="http://yoursite.com/tags/%E5%AD%A6%E6%A0%A1/"/>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
